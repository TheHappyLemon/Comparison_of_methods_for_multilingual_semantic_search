Free and open-source software portal Knockout is a standalone JavaScript implementation of the Model–View–ViewModel pattern with templates. The underlying principles are therefore: a clear separation between domain data, view components and data to be displayed the presence of a clearly defined layer of specialized code to manage the relationships between the view components The latter leverages the native event management features of the JavaScript language. These features streamline and simplify the specification of complex relationships between view components, which in turn make the display more responsive and the user experience richer. Knockout was developed and is maintained as an open source project by Steve Sanderson. Knockout includes the following features: Declarative bindings Automatic UI refresh (when the data model's state changes, the UI updates automatically) Dependency tracking Templating (contains a dedicated template engine, but other templating engines can be used) 1. In this example, two text boxes are bound to observable variables on a data model. The "full name" display is bound to a dependent observable, whose value is computed in terms of the observables. When either text box is edited, the "full name" display is automatically updated, with no explicit event handling. function ViewModel() { this.firstName = ko.observable(""); this.lastName = ko.observable(""); this.fullName = ko.computed( function() { return this.firstName() + " " + this.lastName(); }, this); } ko.applyBindings(new ViewModel()); 2. Creating Custom Binding Handlers in KnockoutJS Use the ko.bindingHandlers object to specify your custom binding’s name and create an init or update function when creating a custom binding handler. The init function is called when the binding has been applied to an element, perfect for onetime initialization. Whenever the bound observable changes, an update function is called that allows you to react to changing data. Here’s a simple example of a custom binding handler that applies a jQuery UI datepicker to an input element: ko.bindingHandlers.datepicker = { init: function(element, valueAccessor) { $(element).datepicker({ onSelect: function(date) { var observable = valueAccessor(); observable(date); } }); }, update: function(element, valueAccessor) { var value = ko.unwrap(valueAccessor()); $(element).datepicker("setDate", value); } }; Papa, John (February 2012). "Getting Started with Knockout". MSDN Magazine. Retrieved March 9, 2012. Papa, John (March 2012). "Knockout's Built-in Bindings for HTML and JavaScript". MSDN Magazine. Retrieved March 9, 2012. "Mastering Knockoutjs: A Comprehensive Guide for Dynamic Web Apps". Feb 2024. Retrieved Feb 26, 2024. Official website
PostgreSQL (/ˈpoʊstɡrɛs ˌkjuː ˈɛl/, POHST-gres kyoo el), also known as Postgres, is a free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. PostgreSQL features transactions with atomicity, consistency, isolation, durability (ACID) properties, automatically updatable views, materialized views, triggers, foreign keys, and stored procedures. It is supported on all major operating systems, including Linux, FreeBSD, OpenBSD, macOS, and Windows, and handles a range of workloads from single machines to data warehouses or web services with many concurrent users. The PostgreSQL Global Development Group focuses only on developing a database engine and closely related components. This core is, technically, what comprises PostgreSQL itself, but there is an extensive developer community and ecosystem that provides other important feature sets that might, traditionally, be provided by a proprietary software vendor. These include special-purpose database engine features, like those needed to support a geospatial or temporal database or features which emulate other database products. Also available from third parties are a wide variety of user and machine interface features, such as graphical user interfaces or load balancing and high availability toolsets. The large third-party PostgreSQL support network of people, companies, products, and projects, even though not part of The PostgreSQL Development Group, are essential to the PostgreSQL database engine's adoption and use and make up the PostgreSQL ecosystem writ large. PostgreSQL was originally named POSTGRES, referring to its origins as a successor to the Ingres database developed at the University of California, Berkeley. In 1996, the project was renamed PostgreSQL to reflect its support for SQL. After a review in 2007, the development team decided to keep the name PostgreSQL and the alias Postgres. PostgreSQL evolved from the Ingres project at the University of California, Berkeley. In 1982, the leader of the Ingres team, Michael Stonebraker, left Berkeley to make a proprietary version of Ingres. He returned to Berkeley in 1985, and began a post-Ingres project to address the problems with contemporary database systems that had become increasingly clear during the early 1980s. He won the Turing Award in 2014 for these and other projects, and techniques pioneered in them. The new project, POSTGRES, aimed to add the fewest features needed to completely support data types. These features included the ability to define types and to fully describe relationships – something used widely, but maintained entirely by the user. In POSTGRES, the database understood relationships, and could retrieve information in related tables in a natural way using rules. POSTGRES used many of the ideas of Ingres, but not its code. Starting in 1986, published papers described the basis of the system, and a prototype version was shown at the 1988 ACM SIGMOD Conference. The team released version 1 to a small number of users in June 1989, followed by version 2 with a re-written rules system in June 1990. Version 3, released in 1991, again re-wrote the rules system, and added support for multiple storage managers and an improved query engine. By 1993, the number of users began to overwhelm the project with requests for support and features. After releasing version 4.2 on June 30, 1994 – primarily a cleanup – the project ended. Berkeley released POSTGRES under an MIT License variant, which enabled other developers to use the code for any use. At the time, POSTGRES used an Ingres-influenced POSTQUEL query language interpreter, which could be interactively used with a console application named monitor. In 1994, Berkeley graduate students Andrew Yu and Jolly Chen replaced the POSTQUEL query language interpreter with one for the SQL query language, creating Postgres95. The monitor console was also replaced by psql. Yu and Chen announced the first version (0.01) to beta testers on May 5, 1995. Version 1.0 of Postgres95 was announced on September 5, 1995, with a more liberal license that enabled the software to be freely modifiable. On July 8, 1996, Marc Fournier at Hub.org Networking Services provided the first non-university development server for the open-source development effort. With the participation of Bruce Momjian and Vadim B. Mikheev, work began to stabilize the code inherited from Berkeley. In 1996, the project was renamed to PostgreSQL to reflect its support for SQL. The online presence at the website PostgreSQL.org began on October 22, 1996. The first PostgreSQL release formed version 6.0 on January 29, 1997. Since then developers and volunteers around the world have maintained the software as The PostgreSQL Global Development Group. The project continues to make releases available under its free and open-source software PostgreSQL License. Code comes from contributions from proprietary vendors, support companies, and open-source programmers. PostgreSQL manages concurrency through multiversion concurrency control (MVCC), which gives each transaction a "snapshot" of the database, allowing changes to be made without affecting other transactions. This largely eliminates the need for read locks, and ensures the database maintains ACID principles. PostgreSQL offers four levels of transaction isolation: Read Uncommitted, Read Committed, Repeatable Read and Serializable. Because PostgreSQL is immune to dirty reads, requesting a Read Uncommitted transaction isolation level provides read committed instead. PostgreSQL supports full serializability via the serializable snapshot isolation (SSI) method. The PostreSQL MVCC implementation is prone to performance issues that require tuning when under a heavy write load which updates existing rows. PostgreSQL includes built-in binary replication based on shipping the changes (write-ahead logs (WAL)) to replica nodes asynchronously, with the ability to run read-only queries against these replicated nodes. This allows splitting read traffic among multiple nodes efficiently. Earlier replication software that allowed similar read scaling normally relied on adding replication triggers to the master, increasing load. PostgreSQL includes built-in synchronous replication that ensures that, for each write transaction, the master waits until at least one replica node has written the data to its transaction log. Unlike other database systems, the durability of a transaction (whether it is asynchronous or synchronous) can be specified per-database, per-user, per-session or even per-transaction. This can be useful for workloads that do not require such guarantees, and may not be wanted for all data as it slows down performance due to the requirement of the confirmation of the transaction reaching the synchronous standby. Standby servers can be synchronous or asynchronous. Synchronous standby servers can be specified in the configuration which determines which servers are candidates for synchronous replication. The first in the list that is actively streaming will be used as the current synchronous server. When this fails, the system fails over to the next in line. Synchronous multi-master replication is not included in the PostgreSQL core. Postgres-XC which is based on PostgreSQL provides scalable synchronous multi-master replication. It is licensed under the same license as PostgreSQL. A related project is called Postgres-XL. Postgres-R is yet another fork. Bidirectional replication (BDR) is an asynchronous multi-master replication system for PostgreSQL. Tools such as repmgr make managing replication clusters easier. Several asynchronous trigger-based replication packages are available. These remain useful even after introduction of the expanded core abilities, for situations where binary replication of a full database cluster is inappropriate: Slony-I Londiste, part of SkyTools (developed by Skype) Bucardo multi-master replication (developed by Backcountry.com) SymmetricDS multi-master, multi-tier replication PostgreSQL includes built-in support for regular B-tree and hash table indexes, and four index access methods: generalized search trees (GiST), generalized inverted indexes (GIN), Space-Partitioned GiST (SP-GiST) and Block Range Indexes (BRIN). In addition, user-defined index methods can be created, although this is quite an involved process. Indexes in PostgreSQL also support the following features: Expression indexes can be created with an index of the result of an expression or function, instead of simply the value of a column. Partial indexes, which only index part of a table, can be created by adding a WHERE clause to the end of the CREATE INDEX statement. This allows a smaller index to be created. The planner is able to use multiple indexes together to satisfy complex queries, using temporary in-memory bitmap index operations (useful for data warehouse applications for joining a large fact table to smaller dimension tables such as those arranged in a star schema). k-nearest neighbors (k-NN) indexing (also referred to KNN-GiST) provides efficient searching of "closest values" to that specified, useful to finding similar words, or close objects or locations with geospatial data. This is achieved without exhaustive matching of values. Index-only scans often allow the system to fetch data from indexes without ever having to access the main table. Block Range Indexes (BRIN). PostgreSQL schemas are namespaces, allowing objects of the same kind and name to co-exist in a single database. They are not to be confused with a database schema -- the abstract, structural, organizational specification which defines how every table's data relates to data within other tables. All PostgreSQL database objects, except for a few global objects such as roles and tablespaces, exist within a schema. They cannot be nested, schemas cannot contain schemas. The permission system controls access to schemas and their content. By default, newly created databases have only a single schema called public but other schemas can be added and the public schema isn't mandatory. A search_path setting determines the order in which PostgreSQL checks schemas for unqualified objects (those without a prefixed schema). By default, it is set to $user, public ($user refers to the currently connected database user). This default can be set on a database or role level, but as it is a session parameter, it can be freely changed (even multiple times) during a client session, affecting that session only. Non-existent schemas, or other schemas not accessible to the logged-in user, that are listed in search_path are silently skipped during object lookup. New objects are created in whichever valid schema (one that can be accessed) appears first in the search_path. A wide variety of native data types are supported, including: Boolean Arbitrary-precision numerics Character (text, varchar, char) Binary Date/time (timestamp/time with/without time zone, date, interval) Money Enum Bit strings Text search type Composite HStore, an extension enabled key-value store within PostgreSQL Arrays (variable-length and can be of any data type, including text and composite types) up to 1 GB in total storage size Geometric primitives IPv4 and IPv6 addresses Classless Inter-Domain Routing (CIDR) blocks and MAC addresses XML supporting XPath queries Universally unique identifier (UUID) JavaScript Object Notation (JSON), and a faster binary JSONB (not the same as BSON) In addition, users can create their own data types which can usually be made fully indexable via PostgreSQL's indexing infrastructures – GiST, GIN, SP-GiST. Examples of these include the geographic information system (GIS) data types from the PostGIS project for PostgreSQL. There is also a data type called a domain, which is the same as any other data type but with optional constraints defined by the creator of that domain. This means any data entered into a column using the domain will have to conform to whichever constraints were defined as part of the domain. A data type that represents a range of data can be used which are called range types. These can be discrete ranges (e.g. all integer values 1 to 10) or continuous ranges (e.g., any time between 10:00 am and 11:00 am). The built-in range types available include ranges of integers, big integers, decimal numbers, time stamps (with and without time zone) and dates. Custom range types can be created to make new types of ranges available, such as IP address ranges using the inet type as a base, or float ranges using the float data type as a base. Range types support inclusive and exclusive range boundaries using the [] and () characters respectively. (e.g., [4,9) represents all integers starting from and including 4 up to but not including 9.) Range types are also compatible with existing operators used to check for overlap, containment, right of etc. New types of almost all objects inside the database can be created, including: Casts Conversions Data types Data domains Functions, including aggregate functions and window functions Indexes including custom indexes for custom types Operators (existing ones can be overloaded) Procedural languages Tables can be set to inherit their characteristics from a parent table. Data in child tables will appear to exist in the parent tables, unless data is selected from the parent table using the ONLY keyword, i.e. SELECT * FROM ONLY parent_table;. Adding a column in the parent table will cause that column to appear in the child table. Inheritance can be used to implement table partitioning, using either triggers or rules to direct inserts to the parent table into the proper child tables. This feature is not fully supported. In particular, table constraints are not currently inheritable. All check constraints and not-null constraints on a parent table are automatically inherited by its children. Other types of constraints (unique, primary key, and foreign key constraints) are not inherited. Inheritance provides a way to map the features of generalization hierarchies depicted in entity relationship diagrams (ERDs) directly into the PostgreSQL database. Referential integrity constraints including foreign key constraints, column constraints, and row checks Binary and textual large-object storage Tablespaces Per-column collation Online backup Point-in-time recovery, implemented using write-ahead logging In-place upgrades with pg_upgrade for less downtime PostgreSQL can link to other systems to retrieve data via foreign data wrappers (FDWs). These can take the form of any data source, such as a file system, another relational database management system (RDBMS), or a web service. This means that regular database queries can use these data sources like regular tables, and even join multiple data-sources together. PostgreSQL supports a binary communication protocol that allows applications to connect to the database server. The protocol is versioned (currently 3.0, as of PostgreSQL 7.4) and has a detailed specification. The official client implementation of this communication protocol is a C API, libpq. In addition, the officially supported ECPG tool allows SQL commands to be embedded in C code. Both are part of the standard PostgreSQL distribution. Third-party libraries for connecting to PostgreSQL are available for many programming languages, including C++, Java, Julia, Python, Node.js, Go, and Rust. Procedural languages allow developers to extend the database with custom subroutines (functions), often called stored procedures. These functions can be used to build database triggers (functions invoked on modification of certain data) and custom data types and aggregate functions. Procedural languages can also be invoked without defining a function, using a DO command at SQL level. Languages are divided into two groups: Procedures written in safe languages are sandboxed and can be safely created and used by any user. Procedures written in unsafe languages can only be created by superusers, because they allow bypassing a database's security restrictions, but can also access sources external to the database. Some languages like Perl provide both safe and unsafe versions. PostgreSQL has built-in support for three procedural languages: Plain SQL (safe). Simpler SQL functions can get expanded inline into the calling (SQL) query, which saves function call overhead and allows the query optimizer to "see inside" the function. Procedural Language/PostgreSQL (PL/pgSQL) (safe), which resembles Oracle's Procedural Language for SQL (PL/SQL) procedural language and SQL/Persistent Stored Modules (SQL/PSM). C (unsafe), which allows loading one or more custom shared library into the database. Functions written in C offer the best performance, but bugs in code can crash and potentially corrupt the database. Most built-in functions are written in C. In addition, PostgreSQL allows procedural languages to be loaded into the database through extensions. Three language extensions are included with PostgreSQL to support Perl, Tcl, and Python. For Python, the current Python 3 is used, and the discontinued Python 2 is no longer supported as of PostgreSQL 15. Both were supported previously, defaulting to Python 2, while old and new versions couldn't be used in the same session. External projects provide support for many other languages, including PL/Java, JavaScript (PL/V8), PL/Julia, PL/R, PL/Ruby, and others. Triggers are events triggered by the action of SQL data manipulation language (DML) statements. For example, an INSERT statement might activate a trigger that checks if the values of the statement are valid. Most triggers are only activated by either INSERT or UPDATE statements. Triggers are fully supported and can be attached to tables. Triggers can be per-column and conditional, in that UPDATE triggers can target specific columns of a table, and triggers can be told to execute under a set of conditions as specified in the trigger's WHERE clause. Triggers can be attached to views by using the INSTEAD OF condition. Multiple triggers are fired in alphabetical order. In addition to calling functions written in the native PL/pgSQL, triggers can also invoke functions written in other languages like PL/Python or PL/Perl. PostgreSQL provides an asynchronous messaging system that is accessed through the NOTIFY, LISTEN and UNLISTEN commands. A session can issue a NOTIFY command, along with the user-specified channel and an optional payload, to mark a particular event occurring. Other sessions are able to detect these events by issuing a LISTEN command, which can listen to a particular channel. This functionality can be used for a wide variety of purposes, such as letting other sessions know when a table has updated or for separate applications to detect when a particular action has been performed. Such a system prevents the need for continuous polling by applications to see if anything has yet changed, and reducing unnecessary overhead. Notifications are fully transactional, in that messages are not sent until the transaction they were sent from is committed. This eliminates the problem of messages being sent for an action being performed which is then rolled back. Many connectors for PostgreSQL provide support for this notification system (including libpq, JDBC, Npgsql, psycopg and node.js) so it can be used by external applications. PostgreSQL can act as an effective, persistent "pub/sub" server or job server by combining LISTEN with FOR UPDATE SKIP LOCKED. Rules allow the "query tree" of an incoming query to be rewritten; they are an, automatically invoked, macro language for SQL. "Query Re-Write Rules" are attached to a table/class and "Re-Write" the incoming DML (select, insert, update, and/or delete) into one or more queries that either replace the original DML statement or execute in addition to it. Query Re-Write occurs after DML statement parsing and before query planning. The functionality rules provide was, in almost every way, later duplicated with the introduction of newer types of triggers. The use of triggers is usually preferred over rules as it is easier to reason about trigger behavior and interactions than when equivalent rules are used. Transactions Full-text search Views Materialized views Updateable views Recursive views Inner, outer (full, left, and right), and cross joins Sub-selects Correlated sub-queries Regular expressions Common table expressions and writable common table expressions Encrypted connections via Transport Layer Security (TLS); current versions do not use vulnerable SSL, even with that configuration option Domains Savepoints Two-phase commit The Oversized-Attribute Storage Technique (TOAST) is used to transparently store large table attributes (such as big MIME attachments or XML messages) in a separate area, with automatic compression. Embedded SQL is implemented using preprocessor. SQL code is first written embedded into C code. Then code is run through ECPG preprocessor, which replaces SQL with calls to code library. Then code can be compiled using a C compiler. Embedding works also with C++ but it does not recognize all C++ constructs. PostgreSQL server is process-based (not threaded), and uses one operating system process per database session. Multiple sessions are automatically spread across all available CPUs by the operating system. Many types of queries can also be parallelized across multiple background worker processes, taking advantage of multiple CPUs or cores. Client applications can use threads and create multiple database connections from each thread. PostgreSQL manages its internal security on a per-role basis. A role is generally regarded to be a user (a role that can log in), or a group (a role of which other roles are members). Permissions can be granted or revoked on any object down to the column level, and can allow or prevent the visibility/creation/alteration/deletion of objects at the database, schema, table, and row levels. PostgreSQL's SECURITY LABEL feature (extension to SQL standards), allows for additional security; with a bundled loadable module that supports label-based mandatory access control (MAC) based on Security-Enhanced Linux (SELinux) security policy. PostgreSQL natively supports a broad number of external authentication mechanisms, including: Password: either SCRAM-SHA-256, MD5 or plain-text Generic Security Services Application Program Interface (GSSAPI) Security Support Provider Interface (SSPI) Kerberos ident (maps O/S user-name as provided by an ident server to database user-name) Peer (maps local user name to database user name) Lightweight Directory Access Protocol (LDAP) Active Directory (AD) RADIUS Certificate Pluggable authentication module (PAM) The GSSAPI, SSPI, Kerberos, peer, ident and certificate methods can also use a specified "map" file that lists which users matched by that authentication system are allowed to connect as a specific database user. These methods are specified in the cluster's host-based authentication configuration file (pg_hba.conf), which determines what connections are allowed. This allows control over which user can connect to which database, where they can connect from (IP address, IP address range, domain socket), which authentication system will be enforced, and whether the connection must use Transport Layer Security (TLS). PostgreSQL claims high, but not complete, conformance with the latest SQL standard ("as of the version 15 release in October 2022, PostgreSQL conforms to at least 170 of the 179 mandatory features for SQL:2016 Core conformance", and no other databases fully conformed to it). One exception is the handling of unquoted identifiers like table or column names. In PostgreSQL they are folded, internally, to lower case characters whereas the standard says that unquoted identifiers should be folded to upper case. Thus, Foo should be equivalent to FOO not foo according to the standard. Other shortcomings concern the absence of temporal tables allowing automatic logging of row versions during transactions with the possibility of browsing in time (FOR SYSTEM TIME predicate),[citation needed] although relatively SQL compliant third-party extensions are available. Many informal performance studies of PostgreSQL have been done. Performance improvements aimed at improving scalability began heavily with version 8.1. Simple benchmarks between version 8.0 and version 8.4 showed that the latter was more than ten times faster on read-only workloads and at least 7.5 times faster on both read and write workloads. The first industry-standard and peer-validated benchmark was completed in June 2007, using the Sun Java System Application Server (proprietary version of GlassFish) 9.0 Platform Edition, UltraSPARC T1-based Sun Fire server and PostgreSQL 8.2. This result of 778.14 SPECjAppServer2004 JOPS@Standard compares favourably with the 874 JOPS@Standard with Oracle 10 on an Itanium-based HP-UX system. In August 2007, Sun submitted an improved benchmark score of 813.73 SPECjAppServer2004 JOPS@Standard. With the system under test at a reduced price, the price/performance improved from $84.98/JOPS to $70.57/JOPS. The default configuration of PostgreSQL uses only a small amount of dedicated memory for performance-critical purposes such as caching database blocks and sorting. This limitation is primarily because older operating systems required kernel changes to allow allocating large blocks of shared memory. PostgreSQL.org provides advice on basic recommended performance practice in a wiki. In April 2012, Robert Haas of EnterpriseDB demonstrated PostgreSQL 9.2's linear CPU scalability using a server with 64 cores. Matloob Khushi performed benchmarking between PostgreSQL 9.0 and MySQL 5.6.15 for their ability to process genomic data. In his performance analysis he found that PostgreSQL extracts overlapping genomic regions eight times faster than MySQL using two datasets of 80,000 each forming random human DNA regions. Insertion and data uploads in PostgreSQL were also better, although general searching ability of both databases was almost equivalent. PostgreSQL is available for the following operating systems: Linux (all recent distributions), 64-bit ARM and x86-64 installers available and tested for macOS (OS X) version 10.12 and newer, Windows (with installers available and tested for 64-bit Windows Server 2019 and 2016; some older PostgreSQL versions were tested back to Windows 2012 R2), FreeBSD, OpenBSD, NetBSD, and these without official (though unofficial likely available) binary executables, Solaris, AIX, and HP-UX. Most other (modern) Unix-like systems do also work. PostgreSQL can be expected to work on any of the following instruction set architectures (and operating systems): 64-bit x86-64 and 32-bit x86 on Windows XP (or later) and other operating systems; these are supported on other than Windows: 64-bit ARM and the older 32-bit ARM, including older such as ARMv6 in Raspberry Pi), z/Architecture, S/390, PowerPC (incl. 64-bit Power ISA), SPARC (also 64-bit), IA-64 Itanium (HP-UX), MIPS and PA-RISC. It was also known to work on some other platforms (while not been tested on for years, i.e. for latest versions). Open source front-ends and tools for administering PostgreSQL include: psql The primary front-end for PostgreSQL is the psql command-line program, which can be used to enter SQL queries directly, or execute them from a file. In addition, psql provides a number of meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks; for example tab completion of object names and SQL syntax. pgAdmin The pgAdmin package is a free and open-source graphical user interface (GUI) administration tool for PostgreSQL, which is supported on many computer platforms. The program is available in more than a dozen languages. The first prototype, named pgManager, was written for PostgreSQL 6.3.2 from 1998, and rewritten and released as pgAdmin under the GNU General Public License (GPL) in later months. The second incarnation (named pgAdmin II) was a complete rewrite, first released on January 16, 2002. The third version, pgAdmin III, was originally released under the Artistic License and then released under the same license as PostgreSQL. Unlike prior versions that were written in Visual Basic, pgAdmin III is written in C++, using the wxWidgets framework allowing it to run on most common operating systems. The query tool includes a scripting language called pgScript for supporting admin and development tasks. In December 2014, Dave Page, the pgAdmin project founder and primary developer, announced that with the shift towards web-based models, work has begun on pgAdmin 4 with the aim to facilitate cloud deployments. In 2016, pgAdmin 4 was released. The pgAdmin 4 backend was written in Python, using Flask and the Qt framework. phpPgAdmin phpPgAdmin is a web-based administration tool for PostgreSQL written in PHP and based on the popular phpMyAdmin interface originally written for MySQL administration. PostgreSQL Studio PostgreSQL Studio allows users to perform essential PostgreSQL database development tasks from a web-based console. PostgreSQL Studio allows users to work with cloud databases without the need to open firewalls. TeamPostgreSQL AJAX/JavaScript-driven web interface for PostgreSQL. Allows browsing, maintaining and creating data and database objects via a web browser. The interface offers tabbed SQL editor with autocompletion, row editing widgets, click-through foreign key navigation between rows and tables, favorites management for commonly used scripts, among other features. Supports SSH for both the web interface and the database connections. Installers are available for Windows, Macintosh, and Linux, and a simple cross-platform archive that runs from a script. LibreOffice, OpenOffice.org LibreOffice and OpenOffice.org Base can be used as a front-end for PostgreSQL. pgBadger The pgBadger PostgreSQL log analyzer generates detailed reports from a PostgreSQL log file. pgDevOps pgDevOps is a suite of web tools to install & manage multiple PostgreSQL versions, extensions, and community components, develop SQL queries, monitor running databases and find performance problems. Adminer Adminer is a simple web-based administration tool for PostgreSQL and others, written in PHP. pgBackRest pgBackRest is a backup and restore tool for PostgreSQL that provides support for full, differential, and incremental backups. pgaudit pgaudit is a PostgreSQL extension that provides detailed session and/or object audit logging via the standard logging facility provided by PostgreSQL. wal-e Wal-e is a backup and restore tool for PostgreSQL that provides support for physical (WAL based) backups, written in Python A number of companies offer proprietary tools for PostgreSQL. They often consist of a universal core that is adapted for various specific database products. These tools mostly share the administration features with the open source tools but offer improvements in data modeling, importing, exporting or reporting. Notable organizations and products that use PostgreSQL as the primary database include: Microsoft, used for a petabyte-scale “Release Quality View” (RQV) analytics dashboard, which tracks quality of Windows updates analyzing 20K types of metrics from over 800M Windows devices. In 2009, the social-networking website Myspace used Aster Data Systems's nCluster database for data warehousing, which was built on unmodified PostgreSQL. Geni.com uses PostgreSQL for their main genealogy database. OpenStreetMap, a collaborative project to create a free editable map of the world. Afilias, domain registries for .org, .info and others. Sony Online multiplayer online games. BASF, shopping platform for their agribusiness portal. Reddit social news website. Skype VoIP application, central business databases. Sun xVM, Sun's virtualization and datacenter automation suite. MusicBrainz, open online music encyclopedia. The International Space Station – to collect telemetry data in orbit and replicate it to the ground. MyYearbook social-networking site. Instagram, a mobile photo-sharing service. Disqus, an online discussion and commenting service. TripAdvisor, travel-information website of mostly user-generated content. Yandex, a Russian internet company switched its Yandex.Mail service from Oracle to Postgres. Amazon Redshift, part of AWS, a columnar online analytical processing (OLAP) system based on ParAccel's Postgres modifications. National Oceanic and Atmospheric Administration's (NOAA) National Weather Service (NWS), Interactive Forecast Preparation System (IFPS), a system that integrates data from the NEXRAD weather radars, surface, and hydrology systems to build detailed localized forecast models. United Kingdom's national weather service, Met Office, has begun swapping Oracle for PostgreSQL in a strategy to deploy more open source technology. WhitePages.com had been using Oracle and MySQL, but when it came to moving its core directories in-house, it turned to PostgreSQL. Because WhitePages.com needs to combine large sets of data from multiple sources, PostgreSQL's ability to load and index data at high rates was a key to its decision to use PostgreSQL. FlightAware, a flight tracking website. Grofers, an online grocery delivery service. The Guardian migrated from MongoDB to PostgreSQL in 2018. YugabyteDB implements the PostgreSQL query layer as its default SQL mode OpenAI uses PostgreSQL as part of its primary API service. Some notable vendors offer PostgreSQL as software as a service: Heroku, a platform as a service provider, has supported PostgreSQL since the start in 2007. They offer value-add features like full database roll-back (ability to restore a database from any specified time), which is based on WAL-E, open-source software developed by Heroku. In January 2012, EnterpriseDB released a cloud version of both PostgreSQL and their own proprietary Postgres Plus Advanced Server with automated provisioning for failover, replication, load-balancing, and scaling. It runs on Amazon Web Services. Since 2015, Postgres Advanced Server has been offered as ApsaraDB for PPAS, a relational database as a service on Alibaba Cloud. VMware has offered vFabric Postgres (also termed vPostgres) for private clouds on VMware vSphere since May 2012. The company announced End of Availability (EOA) of the product in 2014. In November 2013, Amazon Web Services announced the addition of PostgreSQL to their Relational Database Service offering. In November 2016, Amazon Web Services announced the addition of PostgreSQL compatibility to their cloud-native Amazon Aurora managed database offering. In May 2017, Microsoft Azure announced Azure Databases for PostgreSQL. In May 2019, Alibaba Cloud announced PolarDB for PostgreSQL. Jelastic Multicloud Platform as a Service has provided container-based PostgreSQL support since 2011. It also offers automated asynchronous master-slave replication of PostgreSQL. In June 2019, IBM Cloud announced IBM Cloud Hyper Protect DBaaS for PostgreSQL. In September 2020, Crunchy Data announced Crunchy Bridge. In June 2022, Neon.tech announced Neon Serverless Postgres. Legend: Old version Older version, still maintained Latest version Latest preview version Future release Free and open-source software portal Comparison of relational database management systems Database scalability List of databases using MVCC LLVM (llvmjit is the JIT engine used by PostgreSQL) "PostgreSQL". Retrieved September 21, 2019. PostgreSQL: The World's Most Advanced Open Source Relational Database "Contributor Profiles". PostgreSQL Global Development Group. Retrieved March 14, 2017. "Happy Birthday, PostgreSQL!". PostgreSQL Global Development Group. July 8, 2008. "PostgreSQL 16.2, 15.6, 14.11, 13.14, and 12.18 Released!". February 8, 2024. "License". PostgreSQL Global Development Group. Retrieved September 20, 2010. "PostgreSQL licence approved by OSI". Crynwr. February 18, 2010. Archived from the original on August 8, 2016. Retrieved February 18, 2010. "OSI PostgreSQL Licence". Open Source Initiative. February 20, 2010. Retrieved February 20, 2010. "Debian -- Details of package postgresql in sid". packages.debian.org. Retrieved January 25, 2021. "Licensing:Main". FedoraProject. "PostgreSQL". fsf.org. "FAQ: What is PostgreSQL? How is it pronounced? What is Postgres?". PostgreSQL Wiki. PostgreSQL community. Retrieved October 2, 2021. "Audio sample, 5.6k MP3". "What is PostgreSQL?". PostgreSQL 9.3.0 Documentation. PostgreSQL Global Development Group. Retrieved September 20, 2013. "PostGIS". postgis.net. December 18, 2023. Retrieved December 18, 2023. PostGIS extends the capabilities of the PostgreSQL relational database by adding support for storing, indexing, and querying geospatial data. "Temporal Extensions". PostgreSQL Wiki. December 18, 2023. Retrieved December 18, 2023. Postgres can be extended to become a Temporal Database. Such databases track the history of database content over time, automatically retaining said history and allowing it to be altered and queried. "Orafce - Oracle's compatibility functions and packages". github.com. December 17, 2023. Retrieved December 18, 2023. Functions and operators that emulate a subset of functions and packages from the Oracle RDBMS. "pg_dbms_job". github.com. November 8, 2023. Retrieved December 18, 2023. PostgreSQL extension to schedules and manages jobs in a job queue similar to Oracle DBMS_JOB package. "WiltonDB". WiltonDB. 2023. Retrieved December 18, 2023. WiltonDB [is] packaged for Windows. It strives to be useable as a drop-in replacement to Microsoft SQL Server. "Babelfish for PostgreSQL". babelfishpg.org. Retrieved December 18, 2023. Babelfish for PostgreSQL ... provides the capability for PostgreSQL to understand queries from applications written for Microsoft SQL Server. "PostgreSQL Clients". wiki.postgresql.org. October 18, 2023. Retrieved December 18, 2023. This page is a partial list of interactive SQL clients (GUI or otherwise) ... that you can type SQL in to and get results from them. "Design Tools". wiki.postgresql.org. October 23, 2023. Retrieved December 18, 2023. Tools to help with designing a schema, via creating Entity-Relationship diagrams and similar. Most are GUI. "Community Guide to PostgreSQL GUI Tools". wiki.postgresql.org. December 1, 2023. Retrieved December 18, 2023. This page is a list of miscellaneous utilities that work with Postgres (ex: data loaders, comparators etc.). "Replication, Clustering, and Connection Pooling". wiki.postgresql.org. July 13, 2020. Retrieved December 18, 2023. There are many approaches available to scale PostgreSQL beyond running on a single server. ... There is no one-size fits all... This is recognized by the liberal permission to use the PostgreSQL name, as approved (for fair use, when not confusing people about a legal relationship with the actual PostgreSQL project) when used in support of PostgreSQL, subject to the PostgreSQL Trademark Policy: "Trademark Policy". PostgreSQL.org. December 8, 2020. Retrieved December 17, 2023. We will try to work with you to permit uses [of the PostgreSQL® name] that support the PostgreSQL® project and our Community. Stonebraker, M.; Rowe, L. A. (May 1986). The design of POSTGRES (PDF). Proc. 1986 ACM SIGMOD Conference on Management of Data. Washington, DC. Retrieved December 17, 2011. "PostgreSQL: History". PostgreSQL Global Development Group. Archived from the original on March 26, 2017. Retrieved August 27, 2016. "Project name – statement from the core team". archives.postgresql.org. November 16, 2007. Retrieved November 16, 2007. "Michael Stonebraker – A.M. Turing Award Winner". amturing.acm.org. Retrieved March 20, 2018. Techniques pioneered in Postgres were widely implemented [..] Stonebraker is the only Turing award winner to have engaged in serial entrepreneurship on anything like this scale, giving him a distinctive perspective on the academic world. Stonebraker, M.; Rowe, L. A. The POSTGRES data model (PDF). Proceedings of the 13th International Conference on Very Large Data Bases. Brighton, England: Morgan Kaufmann Publishers. pp. 83–96. ISBN 0-934613-46-X. Pavel Stehule (June 9, 2012). "Historie projektu PostgreSQL" (in Czech). A Brief History of PostgreSQL "Version 3 appeared in 1991 and added support for multiple storage managers, an improved query executor, and a rewritten rule system.". postgresql.org. The PostgreSQL Global Development Group, Retrieved on March 18, 2020. "University POSTGRES, Version 4.2". July 26, 1999. Page, Dave (April 7, 2015). "Re: 20th anniversary of PostgreSQL ?". pgsql-advocacy (Mailing list). Retrieved April 9, 2015. Dan R. K. Ports; Kevin Grittner (2012). "Serializable Snapshot Isolation in PostgreSQL" (PDF). Proceedings of the VLDB Endowment. 5 (12): 1850–1861. arXiv:1208.4179. Bibcode:2012arXiv1208.4179P. doi:10.14778/2367502.2367523. S2CID 16006111. Bohan Zhang; Andy Pavlo (2023). "The part of PostgreSQL we hate the most". OtterTune (blog). PostgreSQL 9.1 with synchronous replication (news), H Online "Postgres-XC project page" (website). Postgres-XC. Archived from the original on July 1, 2012. "Postgres-R: a database replication system for PostgreSQL". Postgres Global Development Group. Archived from the original on March 29, 2010. Retrieved August 27, 2016. "Postgres-BDR". 2ndQuadrant Ltd. Retrieved August 27, 2016. Marit Fischer (November 10, 2007). "Backcountry.com finally gives something back to the open source community" (Press release). Backcountry.com. Archived from the original on December 26, 2010. Bartunov, O; Sigaev, T (May 2011). SP-GiST – a new indexing framework for PostgreSQL (PDF). PGCon 2011. Ottawa, Canada. Retrieved January 31, 2016. Bartunov, O; Sigaev, T (May 2010). K-nearest neighbour search for PostgreSQL (PDF). PGCon 2010. Ottawa, Canada. Retrieved January 31, 2016. "PostgreSQL, the NoSQL Database | Linux Journal". www.linuxjournal.com. Geoghegan, Peter (March 23, 2014). "What I think of jsonb". Obe, Regina; Hsu, Leo S. (2012). "10: Replication and External Data". PostgreSQL: Up and Running (1 ed.). Sebastopol, CA: O'Reilly Media, Inc. p. 129. ISBN 978-1-4493-2633-3. Retrieved October 17, 2016. Foreign Data Wrappers (FDW) [...] are mechanisms of querying external datasources. PostgreSQL 9.1 introduced this SQL/MED standards compliant feature. "Frontend/Backend Protocol". postgresql.org. November 9, 2023. Retrieved December 17, 2023. This document describes version 3.0 of the protocol, implemented in PostgreSQL 7.4 and later. "libpq". postgresql.org. November 9, 2023. Retrieved December 17, 2023. "Embedded SQL in C". postgresql.org. November 9, 2023. Retrieved December 17, 2023. "Client Interfaces". postgresql.org. November 9, 2023. Retrieved December 17, 2023. "libpqxx". Retrieved April 4, 2020. "PostgreSQL JDBC Driver". Retrieved April 4, 2020. "[ANN] PostgresORM.jl: Object Relational Mapping for PostgreSQL". JuliaLang. June 30, 2021. Retrieved August 26, 2021. "GitHub - invenia/LibPQ.jl: A Julia wrapper for libpq". GitHub. Retrieved August 26, 2021. "PL/Julia extension ( minimal )". JuliaLang. March 8, 2020. Retrieved August 26, 2021. "PostgreSQL + Python | Psycopg". initd.org. "node-postgres". Retrieved April 4, 2020. "SQL database drivers". Go wiki. golang.org. Retrieved June 22, 2015. "Rust-Postgres". Retrieved April 4, 2020. "Server Programming". PostgreSQL documentation. Retrieved May 19, 2019. "DO". PostgreSQL documentation. Retrieved May 19, 2019. "PL/Python - Python Procedural Language". PostgreSQL documentation. Retrieved October 23, 2022. "Procedural Languages". postgresql.org. March 31, 2016. Retrieved April 7, 2016. "postgres-plr/plr". June 17, 2021 – via GitHub. Chartier, Colin (November 8, 2019). "System design hack: Postgres is a great pub/sub & job server". LayerCI blog. Retrieved November 24, 2019. "Release 9.5". postgresql.org. February 11, 2021. Ringer, Craig (April 13, 2016). "What is SKIP LOCKED for in PostgreSQL 9.5?". 2nd Quadrant. Retrieved November 24, 2019. "Add a materialized view relations". March 4, 2013. Retrieved March 4, 2013. "Support automatically-updatable views". December 8, 2012. Retrieved December 8, 2012. "Add CREATE RECURSIVE VIEW syntax". February 1, 2013. Retrieved February 28, 2013. Momjian, Bruce (2001). "Subqueries". PostgreSQL: Introduction and Concepts. Addison-Wesley. ISBN 0-201-70331-9. Archived from the original on August 9, 2010. Retrieved September 25, 2010. Bernier, Robert (February 2, 2006). "Using Regular Expressions in PostgreSQL". O'Reilly Media. Retrieved September 25, 2010. "A few short notes about PostgreSQL and POODLE". hagander.net. Berkus, Josh (June 2, 2016). "PostgreSQL 9.6 Beta and PGCon 2016". LWN.net. "FAQ – PostgreSQL wiki". wiki.postgresql.org. Retrieved April 13, 2017. "SEPostgreSQL Documentation – PostgreSQL wiki". wiki.postgresql.org. "NB SQL 9.3 - SELinux Wiki". selinuxproject.org. "PostgreSQL 10 Documentation: Appendix E. Release Notes". August 12, 2021. "PostgreSQL: About". www.postgresql.org. Retrieved August 26, 2021. "Case sensitivity of identifiers". PostgreSQL Global Development Group. November 11, 2021. Berkus, Josh (July 6, 2007). "PostgreSQL publishes first real benchmark". Archived from the original on July 12, 2007. Retrieved July 10, 2007. Vilmos, György (September 29, 2009). "PostgreSQL history". Retrieved August 28, 2010. "SPECjAppServer2004 Result". SPEC. July 6, 2007. Retrieved July 10, 2007. "SPECjAppServer2004 Result". SPEC. July 4, 2007. Retrieved September 1, 2007. "Managing Kernel Resources". PostgreSQL Manual. PostgreSQL.org. Retrieved November 12, 2011. Greg Smith (October 15, 2010). PostgreSQL 9.0 High Performance. Packt Publishing. ISBN 978-1-84951-030-1. Robert Haas (April 3, 2012). "Did I Say 32 Cores? How about 64?". Retrieved April 8, 2012. Khushi, Matloob (June 2015). "Benchmarking database performance for genomic data". J Cell Biochem. 116 (6): 877–83. arXiv:2008.06835. doi:10.1002/jcb.25049. PMID 25560631. S2CID 27458866. "Mac OS X packages". The PostgreSQL Global Development Group. Retrieved August 27, 2016. "PostgreSQL: Windows installers". www.postgresql.org. Retrieved August 26, 2021. "postgresql-client-10.5p1 – PostgreSQL RDBMS (client)". OpenBSD ports. October 4, 2018. Retrieved October 10, 2018. "Installing and Configuring PostgreSQL - Oracle Solaris Cluster Data Service for PostgreSQL Guide". docs.oracle.com. Retrieved February 4, 2023. "HP-UX Porting and Archive Centre | postgresql-12.4". hpux.connect.org.uk. Retrieved February 4, 2023. "AArch64 planning BoF at DebConf". debian.org. Souza, Rubens (June 17, 2015). "Step 5 (update): Installing PostgreSQL on my Raspberry Pi 1 and 2". Raspberry PG. Retrieved August 27, 2016. "Supported Platforms". PostgreSQL Global Development Group. Retrieved April 6, 2012. "pgAdmin: PostgreSQL administration and management tools". website. Retrieved November 12, 2011. "Debian -- Details of package pgadmin3 in jessie". Retrieved March 10, 2017. "pgAdmin Development Team". pgadmin.org. Retrieved June 22, 2015. Dave, Page (December 7, 2014). "The story of pgAdmin". Dave's Postgres Blog. pgsnake.blogspot.co.uk. Retrieved December 7, 2014. "pgAdmin 4 README". GitHub. Retrieved August 15, 2018. phpPgAdmin Project (April 25, 2008). "About phpPgAdmin". Retrieved April 25, 2008. PostgreSQL Studio (October 9, 2013). "About PostgreSQL Studio". Archived from the original on October 7, 2013. Retrieved October 9, 2013. "TeamPostgreSQL website". October 3, 2013. Retrieved October 3, 2013. oooforum.org (January 10, 2010). "Back Ends for OpenOffice". Archived from the original on September 28, 2011. Retrieved January 5, 2011. libreoffice.org (October 14, 2012). "Base features". Archived from the original on January 7, 2012. Retrieved October 14, 2012. Greg Smith; Robert Treat & Christopher Browne. "Tuning your PostgreSQL server". Wiki. PostgreSQL.org. Retrieved November 12, 2011. "pgDevOps". BigSQL.org. Archived from the original on April 1, 2017. Retrieved May 4, 2017. "pgbackrest/pgbackrest". GitHub. November 21, 2021. "pgaudit/pgaudit". GitHub. November 21, 2021. "wal-e/wal-e". June 24, 2021 – via GitHub. Claire Giordano (October 31, 2019). "Architecting petabyte-scale analytics by scaling out Postgres on Azure with the Citus extension". Blog. Microsoft Tech Community. Emmanuel Cecchet (May 21, 2009). Building PetaByte Warehouses with Unmodified PostgreSQL (PDF). PGCon 2009. Retrieved November 12, 2011. "MySpace.com scales analytics for all their friends" (PDF). case study. Aster Data. June 15, 2010. Archived (PDF) from the original on November 14, 2010. Retrieved November 12, 2011. "Last Weekend's Outage". Blog. Geni. August 1, 2011. "Database". Wiki. OpenStreetMap. PostgreSQL affiliates .ORG domain, Australia: Computer World, August 24, 2023 W. Jason Gilmore; R.H. Treat (2006). Beginning PHP and PostgreSQL 8: From Novice to Professional. Apress. ISBN 978-1-43020-136-6. Retrieved August 30, 2017. Sony Online opts for open-source database over Oracle, Computer World "A Web Commerce Group Case Study on PostgreSQL" (PDF) (1.2 ed.). PostgreSQL. "Architecture Overview". Reddit software wiki. Reddit. March 27, 2014. Retrieved November 25, 2014. Pihlak, Martin. "PostgreSQL @Skype" (PDF). wiki.postgresql.org. Retrieved January 16, 2019. "How Much Are You Paying For Your Database?". Sun Microsystems blog. 2007. Archived from the original on March 7, 2009. Retrieved December 14, 2007. "Database – MusicBrainz". MusicBrainz Wiki. Retrieved February 5, 2011. Duncavage, Daniel P (July 13, 2010). "NASA needs Postgres-Nagios help". Roy, Gavin M (2010). "PostgreSQL at myYearbook.com" (talk). USA East: PostgreSQL Conference. Archived from the original on July 27, 2011. "Keeping Instagram up with over a million new users in twelve hours". Instagram-engineering.tumblr.com. May 17, 2011. Retrieved July 7, 2012. "Postgres at Disqus". Retrieved May 24, 2013. Kelly, Matthew (March 27, 2015). At the Heart of a Giant: Postgres at TripAdvisor. PGConf US 2015. Archived from the original on July 23, 2015. Retrieved July 23, 2015. (Presentation video) "Yandex.Mail's successful migration from Oracle to Postgres [pdf]". Hacker News: news.ycombinator.com. Retrieved September 28, 2016. S. Riggs; G. Ciolli; H. Krosing; G. Bartolini (2015). PostgreSQL 9 Administration Cookbook - Second Edition. Packt. ISBN 978-1-84951-906-9. Retrieved September 5, 2017. "Met Office swaps Oracle for PostgreSQL". computerweekly.com. June 17, 2014. Retrieved September 5, 2017. "Open Source Software". FlightAware. Retrieved November 22, 2017. "Ansible at Grofers (Part 2) — Managing PostgreSQL". Lambda - The Grofers Engineering Blog. February 28, 2017. Retrieved September 5, 2018. McMahon, Philip; Chiorean, Maria-Livia; Coleman, Susie; Askoolum, Akash (November 30, 2018). "Digital Blog: Bye bye Mongo, Hello Postgres". The Guardian. ISSN 0261-3077. "Elevated Errors on API and ChatGPT". Retrieved December 2, 2023. Alex Williams (April 1, 2013). "Heroku Forces Customer Upgrade To Fix Critical PostgreSQL Security Hole". TechCrunch. Barb Darrow (November 11, 2013). "Heroku gussies up Postgres with database roll-back and proactive alerts". GigaOM. Craig Kerstiens (September 26, 2013). "WAL-E and Continuous Protection with Heroku Postgres". Heroku blog. "EnterpriseDB Offers Up Postgres Plus Cloud Database". Techweekeurope.co.uk. January 27, 2012. Retrieved July 7, 2012. "Alibaba Cloud Expands Technical Partnership with EnterpriseDB". Milestone Partners. September 26, 2018. Retrieved June 9, 2020. O'Doherty, Paul; Asselin, Stephane (2014). "3: VMware Workspace Architecture". VMware Horizon Suite: Building End-User Services. VMware Press Technology. Upper Saddle River, NJ: VMware Press. p. 65. ISBN 978-0-13-347910-2. Retrieved September 19, 2016. In addition to the open source version of PostgreSQL, VMware offers vFabric Postgres, or vPostgres. vPostgres is a PostgreSQL virtual appliance that has been tuned for virtual environments. Al Sargent (May 15, 2012). "Introducing VMware vFabric Suite 5.1: Automated Deployment, New Components, and Open Source Support". VMware blogs. "VMware vFabric Suite EOA" (PDF). September 1, 2014. Retrieved December 17, 2023. Jeff (November 14, 2013). "Amazon RDS for PostgreSQL – Now Available". Amazon Web Services Blog. Alex Williams (November 14, 2013). "PostgreSQL Now Available On Amazon's Relational Database Service". TechCrunch. "Amazon Aurora Update – PostgreSQL Compatibility". AWS Blog. November 30, 2016. Retrieved December 1, 2016. "Announcing Azure Database for PostgreSQL". Azure Blog. May 10, 2017. Retrieved June 19, 2019. "Aliyun PolarDB released major updates to support one-click migration of databases such as Oracle to the cloud". Develop Paper. July 6, 2019. "Asynchronous Master-Slave Replication of PostgreSQL Databases in One Click". DZone. Retrieved May 26, 2017. "IBM Cloud Hyper Protect DBaaS for PostgreSQL documentation". cloud.ibm.com. Retrieved June 24, 2020. "Crunchy Data Continues PostgreSQL Support with the Release of Crunchy Bridge". September 18, 2020. "SELECT 'Hello, World' Serverless Postgres built for the cloud". June 15, 2022. "Versioning policy". PostgreSQL Global Development Group. Retrieved October 4, 2018. Vaas, Lisa (December 2, 2002). "Databases Target Enterprises". eWeek. Retrieved October 29, 2016. Krill, Paul (November 20, 2003). "PostgreSQL boosts open source database". InfoWorld. Retrieved October 21, 2016. Krill, Paul (January 19, 2005). "PostgreSQL open source database boasts Windows boost". InfoWorld. Retrieved November 2, 2016. Weiss, Todd R. (December 5, 2006). "Version 8.2 of open-source PostgreSQL DB released". Computerworld. Retrieved October 17, 2016. Gilbertson, Scott (February 5, 2008). "PostgreSQL 8.3: Open Source Database Promises Blazing Speed". Wired. Retrieved October 17, 2016. Huber, Mathias (July 2, 2009). "PostgreSQL 8.4 Proves Feature-Rich". Linux Magazine. Retrieved October 17, 2016. Brockmeier, Joe (September 30, 2010). "Five Enterprise Features in PostgreSQL 9". Linux.com. Linux Foundation. Retrieved February 6, 2017. Timothy Prickett Morgan (September 12, 2011). "PostgreSQL revs to 9.1, aims for enterprise". The Register. Retrieved February 6, 2017. "PostgreSQL: PostgreSQL 9.2 released". www.postgresql.org. September 10, 2012. "Reintroducing Hstore for PostgreSQL". InfoQ. Richard, Chirgwin (January 7, 2016). "Say oops, UPSERT your head: PostgreSQL version 9.5 has landed". The Register. Retrieved October 17, 2016. "PostgreSQL: Documentation: 10: Chapter 31. Logical Replication". www.postgresql.org. August 12, 2021. "PostgreSQL 11 Released". October 18, 2018. Retrieved October 18, 2018. "PostgreSQLRelease Notes". Retrieved October 18, 2018. "PostgreSQL: PostgreSQL 12 Released!". Postgresql News. October 3, 2019. "PostgreSQL 13 Release Notes". www.postgresql.org. August 12, 2021. "PostgreSQL 13 Released!". www.postgresql.org. September 24, 2020. "PostgreSQL 14 Release Notes". www.postgresql.org. November 11, 2021. "PostgreSQL 14 Released!". www.postgresql.org. September 30, 2021. "PostgreSQL 16 Released!". September 14, 2023. "PostgreSQL: Roadmap". www.postgresql.org. Retrieved February 15, 2024. Obe, Regina; Hsu, Leo (July 8, 2012). PostgreSQL: Up and Running. O'Reilly. ISBN 978-1-4493-2633-3. Krosing, Hannu; Roybal, Kirk (June 15, 2013). PostgreSQL Server Programming (second ed.). Packt Publishing. ISBN 978-1-84951-698-3. Riggs, Simon; Krosing, Hannu (October 27, 2010). PostgreSQL 9 Administration Cookbook (second ed.). Packt Publishing. ISBN 978-1-84951-028-8. Smith, Greg (October 15, 2010). PostgreSQL 9 High Performance. Packt Publishing. ISBN 978-1-84951-030-1. Gilmore, W. Jason; Treat, Robert (February 27, 2006). Beginning PHP and PostgreSQL 8: From Novice to Professional. Apress. p. 896. ISBN 1-59059-547-5. Archived from the original on July 8, 2009. Retrieved April 28, 2009. Douglas, Korry (August 5, 2005). PostgreSQL (second ed.). Sams. p. 1032. ISBN 0-672-32756-2. Matthew, Neil; Stones, Richard (April 6, 2005). Beginning Databases with PostgreSQL (second ed.). Apress. p. 664. ISBN 1-59059-478-9. Archived from the original on April 9, 2009. Retrieved April 28, 2009. Worsley, John C.; Drake, Joshua D. (January 2002). Practical PostgreSQL. O'Reilly Media. pp. 636. ISBN 1-56592-846-6. Wikimedia Commons has media related to PostgreSQL. Wikibooks has a book on the topic of: PostgreSQL Official website , and wiki A Software Catalog of related projects and products The official Main Source Code Repository (for browsing), and the Developer FAQ The official Reference for PostgreSQL Documentation Authors All official PostgreSQL Source Code Repositories PostgreSQL at Curlie PostgreSQL on GitHub
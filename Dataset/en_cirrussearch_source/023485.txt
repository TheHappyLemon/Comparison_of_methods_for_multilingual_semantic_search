OpenSSL is a software library for applications that provide secure communications over computer networks against eavesdropping, and identify the party at the other end. It is widely used by Internet servers, including the majority of HTTPS websites. OpenSSL contains an open-source implementation of the SSL and TLS protocols. The core library, written in the C programming language, implements basic cryptographic functions and provides various utility functions. Wrappers allowing the use of the OpenSSL library in a variety of computer languages are available. The OpenSSL Software Foundation (OSF) represents the OpenSSL project in most legal capacities including contributor license agreements, managing donations, and so on. OpenSSL Software Services (OSS) also represents the OpenSSL project for support contracts. OpenSSL is available for most Unix-like operating systems (including Linux, macOS, and BSD), Microsoft Windows and OpenVMS. The OpenSSL project was founded in 1998 to provide a free set of encryption tools for the code used on the Internet. It is based on a fork of SSLeay by Eric Andrew Young and Tim Hudson, which unofficially ended development on December 17, 1998, when Young and Hudson both went to work for RSA Security. The initial founding members were Mark Cox, Ralf Engelschall, Stephen Henson, Ben Laurie, and Paul Sutton. In 2018 OpenSSL version numbering skipped from 1.1.1 to 3.0.0, omitting 2 as a major version number to avoid a conflict with one of OpenSSL's modules. Version 3.0.0 was the first to use the Apache License. As of May 2019[update], the OpenSSL management committee consisted of seven people and there are seventeen developers with commit access (many of whom are also part of the OpenSSL management committee). There are only two full-time employees (fellows) and the remainder are volunteers. The project has a budget of less than $1 million USD per year and relies primarily on donations. Development of TLS 1.3 was sponsored by Akamai. OpenSSL supports a number of different cryptographic algorithms: Ciphers AES, Blowfish, Camellia, Chacha20, Poly1305, SEED, CAST-128, DES, IDEA, RC2, RC4, RC5, Triple DES, GOST 28147-89, SM4 Cryptographic hash functions MD5, MD4, MD2, SHA-1, SHA-2, SHA-3, RIPEMD-160, MDC-2, GOST R 34.11-94, BLAKE2, Whirlpool, SM3 Public-key cryptography RSA, DSA, Diffie–Hellman key exchange, Elliptic curve, X25519, Ed25519, X448, Ed448, GOST R 34.10-2001, SM2 (Perfect forward secrecy is supported using elliptic curve Diffie–Hellman since version 1.0.) FIPS 140 is a U.S. Federal program for the testing and certification of cryptographic modules. An early FIPS 140-1 certificate for OpenSSL's FOM 1.0 was revoked in July 2006 "when questions were raised about the validated module's interaction with outside software." The module was re-certified in February 2007 before giving way to FIPS 140-2. OpenSSL 1.0.2 supported the use of the OpenSSL FIPS Object Module (FOM), which was built to deliver FIPS approved algorithms in a FIPS 140-2 validated environment. OpenSSL controversially decided to categorize the 1.0.2 architecture as 'end of life' or 'EOL', effective December 31, 2019, despite objections that it was the only version of OpenSSL that was currently available with support for FIPS mode. As a result of the EOL, many users were unable to properly deploy the FOM 2.0 and fell out of compliance because they did not secure extended support for the 1.0.2 architecture, although the FOM itself remained validated for eight months further. The FIPS Object Module 2.0 remained FIPS 140-2 validated in several formats until September 1, 2020, when NIST deprecated the usage of FIPS 186-2 for Digital Signature Standard and designated all non-compliant modules as 'Historical'. This designation includes a caution to federal agencies that they should not include the module in any new procurements. All three of the OpenSSL validations were included in the deprecation – the OpenSSL FIPS Object Module (certificate #1747), OpenSSL FIPS Object Module SE (certificate #2398), and OpenSSL FIPS Object Module RE (certificate #2473). Many 'private label' OpenSSL-based validations and clones created by consultants were also moved to the Historical List, although some FIPS validated modules with replacement compatibility avoided the deprecation, such as BoringCrypto from Google and CryptoComply from SafeLogic. The OpenSSL Management Committee announced a change in the versioning scheme. Due to this change, the major number of the next major version would have been doubled, since the OpenSSL FIPS module already occupied this number. Therefore the decision was made to skip the OpenSSL 2.0 version number and continue with OpenSSL 3.0 . OpenSSL 3.0 restored FIPS mode and underwent FIPS 140-2 testing, but with significant delays: The effort was first kicked off in 2016 with support from SafeLogic and further support from Oracle in 2017, but the process has been challenging. On October 20, 2020, the OpenSSL FIPS Provider 3.0 was added to the CMVP Implementation Under Test List, which reflected an official engagement with a testing lab to proceed with a FIPS 140-2 validation. This resulted in a slew of certifications in the following months. OpenSSL was dual-licensed under the OpenSSL License and the SSLeay License, which means that the terms of either licenses can be used. The OpenSSL License is Apache License 1.0 and SSLeay License bears some similarity to a 4-clause BSD License. As the OpenSSL License was Apache License 1.0, but not Apache License 2.0, it requires the phrase "this product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit" to appear in advertising material and any redistributions (Sections 3 and 6 of the OpenSSL License). Due to this restriction, the OpenSSL License and the Apache License 1.0 are incompatible with the GNU GPL. Some GPL developers have added an OpenSSL exception to their licenses that specifically permits using OpenSSL with their system. GNU Wget and climm both use such exceptions. Some packages (like Deluge) explicitly modify the GPL license by adding an extra section at the beginning of the license documenting the exception. Other packages use the LGPL-licensed GnuTLS, BSD-licensed Botan, or MPL-licensed NSS, which perform the same task. OpenSSL announced in August 2015 that it would require most contributors to sign a Contributor License Agreement (CLA), and that OpenSSL would eventually be relicensed under the terms of Apache License 2.0. This process commenced in March 2017, and was complete in 2018. On 7 September 2021, OpenSSL 3.0.0 was released under the Apache License 2.0. OpenSSL 0.9.6k has a bug where certain ASN.1 sequences triggered a large number of recursions on Windows machines, discovered on November 4, 2003. Windows could not handle large recursions correctly, so OpenSSL would crash as a result. Being able to send arbitrary large numbers of ASN.1 sequences would cause OpenSSL to crash as a result. When creating a handshake, the client could send an incorrectly formatted ClientHello message, leading to OpenSSL parsing more than the end of the message. Assigned the identifier CVE-2011-0014 by the CVE project, this affected all OpenSSL versions 0.9.8h to 0.9.8q and OpenSSL 1.0.0 to 1.0.0c. Since the parsing could lead to a read on an incorrect memory address, it was possible for the attacker to cause a DoS. It was also possible that some applications expose the contents of parsed OCSP extensions, leading to an attacker being able to read the contents of memory that came after the ClientHello. When using Basic Input/Output (BIO) or FILE based functions to read untrusted DER format data, OpenSSL is vulnerable. This vulnerability was discovered on April 19, 2012, and was assigned the CVE identifier CVE-2012-2110. While not directly affecting the SSL/TLS code of OpenSSL, any application that was using ASN.1 functions (particularly d2i_X509 and d2i_PKCS12) were also not affected. In handling CBC cipher-suites in SSL, TLS, and DTLS, OpenSSL was found vulnerable to a timing attack during the MAC processing. Nadhem Alfardan and Kenny Paterson discovered the problem, and published their findings on February 5, 2013. The vulnerability was assigned the CVE identifier CVE-2013-0169. OpenSSL's pseudo-random number generator acquires entropy using complex programming methods. To keep the Valgrind analysis tool from issuing associated warnings, a maintainer of the Debian distribution applied a patch to Debian's variant of the OpenSSL suite, which inadvertently broke its random number generator by limiting the overall number of private keys it could generate to 32,768. The broken version was included in the Debian release of September 17, 2006 (version 0.9.8c-1), also compromising other Debian-based distributions, for example Ubuntu. Ready-to-use exploits are easily available. The error was reported by Debian on May 13, 2008. On the Debian 4.0 distribution (etch), these problems were fixed in version 0.9.8c-4etch3, while fixes for the Debian 5.0 distribution (lenny) were provided in version 0.9.8g-9. OpenSSL versions 1.0.1 through 1.0.1f have a severe memory handling bug in their implementation of the TLS Heartbeat Extension that could be used to reveal up to 64 KB of the application's memory with every heartbeat (CVE-2014-0160). By reading the memory of the web server, attackers could access sensitive data, including the server's private key. This could allow attackers to decode earlier eavesdropped communications if the encryption protocol used does not ensure perfect forward secrecy. Knowledge of the private key could also allow an attacker to mount a man-in-the-middle attack against any future communications.[citation needed] The vulnerability might also reveal unencrypted parts of other users' sensitive requests and responses, including session cookies and passwords, which might allow attackers to hijack the identity of another user of the service. At its disclosure on April 7, 2014, around 17% or half a million of the Internet's secure web servers certified by trusted authorities were believed to have been vulnerable to the attack. However, Heartbleed can affect both the server and client. The CCS Injection Vulnerability (CVE-2014-0224) is a security bypass vulnerability that results from a weakness in OpenSSL methods used for keying material. This vulnerability can be exploited through the use of a man-in-the-middle attack, where an attacker may be able to decrypt and modify traffic in transit. A remote unauthenticated attacker could exploit this vulnerability by using a specially crafted handshake to force the use of weak keying material. Successful exploitation could lead to a security bypass condition where an attacker could gain access to potentially sensitive information. The attack can only be performed between a vulnerable client and server. OpenSSL clients are vulnerable in all versions of OpenSSL before the versions 0.9.8za, 1.0.0m and 1.0.1h. Servers are only known to be vulnerable in OpenSSL 1.0.1 and 1.0.2-beta1. Users of OpenSSL servers earlier than 1.0.1 are advised to upgrade as a precaution. This vulnerability (CVE-2015-0291) allows anyone to take a certificate, read its contents and modify it accurately to abuse the vulnerability causing a certificate to crash a client or server. If a client connects to an OpenSSL 1.0.2 server and renegotiates with an invalid signature algorithms extension, a null-pointer dereference occurs. This can cause a DoS attack against the server. A Stanford Security researcher, David Ramos, had a private exploit and presented it to the OpenSSL team, which then patched the issue. OpenSSL classified the bug as a high-severity issue, noting version 1.0.2 was found vulnerable. This vulnerability (CVE-2016-0701) allows, when some particular circumstances are met, to recover the OpenSSL server's private Diffie–Hellman key. An Adobe System Security researcher, Antonio Sanso, privately reported the vulnerability. OpenSSL classified the bug as a high-severity issue, noting only version 1.0.2 was found vulnerable. In 2009, after frustrations with the original OpenSSL API, Marco Peereboom, an OpenBSD developer at the time, forked the original API by creating Agglomerated SSL (assl), which reuses OpenSSL API under the hood, but provides a much simpler external interface. It has since been deprecated in light of the LibreSSL fork circa 2016. In April 2014 in the wake of Heartbleed, members of the OpenBSD project forked OpenSSL starting with the 1.0.1g branch, to create a project named LibreSSL. In the first week of pruning the OpenSSL's codebase, more than 90,000 lines of C code had been removed from the fork. In June 2014, Google announced its own fork of OpenSSL dubbed BoringSSL. Google plans to co-operate with OpenSSL and LibreSSL developers. Google has since developed a new library, Tink, based on BoringSSL. Among developers communities, OpenSSL is often cited for introducing API compatibility breakage with each new major version, which requires software adaptations that tend to delay new version adoptions. This, combined with the fact that previous releases are generally maintained for no more than two years after a new major one is released tends to force some vendors to anticipate software migrations very early while still having little time left to update to a new release, sometimes at the risk of losing some compatibility with existing software or risking regressions. While LTS (long term supported) releases are maintained for 5 years, accumulated delays in release time frames tend to force operating system vendors to stay on the last supported release longer, leaving less margin when the new version is available. For example OpenSSL 3.0 was initially expected for Q4 2019 and was finally issued 21 months later without extending the expected end of support for previously supported version 1.1.1, and this despite the significant changes that required adaptations to existing software. The reduced support delay of version 1.1.1 mentioned above causes further concerns to users whose workloads are sensitive to performance. Some time after general availability of 3.0, some users started to report serious performance regressions affecting this version in multi-threaded environments, many citing the inefficient use of locks in frequent low-level operations, citing slowdowns from 80 to 400 times. The OpenSSL team has created a meta-issue to try to centralize reports of such massive performance regressions. About half of these reporters indicate the impossibility for them to upgrade to 3.0 from earlier versions, adding to the trouble caused by the limited support time left on previous version 1.1.1. While the QUIC transport layer was being worked on to support the third version of the HTTP protocol, it was proposed to use TLS to provide security, and identified that some adaptations to TLS libraries would be needed. Such modifications were brought to BoringSSL which was the library being primarily used by QUIC developers by then, and later ported to other libraries. A port of this work was quickly proposed to OpenSSL. While some discussion started the same day, it quickly stalled and was first blocked on license considerations, then kept on hold once these concerns were cleared. Finally 10 months later the OpenSSL Management Committee announced on a blog post that this patch set would not be adopted for 3.0 on the fear that the API would change over time. Finally more than one year after planned release of 3.0 which was still not coming, a team of volunteers from Akamai and Microsoft decided to fork the project as QuicTLS and support these patches on top of the OpenSSL code in order to unblock QUIC development. This action was generally welcome by the community. Finally after OpenSSL 3.0 was finally released, the QUIC patch set was reconsidered and decided against, causing tens to hundreds of reactions of disappointment among the community. The pull request was closed, while users felt the need to publicly express their disappointment, or beg operating system vendors to support the alternative QuicTLS fork, or seek for alternative solutions. Finally Rich Salz, co-founder of the QuicTLS fork, announced his interest in seeing an Apache project forked from QuicTLS. As of 25 February 2023 there is still no QUIC-compatible long-term supported TLS library available by default in operating systems without requiring end-users to rebuild it themselves from sources. Free and open-source software portal Comparison of TLS implementations Comparison of cryptography libraries List of free and open-source software packages POSSE project LibreSSL wolfSSL The major version 2.0.0 was skipped due to its previous use in the OpenSSL FIPS module. "Release OpenSSL 3.2.1". "/source/license.html". www.openssl.org. Retrieved March 3, 2021. "OpenSSL License | Software Package Data Exchange (SPDX)". spdx.org. Laurie, Ben (January 6, 1999). "ANNOUNCE: OpenSSL (Take 2". ssl-users (Mailing list). Retrieved October 29, 2018. "New Committers". OpenSSL Software Foundation. May 20, 2019. Retrieved November 3, 2019. "OpenSSL Management Committee". OpenSSL Software Foundation. Retrieved November 3, 2019. "OpenSSL Committers". OpenSSL Software Foundation. Retrieved November 3, 2019. Marquess, Steve (January 19, 2017). "Akamai sponsors TLS 1.3". openssl-announce (Mailing list). Retrieved November 9, 2018. "OpenSSL – Changelog". OpenSSL Software Foundation. Retrieved September 26, 2016. "OpenSSL – Release Strategy". OpenSSL Software Foundation. Retrieved September 26, 2016. "OpenSSL Releases". GitHub. Retrieved December 6, 2022. "OpenSSL 0.9.x series notes". GitHub. Retrieved December 6, 2022. "OpenSSL 1.0.0 series notes". GitHub. Retrieved December 6, 2022. "OpenSSL 1.0.1 series notes". GitHub. Retrieved December 6, 2022. "OpenSSL 1.0.2 series notes". GitHub. Retrieved December 6, 2022. "Release Strategy". www.openssl.org. OpenSSL Foundation. January 7, 2020. "OpenSSL 1.1.0 series notes". GitHub. Retrieved December 6, 2022. Caswell, Matt (September 11, 2018). "OpenSSL 1.1.1 Is Released". www.openssl.org. OpenSSL Foundation. "OpenSSL 1.1.1 series notes". GitHub. Retrieved December 6, 2022. Caswell, Matt (February 8, 2018). "Using TLS1.3 With OpenSSL - OpenSSL Blog". www.openssl.org. OpenSSL Foundation. "OpenSSL 3.0 Has Been Released! - OpenSSL Blog". www.openssl.org. Retrieved September 8, 2021. "OpenSSL 3.0 series notes". GitHub. Retrieved December 6, 2022. Matt Caswell (November 28, 2018). "The Holy Hand Grenade of Antioch". OpenSSL Blog. Retrieved October 7, 2019. "OpenSSL 3.1 Final Release - OpenSSL Blog". www.openssl.org. Retrieved March 15, 2023. "OpenSSL 3.1 series notes". GitHub. Retrieved March 15, 2023. "OpenSSL 3.2.0 Final Release - OpenSSL Blog". www.openssl.org. Retrieved November 24, 2023. "OpenSSL 3.2 series notes". GitHub. Retrieved November 24, 2023. "GOST engine OpenSSL 1.0.0 README". cvs.openssl.org. Archived from the original on April 15, 2013. "OpenSSL source code, directory crypto/whrlpool". GitHub. Retrieved August 29, 2017. "Protecting data for the long term with forward secrecy". Retrieved November 5, 2012. "NIST recertifies open source encryption module". gcn.com. Archived from the original on October 10, 2007. "FIPS-140". openssl.org. Retrieved November 12, 2019. "OpenSSL User Guide for the OpenSSL FIPS Object Module v2.0" (PDF). openssl.org. March 14, 2017. Retrieved November 12, 2019. "Update on 3.0 Development, FIPS and 1.0.2 EOL". OpenSSL Blog. November 7, 2019. "Cryptographic Module Validation Program Certificate #1747". Computer Security Resource Center. October 11, 2016. "Cryptographic Module Validation Program Certificate #2398". Computer Security Resource Center. October 11, 2016. "Cryptographic Module Validation Program Certificate #2473". Computer Security Resource Center. October 11, 2016. "Cryptographic Module Validation Program search results". Computer Security Resource Center. October 11, 2016. "Cryptographic Module Validation Program search results". Computer Security Resource Center. October 11, 2016. Schneider, Troy K. (July 20, 2016). "Getting government approval of a more secure OpenSSL". GCN: Technology, Tools, and Tactics for Public Sector IT. Waterman, Shaun (July 21, 2016). "SafeLogic saves the day for feds' use of OpenSSL". FedScoop. Rashid, Fahmida Y. (July 26, 2016). "Reworked OpenSSL on track for government validation". InfoWorld. Wells, Joyce (August 3, 2017). "Oracle, SafeLogic and OpenSSL Join Forces to Update FIPS Module". Database Trends and Applications. Kerner, Sean Michael (August 4, 2017). "Oracle Joins SafeLogic to Develop FIPS Module for OpenSSL Security". eWeek. "OpenSSL 3.0 Alpha7 Release". OpenSSL Blog. October 20, 2020. "Cryptographic Module Validation Program: OpenSSL". Computer Security Resource Center. October 11, 2016. "OpenSSL: Source, License". openssl.org. "Licenses – Free Software Foundation". fsf.org. "WGET 1.10.2 for Windows (win32)". users.ugent.be. Archived from the original on January 2, 2008. "Releases of source and binaries". climm.org. Archived from the original on February 12, 2011. Retrieved November 30, 2010. "Deluge LICENSE file". deluge-torrent.org. Retrieved January 24, 2013. Salz, Rich (August 1, 2015). "License Agreements and Changes Are Coming". openssl.org. Retrieved August 23, 2015. "OpenSSL Re-licensing to Apache License v. 2.0 To Encourage Broader Use with Other FOSS Projects and Products". March 23, 2017. Archived from the original on July 18, 2017. Retrieved August 6, 2018. Lee, Victoria; Radcliffe, Mark; Stevenson, Chris (5 February 2019). "Top 10 FOSS legal developments of 2018". Opensource.com, Red Hat. Archived from the original on 5 February 2019. Retrieved 28 September 2019. The OpenSSL project announced that it had completed its shift from the OpenSSL/SSLeay license to the Apache Software License version 2 (ASLv2). "OpenSSL 3.0 License Change". September 22, 2021. Retrieved September 24, 2021. "OpenSSL Updates Fix Critical Security Vulnerabilities". August 9, 2014. Retrieved August 25, 2014. "OpenSSL ASN.1 asn1_d2i_read_bio() Heap Overflow Vulnerability". Cisco. "ASN1 BIO vulnerability". OpenSSL. "On the Security of RC4 in TLS". Royal Holloway Department of Information Security. "research!rsc: Lessons from the Debian/OpenSSL Fiasco". research.swtch.com. Retrieved August 12, 2015. "SSLkeys". Debian Wiki. Retrieved June 19, 2015. "Debian OpenSSL – Predictable PRNG Bruteforce SSH Exploit Python". Exploits Database. June 1, 2008. Retrieved August 12, 2015. "DSA-1571-1 openssl – predictable random number generator". Debian Project. May 13, 2008. OpenSSL.org (April 7, 2014). "OpenSSL Security Advisory [07 Apr 2014]". Retrieved April 9, 2014. OpenSSL (April 7, 2014). "TLS heartbeat read overrun (CVE-2014-0160)". Retrieved April 8, 2014. Codenomicon Ltd (April 8, 2014). "Heartbleed Bug". Retrieved April 8, 2014. "Why Heartbleed is dangerous? Exploiting CVE-2014-0160". IPSec.pl. 2014. Archived from the original on April 8, 2014. Retrieved April 8, 2014. Mutton, Paul (April 8, 2014). "Half a million widely trusted websites vulnerable to Heartbleed bug". Netcraft Ltd. Retrieved April 8, 2014. "OpenSSL continues to bleed out more flaws – more critical vulnerabilities found". Cyberoam Threat Research Labs. 2014. Archived from the original on June 19, 2014. Retrieved June 13, 2014. "CVE-2014-0224". CVE. 2014. "OpenSSL Security Advisory". OpenSSL. June 5, 2014. "OpenSSL Patches Severe Denial-of-Service Vulnerability". Brandon Stosh. March 20, 2015. Goodlin, Dan (January 28, 2016). "High-severity bug in OpenSSL allows attackers to decrypt HTTPS traffic". Ars Technica. "security/assl: assl-1.5.0p0v0 – hide awful SSL API in a sane interface". OpenBSD ports. May 22, 2014. Retrieved February 10, 2015. "OpenBSD has started a massive strip-down and cleanup of OpenSSL". OpenBSD journal. April 15, 2014. "OpenBSD forks, prunes, fixes OpenSSL". ZDNet. April 21, 2014. Retrieved April 21, 2014. "BoringSSL". Git at Google. "Google unveils independent 'fork' of OpenSSL called 'BoringSSL'". Ars Technica. June 21, 2014. "BoringSSL". Adam Langley's Weblog. June 20, 2014. "BoringSSL wants to kill the excitement that led to Heartbleed". Sophos. June 24, 2014. Buchanan, Bill (August 30, 2018). "Goodbye OpenSSL, and Hello To Google Tink". Medium. Retrieved April 4, 2019. "OpenSSL 3 breaks webpack build · Issue #22305 · brave/brave-browser". GitHub. "openssl version 3.0 in arch? / Newbie Corner / Arch Linux Forums". bbs.archlinux.org. "OpenSSL 3.0 transition plans". Ubuntu Community Hub. April 6, 2022. "OpenSSL 3.0 Compatibility · Issue #597 · nginx/unit". GitHub. "Our future with OpenSSL". Discussions on Python.org. November 28, 2022. "OpenSSL 3.0 Has Been Released! - OpenSSL Blog". www.openssl.org. "The experience of bringing OpenSSL 3.0 into Red Hat Enterprise Linux and Fedora". www.redhat.com. "Compile against OpenSSL 3.X". groups.google.com. "ESET Management Agent (RHEL 9.x, OpenSSL 3.0.x)". ESET Security Forum. "Issue 46313: SSLObject does not raise SSLEOFError on OpenSSL 3 - Python tracker". bugs.python.org. "RHEL 9 : openssl (RHSA-2022:6224)". www.tenable.com. "/policies/releasestrat.html". www.openssl.org. "Update on 3.0 Development, FIPS and 1.0.2 EOL - OpenSSL Blog". www.openssl.org. "Massive performance degradation in OpenSsl 3.0 if used in a heavy multi threaded server application · Issue #17064 · openssl/openssl". GitHub. "Performance issue with Openssl 3.0 in multi threaded application when using d2i_x509 · Issue #17950 · openssl/openssl". GitHub. "Severe efficiency degradation of credential loading in comparison to 1.1.1 · Issue #18814 · openssl/openssl". GitHub. "3.0 performance degraded due to locking · Issue #20286 · openssl/openssl". GitHub. "High cpu usage for outbound ssl requests after upgrading from v16.15.0 to v18.1.0 · Issue #43128 · nodejs/node". GitHub. "Massive performance degradation in OpenSsl 3.0 FIPS provider · Issue #18472 · openssl/openssl". GitHub. "Performance measurements · Issue #16791 · openssl/openssl". GitHub. "PEM/DER decoding of PKCS8 RSA private keys are 80 times slower in 3.0 · Issue #15199 · openssl/openssl". GitHub. "3.0 Performance problems · Issue #17627 · openssl/openssl". GitHub. "Using Transport Layer Security (TLS) to Secure QUIC". January 14, 2017 – via IETF. "221 - boringssl - A fork of OpenSSL that is designed to meet Google's needs - Monorail". bugs.chromium.org. "Support QUIC TLS API (#826) · Issues · gnutls / GnuTLS · GitLab". GitLab. "WIP: master QUIC support by tmshort · Pull Request #8797 · openssl/openssl". GitHub. "QUIC and OpenSSL - OpenSSL Blog". www.openssl.org. "quictls announce on twitter". "OMC Release Requirements". www.mail-archive.com. "The QUIC API OpenSSL will not provide | daniel.haxx.se". October 25, 2021. Tarreau, Willy (October 27, 2021). "[Pkg-openssl-devel] Any intent to maintain quictls ?". "Bug#1011391: openssl: please support quictls patchset". groups.google.com. "HTTP/3 support · Issue #680 · haproxy/haproxy". GitHub. Wikimedia Commons has media related to OpenSSL. Official website OpenSSL Manpages OpenSSL Programming Guide (archived) The OpenSSL License and the GPL by Mark McLoughlin OpenSSL programming tutorial OpenSSL Community Wiki
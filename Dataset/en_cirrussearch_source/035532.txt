The HTML5 specification introduced the video element for the purpose of playing videos, partially replacing the object element. HTML5 video is intended by its creators to become the new standard way to show video on the web, instead of the previous de facto standard of using the proprietary Adobe Flash plugin, though early adoption was hampered by lack of agreement as to which video coding formats and audio coding formats should be supported in web browsers. As of 2020, HTML5 video is the only widely supported video playback technology in modern browsers, with the Flash plugin being phased out. The <video> element started being discussed by the WHATWG in October 2006. The <video> element was proposed by Opera Software in February 2007. Opera also released a preview build that was showcased the same day, and a manifesto that called for video to become a first-class citizen of the web. The following HTML5 code fragment will embed a WebM video into a web page. <video src="movie.webm" poster="movie.jpg" controls> This is fallback content to display for user agents that do not support the video tag. </video> The "controls" attribute enables the browser's own user interface for controlling playback. Alternatively, playback can be controlled with JavaScript, which the web designer can use to create a custom user interface. The optional "poster" attribute specifies an image to show in the video's place before playback is started. Its purpose is to be representative of the video. Video format support varies among browsers (see below), so a web page can provide video in multiple formats. For other features, browser sniffing is used sometimes, which may be error-prone: any web developer's knowledge of browsers will inevitably be incomplete or not up-to-date. The browser in question "knows best" what formats it can use. The "video" element supports fallback through specification of multiple sources. Using any number of <source> elements, as shown below, the browser will choose automatically which file to download. Alternatively, the JavaScript canPlayType() function can be used to achieve the same. The "type" attribute specifies the MIME type and possibly a list of codecs, which helps the browser to determine whether it can decode the file without beginning to download it. The MIME type denotes the container format of the file, and the container format defines the interpretation of the codec string. <video poster="poster.jpg" controls> <source src="av1.mp4" type='video/mp4; codecs="av01.0.00M.08, opus"'> <source src="avc.mp4" type='video/mp4; codecs="avc1.4D401E, mp4a.40.2"'> <source src="vp9.webm" type='video/webm; codecs="vp9.0, opus"'> <source src="theora.ogv" type='video/ogg; codecs="theora, vorbis"'> <p>This is fallback content to display for user agents that do not support the video tag.</p> </video> The HTML5 specification does not specify which video and audio formats browsers should support. User agents are free to support any video formats they feel are appropriate, but content authors cannot assume that any video will be accessible by all complying user agents, since user agents have no minimal set of video and audio formats to support. The HTML5 Working Group considered it desirable to specify at least one video format which all user agents (browsers) should support. The ideal format in this regard would: Have good compression, good image quality, and low decode processor use. Be royalty-free. In addition to software decoders, a hardware video decoder should exist for the format, as many embedded processors do not have the performance to decode video. Initially, Ogg Theora was the recommended standard video format in HTML5, because it was not affected by any known patents. But on 10 December 2007, the HTML5 specification was updated, replacing the reference to concrete formats: User agents should support Theora video and Vorbis audio, as well as the Ogg container format. with a placeholder: It would be helpful for interoperability if all browsers could support the same codecs. However, there are no known codecs that satisfy all the current players: we need a codec that is known to not require per-unit or per-distributor licensing, that is compatible with the open source development model, that is of sufficient quality as to be usable, and that is not an additional submarine patent risk for large companies. This is an ongoing issue and this section will be updated once more information is available. The result was a polarisation of HTML5 video between industry-standard, ISO-defined but patent-encumbered formats, and open formats. The new AV1 format by Alliance for Open Media aims to be both industry standard, royalty-free, and open, and has wide industry support. Although Theora is not affected by known non-free patents, Apple has expressed concern about unknown patents that might affect it, whose owners might be waiting for a corporation with extensive financial resources to use the format before suing. Formats like H.264 might also be subject to unknown patents in principle, but they have been deployed much more widely and so it is presumed that any patent-holders would have already made themselves known. Apple has also opposed requiring Ogg format support in the HTML standard (even as a "should" requirement) on the grounds that some devices might support other formats much more easily, and that HTML has historically not required particular formats for anything. Some web developers criticized the removal of the Ogg formats from the specification. A follow-up discussion also occurred on the W3C questions and answers blog. Mozilla and Opera support only the open formats of Theora and WebM. Google stated its intention to remove support for H.264 in 2011, specifically for the HTML5 video tag. Although it has been removed from Chromium, as of JanuaryÂ 2021[update] it has yet to be removed from Google Chrome ten years later. The adaptive bitrate streaming standard MPEG-DASH can be used in Web browsers via the HTML5 Media Source Extensions (MSE) and JavaScript-based DASH players. Such players are, e.g., the open-source project dash.js of the DASH Industry Forum, but there are also products such as the HTML5 Video Player of Bitmovin (using HTML5 with JavaScript, but also a Flash-based DASH players for legacy Web browsers not supporting the HTML5 MSE). Google's acquisition of On2 in 2010 resulted in its acquisition of the VP8 video format. Google has provided a royalty-free license to use VP8. Google also started WebM, which combines the standardized open source VP8 video codec with Vorbis audio in a Matroska based container. The opening of VP8 was welcomed by the Free Software Foundation. When Google announced in January 2011 that it would end native support of H.264 in Chrome, criticism came from many quarters including Peter Bright of Ars Technica and Microsoft web evangelist Tim Sneath, who compared Google's move to declaring Esperanto the official language of the United States. However, Haavard Moen of Opera Software strongly criticized the Ars Technica article and Google responded to the reaction by clarifying its intent to promote WebM in its products on the basis of openness. After the launch of WebM, Mozilla and Opera have called for the inclusion of VP8 in HTML. On 7 March 2013, Google Inc. and MPEG LA, LLC announced agreements covering techniques that "may be essential" to VP8, with Google receiving a license from MPEG LA and 11 patent holders, and MPEG LA ending its efforts to form a VP8 patent pool. In 2012, VP9 was released by Google as a successor to VP8, also open and royalty free. At the end of 2017 the new AV1 format developed by the Alliance for Open Media (AOMedia) as the evolution of VP9 has reached the feature freeze, and the bitstream freeze is expected for January 2018. Firefox nightly builds already include support for AV1. H.264/MPEG-4 AVC is widely used, and has good speed, compression, hardware decoders, and video quality, but is patent-encumbered. Users of H.264 need licenses either from the individual patent holders, or from the MPEG LA, a group of patent holders including Microsoft and Apple, except for some Internet broadcast video uses. H.264 is usually used in the MP4 container format, together with Advanced Audio Coding (AAC) audio. AAC is also covered by patents in itself, so users of MP4 will have to license both H.264 and AAC. In June 2009, the WHATWG concluded that no existing format was suitable as a specified requirement. Apple still only supports H.264, but Microsoft now supports VP9 and WebM, and has pledged support for AV1. On 30 October 2013, Cisco announced that it was making a binary H.264 module available for download. Cisco will pay the costs of patent licensing for those binary modules when downloaded by the using software while it is being installed, making H.264 free to use in that specific case. In the announcement, Cisco cited its desire of furthering the use of the WebRTC project as the reason, since WebRTC's video chat feature will benefit from having a video format supported in all browsers. The H.264 module will be available on "all popular or feasibly supportable platforms, which can be loaded into any application". Cisco is also planning to publish source code for those modules under BSD license, but without paying the royalties, so the code will practically be free software only in countries without H.264 software patents, which has already been true about other existing implementations. Also on 30 October 2013, Mozilla's Brendan Eich announced that Firefox would automatically download Cisco's H.264 module when needed by default. He also noted that the binary module is not a perfect solution, since users do not have full free software rights to "modify, recompile, and redistribute without license agreements or fees". Thus Xiph and Mozilla continue the development of Daala. OpenH264 only supports the baseline profile of H.264, and does not by itself address the need for an AAC decoder. Therefore, it is not considered sufficient for typical MP4 web video, which is typically in the high profile with AAC audio. However, for use in WebRTC, the omission of AAC was justified in the release announcement: "the standards bodies have aligned on Opus and G.711 as the common audio codecs for WebRTC". There is doubt as to whether a capped global licensing of AAC, like Cisco's for H.264, is feasible after AAC's licensing bureau removed the price cap shortly after the release of OpenH264. This table shows which video formats are likely to be supported by a given user agent. Most of the browsers listed here use a multimedia framework for decoding and display of video, instead of incorporating such software components. It is not generally possible to tell the set of formats supported by a multimedia framework without querying it, because that depends on the operating system and third party codecs. In these cases, video format support is an attribute of the framework, not the browser (or its layout engine), assuming the browser properly queries its multimedia framework before rejecting unknown video formats. In some cases, the support listed here is not a function of either codecs available within the operating system's underlying media framework, or of codec capabilities built into the browser, but rather could be by a browser add-on that might, for example, bypass the browser's normal HTML parsing of the <video> tag to embed a plug-in based video player. Note that a video file normally contains both video and audio content, each encoded in its own format. The browser has to support both the video and audio formats. See HTML5 audio for a table of which audio formats are supported by each browser. The video format can be specified by MIME type in HTML (see example). MIME types are used for querying multimedia frameworks for supported formats. Of these browsers, only Firefox and Opera employ libraries for built-in decoding. In practice, Internet Explorer and Safari can also guarantee certain format support, because their manufacturers also make their multimedia frameworks. At the other end of the scale, Konqueror has identical format support to Internet Explorer when run on Windows, and Safari when run on Mac, but the selected support here for Konqueror is the typical for Linux, where Konqueror has most of its users. In general, the format support of browsers is much dictated by conflicting interests of vendors, specifically that Media Foundation and QuickTime support commercial standards, whereas GStreamer and Phonon cannot legally support other than free formats by default on the free operating systems that they are intended for. These indicate the level of support for the given item in each engine. By default, the most recent version of the engine is implied. However, a specific version number can be listed; when this indicates full support, it's the initial version of the engine fully supporting the item. Notes On 11 January 2011 the removal of support for H.264 was announced on Chromium Blog. As of 7Â NovemberÂ 2016[update] neither actual support was removed, nor the change to this plan was announced. VP9 support in 25, turned off by default. Enabled by default in version 29. Available if the device has hardware support for HEVC. No software decoding support was included because "HEVC is very computationally complex, this will provide a more consistent experience." Any format supported by Phonon backend. Available Phonon backends include DirectShow, QuickTime, GStreamer and xine; backends using MPlayer and VLC are in development. As of version 20, prefed off by default. Enabled by default beginning in version 21. Disabled by default until version 26. Also, depends on the codec on the system. The iPhone 15 Pro, iPhone 15 Pro Max, and any Mac with an Apple M3 SoC support AV1 hardware decoding. Any format supported by GStreamer on Webkit/GTK+. The support for Ogg Theora, WebM and h.264 formats is included with base, good, and bad plugins respectively. Transparent video, that is video with an alpha channel, has multiple design advantages: As it has no burnt-in background color / pattern / motif, you can change the background and/or neighboring objects in a web page any time later without the need to re-generate the video to fit into its surroundings properly, which was the far less flexible technique so far. You can very flexibly combine transparent videos with other elements (text, graphics, other videos or dynamically rendered content such as SVG or canvas) to achieve very dynamic layering effects. It opens a whole lot of possibilities also in terms of responsive web design. Chrome supports VP8 and VP9 encoded videos with an alpha channel served in a WebM container, since version 31 in 2013-07. Safari supports HEVC encoded videos with an alpha channel served in a MP4 container, since iOS 13 (2019-09) and macOS Catalina (2019-10). There are some other proprietary polyfill / legacy solutions with a JavaScript based video player playing back a video which upon upload to the SaaS server got converted into a proprietary video format. Before the HTML5 era the only way to play back transparent video was by the help of Adobe Flash Player and using the transparent flag in its embedding code. HTML has support for digital rights management (DRM, restricting how content can be used) via the HTML5 Encrypted Media Extensions (EME). The addition of DRM is controversial because it allows restricting users' freedom to use media restricted by DRM, even where fair use gives users the legal right to do so. A main argument in W3C's approval of EME was that the video content would otherwise be delivered in plugins and apps, and not in the web browser. In 2013 Netflix added support for HTML5 video using EME, beside their old delivery method using a Silverlight plugin (also with DRM). In 2010, in the wake of Apple iPad launch and after Steve Jobs announced that Apple mobile devices would not support Flash, a number of high-profile sites began to serve H.264 HTML5 video instead of Adobe Flash for user-agents identifying as iPad. HTML5 video was not as widespread as Flash videos, though there were rollouts of experimental HTML5-based video players from DailyMotion (using Ogg Theora and Vorbis format), YouTube (using the H.264 and WebM formats), and Vimeo (using the H.264 format). Support for HTML5 video has been steadily increasing. In June 2013, Netflix added support for HTML5 video. In January 2015, YouTube switched to using HTML5 video instead of Flash by default. In December 2015, Facebook switched from Flash to HTML5 for all video content. As of 2016, Flash is still widely installed on desktops, while generally not being supported on mobile devices such as smartphones. The Flash plugin is widely assumed, including by Adobe, to be destined to be phased out, which will leave HTML5 video as the only widely supported method to play video on the World Wide Web. Chrome, Firefox, Safari, and Edge, have plans to make almost all flash content click to play in 2017. The only major browser which does not have announced plans to deprecate Flash is Internet Explorer. Adobe announced on 25 July 2017 that they would be permanently ending development of Flash in 2020. HTML5 audio Comparison of HTML5 and Flash "The video element". HTML5: A vocabulary and associated APIs for HTML and XHTML. World Wide Web Consortium. 24 June 2010. Archived from the original on 13 August 2010. Retrieved 27 September 2010. A video element is used for playing videos or movies. "[whatwg] How not to fix HTML from Charles Iliya Krempeaux on 2006-10-30 (whatwg@whatwg.org from October 2006)". lists.w3.org. Retrieved 29 August 2022. van Kesteren, Anne (28 February 2007). "[whatwg] <video> element proposal". What Working Group (Mailing list). Retrieved 10 April 2010. "Browser War: Episode II â Attack of the DOMs". Archived from the original on 23 February 2013. Retrieved 10 April 2012. "SV Web Builders Event â World Premier of Opera with builtin video support". 1 March 2007. Retrieved 10 April 2012. "A Call for Video on the Web". Archived from the original on 26 April 2012. Retrieved 10 April 2012. "The "codecs" parameter in common media types". Retrieved 14 July 2020. Hickson, Ian (10 December 2007). "Video codec requirements changed". What WG (Mailing list). Archived from the original on 19 February 2012. Retrieved 25 February 2008. "(X)HTML5 Tracking". HTML5. Archived from the original on 26 July 2011. Retrieved 23 June 2009. Amador, Manuel (11 December 2011). "Removal of Ogg is *preposterous*". WHATWG (Mailing list). Archived from the original on 21 August 2008. Retrieved 25 August 2009. Metz, Cade (30 April 2010). "Steve Jobs: mystery patent pool to attack Ogg Theora". The Register. Retrieved 9 July 2011. Hickson, Ian (11 December 2007). "Re: Removal of Ogg is *preposterous*". WHATWG (Mailing list). Archived from the original on 21 August 2008. Retrieved 25 February 2008. Stachowiak, Maciej (21 March 2007). "Codecs (was Re: Apple Proposal for Timed Media Elements)". WHATWG (Mailing list). "[whatwg] Removal of Ogg is *preposterous*". WHATWG (Mailing list). 11 December 2007. Archived from the original on 21 August 2008. Retrieved 25 August 2009. Connolly, Dan (18 December 2007). "When will HTML 5 support <video>? Sooner if you help". W3C. Retrieved 23 June 2009. Jazayeri, Michael 'Mike' (14 January 2011). "More about the Chrome HTML Video Codec Change". Chromium blog. Shankland, Stephen (14 March 2012). "Mozilla execs capitulate in H.264 Web-video war". CNET. Hoffman, Chris (9 September 2015). "Why YouTube in Chrome (and Firefox) is Draining Your Laptop's Battery and How to Fix It". Howtogeek. "Media Source Extensions". 26 July 2022. "Adaptive Streaming HTML5 Player from Bitmovin". 20 April 2022. "Additional IP Rights Grant (Patents)". Lee, Matt (19 May 2010). "Free Software Foundation statement on WebM and VP8". FSF. Jazayeri, Michael 'Mike' (11 January 2011). "HTML Video Codec Support in Chrome". The Chromium Blog. Bright, Peter (12 January 2011). "Google's dropping H.264 from Chrome a step backward for openness". Ars Technica. Sneath, Tim (11 January 2011). "An Open Letter from the President of the United States of Google". MSDN blogs. Moen, Haavard K (13 January 2011). "Is the removal of H.264 from Chrome a step backward for openness?". My Opera. Metz, Cade (28 May 2010). "Mozilla and Opera call for Google open codec in HTML5 spec". The Register. djwm (7 March 2013). "Google and MPEG LA make a deal over VP8 codec â Update". The H Open. Heise Media UK. Retrieved 3 April 2013. "Archived copy" (PDF). Archived from the original (PDF) on 5 March 2016. Retrieved 3 April 2013.{{cite web}}: CS1 maint: archived copy as title (link) "VP8 and MPEG LA". WebM Project blog. 7 March 2013. Retrieved 3 April 2013. "Patent clouds remain over VP8: Google points to FRAND option, Nokia alleges infringement in court". FOSS Patents. 8 March 2013. Shankland, Stephen (28 November 2017). "Firefox now lets you try streaming-video tech that could be better than Apple's". CNET. Retrieved 25 December 2017. "AVC/H.264 Patent List" (PDF). MPEG LA. 1 February 2010. Archived from the original (PDF) on 14 May 2015. Retrieved 13 April 2010. AVC/H.264 Licensors, MPEG LA, archived from the original on 30 May 2015, retrieved 13 April 2010 Hickson, Ian (29 June 2009). "Codecs for <audio> and <video>". WHATWG (Mailing list). "OpenH264". "Open-Sourced H.264 Removes Barriers to WebRTC". Cisco. 30 October 2013. Archived from the original on 6 July 2015. Retrieved 30 October 2013. Brendan Eich (30 October 2013). "Cisco's H.264 Good News". Brendan Eich's blog. Monty Montgomery. "Comments on Cisco, Mozilla, and H.264". Monty Montgomery blog. Archived from the original on 19 May 2015. Retrieved 30 October 2013. Gal, Andreas (14 October 2014). "OpenH264 now in Firefox". Retrieved 25 February 2015. "MediaSourceExtensions (mozilla wiki)". mozilla. Retrieved 25 February 2015. "Support H.264/AAC/MP3 video/audio playback on desktop Firefox". mozilla. Retrieved 25 February 2015. xiphmont. "It's not a strawman after it comes true". Archived from the original on 21 April 2017. "Phonon documentation of backends", Qt, Nokia, archived from the original on 4 March 2016, retrieved 3 June 2011 "Phonon documentation of querying", Qt, Nokia, archived from the original on 4 March 2016, retrieved 3 June 2011 GNU General Public License Version 3, Free Software Foundation, 29 June 2007, retrieved 27 April 2013 "Android Core media format and codec support". Retrieved 18 December 2015. Issue 4363: [HTML5-Video] Enable HTML5 video/audio elements, retrieved 10 September 2010 enable proprietary_codecs h.264, retrieved 30 April 2016 Chromium does not support H.264, 9 June 2015, retrieved 30 April 2016 Audio/Video â The Chromium Projects, retrieved 21 March 2016 "Issue 2093007: Chromium side changes for enabling VP8 and WebM support", Code review, retrieved 10 September 2010 "[chrome] Revision 172738". "Google Chrome support Theora and Vorbis", Code, 20 May 2010 "Chrome 3.0 supportera la balise vidÃ©o du HTML 5" [Google Chrome 3.0 will support <video> tag]. CNET France (in French). Mike, Jazayeri (11 January 2011). "Chromium Blog: HTML Video Code Support in Chrome". The Chromium Blog. Retrieved 22 April 2012. "Google Chrome Plays HEVC: What Does it Mean? - Streaming Media". "Google Quietly Added HEVC Support in Chrome - Bitmovin". Bankoski, Jim (19 May 2010). "WebM and VP8 land in Chromium". Chromium Blog. Kersey, Jason (3 June 2010), "Dev Channel Update", Chrome Releases, retrieved 1 July 2010 Lucian Parfeni (28 December 2012). "Chrome Adds Support for the Next-Generation VP9 Video Codec and Mozilla's Opus Audio". Softpedia. Lucian Parfeni (17 June 2013). "Chrome Now Supports Google's Next-Gen VP9 Video Codec by Default". Softpedia. "AV1 Decode". Chrome Platform Status. Retrieved 4 September 2018. McCracken, Harry (16 March 2010), Microsoft Previews the Revamped Internet Explorer 9 Platform, Technologizer Jan Ozer (5 November 2014). "Apple Supports H.265, But So Far Only in FaceTime on an iPhone 6". HTML5 Video Support in IE9 Mobile, Microsoft, 13 October 2011, retrieved 11 March 2014 Blog, Microsoft Edge (15 January 2020). "Upgrading to the new Microsoft Edge". Microsoft Edge Blog. Retrieved 19 March 2021. "Can I use... Support tables for HTML5, CSS3, etc". caniuse.com. Retrieved 19 March 2021. "Can I use... Support tables for HTML5, CSS3, etc". caniuse.com. Retrieved 19 March 2021. "Can I use... Support tables for HTML5, CSS3, etc". caniuse.com. Retrieved 19 March 2021. "Introducing the Web Media Extension Package with OGG Vorbis and Theora support for Microsoft Edge". Microsoft Edge Dev Blog. Microsoft. 5 December 2017. "HTML5test - How well does your browser support HTML5?". "Redstone 4 Brings Better WebM Support in Edge". 11 April 2018. "HTML5test â How well does your browser support HTML5?". "HEVC Support". "Windows 10 HEVC playback â Yes or No?". "The status of VP9 Video Playback in Microsoft Edge is Shipped - Microsoft Edge Development". Archived from the original on 7 November 2017. Retrieved 21 September 2017. "Add AV1 Codec Support to Windows 10 â Tutorials". Ten Forums. "HTML5test â How well does your browser support HTML5?". "Introducing WebRTC 1.0 and interoperable real-time communications in Microsoft Edge". February 2017. "WebM, VP9 and Opus Support in Microsoft Edge". Microsoft Edge Dev Blog. Microsoft. 18 April 2016. "Mozilla Firefox 3.5 Release Notes". Mozilla. 30 June 2009. Bug 799315 â Windows Media Foundation backend for media playback, Mozilla, retrieved 21 December 2012 Bug 837859 â Enable WMF backend, Mozilla, retrieved 5 April 2013 "Mozilla Firefox 4.0 Release Notes". Mozilla. 22 March 2011. [Phoronix] Mozilla Firefox Enables VP9 Video Codec By Default, Phoronix, retrieved 8 December 2013 "Firefox â Notes (28.0)". "Firefox 65.0, See All New Features, Updates and Fixes". mozilla.org. Mozilla Foundation. 29 January 2019. "Firefox 66.0, See All New Features, Updates and Fixes". mozilla.org. Mozilla Foundation. 19 March 2019. Bug 825153 â Add support for Windows Vista WMF and prepend the system32 directory path to dll names, Mozilla, retrieved 28 March 2013 Bug 1250766 â Re-enable using Adobe GMP for decoding when system H.264/AAC codecs not available, Mozilla, retrieved 30 April 2016 Bug 886181 â Pref on gstreamer backend, Mozilla, retrieved 21 September 2013 Bug 794282 â Enable GStreamer in official builds, Mozilla, retrieved 23 June 2013 Bug 1207429 â Enable FFMpeg by default, Mozilla, retrieved 30 October 2015 "Mozilla ships Firefox with H.264 support on Android". Ars Technica. 30 November 2012. Bug 1070703 â Add mp4 support in 10.6 and 10.7 on Aurora, Mozilla, retrieved 2 October 2014 "H.264 support in Firefox". Ozer, Jan (26 November 2014). "The Case for VP9 â Streaming Media Magazine". JÃ¤genstedt, Philip (31 December 2009), "(re-)Introducing <video>" (official blog), Core developers, Opera, retrieved 6 February 2010 "Changelog for 24 â Opera Desktop". Lie, HÃ¥kon Wium (19 May 2010), Welcome, WebM <video>!, Opera, archived from the original on 21 March 2011 Mills, Chris (19 May 2010), Opera supports the WebM video format, Opera "Media formats supported by the HTML audio and video elements". Mozilla Developer Network. Mozilla. Martin Smole (6 June 2017). "WWDC17 â HEVC with HLS â Apple just announced a feature that we support out of the box". Bitmovin. "WebKit Features in Safari 17.4 | WebKit". 5 March 2024. "Safari 12.1 Release Notes | Apple Developer Documentation". " "Release Notes for Safari Technology Preview 110". 16 July 2020. "WebKit Features in Safari 17.0". 18 September 2023. "Safari New WebKit Features in Safari 14.1". 29 April 2021. Persch, Christian (1 April 2008), "The Future of Epiphany" (announcement), epiphany mailing list-list "Overview of available plug-ins", GStreamer, archived from the original on 12 December 2014, retrieved 4 July 2012 "How to use transparent videos on the web in 2022 - Rotato". Rotato 3D Mockups. Retrieved 20 October 2022. This blog showcases various use cases of transparent videos in web design, besides advertising their own software product, Rotato. "Alpha transparency in Chrome video". Chrome Developers. July 2013. Retrieved 20 October 2022. Chrome 31 now supports video alpha transparency in WebM. In other words, Chrome takes the alpha channel into account when playing green screen videos encoded to WebM (VP8 and VP9) with an alpha channel. This means you can play videos with transparent backgrounds: over web pages, images or even other videos. "HEVC Video with Alpha - WWDC19 - Videos". Apple Developer. Retrieved 20 October 2022. "Create transparent backgrounds in a SWF file". Adobe Technical Documentation. Retrieved 20 October 2022. The background color (Stage color) of a SWF file can be set to transparent. The background color or image of the HTML page that contains the SWF file shows through. This technique allows layering of SWF content with DHTML (Dynamic HTML) content. Not every web browser handles transparency in the same way. Be sure to test your SWF file in all browsers that you want to enable your audience to use. Most Linux browsers do not support Animate transparency. "Apply OBJECT and EMBED tag attributes in Adobe Flash Professional". Adobe Technical Documentation. Retrieved 20 October 2022. transparent â The SWF content is layered together with other HTML elements on the page. The SWF file background color (Stage color) is transparent. HTML elements beneath the SWF file are visible through any transparent areas of the SWF, with alpha blending. This option reduces playback performance compared to wmode=window or wmode=direct. "Keep DRM out of Web standards â Reject the Encrypted Media Extensions (EME) proposal â Defective by Design". Yegulalp, Serdar (4 October 2013). "Berners-Lee and W3C approve HTML5 video DRM additions". "HTML5 Video at Netflix". Medium. Netflix Technology Blog. 15 April 2013. "iPad-ready websites". Apple. Archived from the original on 1 March 2011. Retrieved 5 April 2010. "Watch Video...without Flash". Dailymotion. 27 May 2009. Retrieved 11 October 2018. Carle, Kevin; Zacharias, Chris (20 January 2010). "Introducing YouTube HTML5 Supported Videos". Youtube. Retrieved 7 March 2010. Dougherty, Brad (21 January 2010). "Try our new HTML5 player!". Vimeo. Archived from the original on 4 March 2010. Retrieved 7 March 2010. Anthony, Sebastian (28 June 2013). "Netflix switches from Silverlight to HTML5 in Windows 8.1, reduces CPU usage dramatically â ExtremeTech". McCormick, Rich (27 January 2015). "YouTube drops Flash for HTML5 video as default". Welch, Chris (18 December 2015). "Facebook's website now uses HTML5 instead of Flash for all videos". Paul, Ryan (16 August 2012). "Availability of Adobe's Flash browser plugin discontinued on Android". Tittel, Chris Minnick and Ed (30 April 2014). "How Adobe Is Moving on From Flash to Embrace HTML5". Williams, Owen (1 September 2015). "Adobe Flash is finally dead". TNW | Apps. Barrett, Brian (15 July 2015). "Flash. Must. Die". Wired. "Intent to implement: HTML5 by Default". 9 May 2016. "So long, and thanks for all the Flash". Retrieved 8 December 2017. Smedberg, Benjamin (20 July 2016). "Reducing Adobe Flash Usage in Firefox". Mondello, Ricky (14 June 2016). "Next Steps for Legacy Plug-ins". WEbKit.org. Apple Inc. Cowan, Crispin (14 December 2016). "Extending User Control of Flash with Click-to-Run". Microsoft Edge DevBlog. Microsoft. eross-msft. "Microsoft Edge and Internet Explorer 11 (Microsoft Edge for IT Pros)". "Flash & The Future of Interactive Content". Retrieved 8 December 2017. "HTML Standard â The Video Element", What WG, W3C, retrieved 10 July 2021. Daoust, Francois; Hoschka, Philipp; Patrikakis, Charalampos Z (2010), Towards Video on the Web with HTML5 (PDF), Barcelona: NEM Summit. Lawson, Bruce; Lauke, Patrick H. (11 February 2010), Introduction to HTML5 video, Opera. HTML5 Video video platform software and news. Pieters, Simon (3 March 2010), Everything you need to know about HTML5 video and audio, Opera HTML5 Video: A Practical Guide: Convert, Embed, Javascript and Flash Fallback for HTML5 Videos Mozilla's overview of media formats supported by browsers
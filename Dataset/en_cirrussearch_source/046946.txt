The Advanced Message Queuing Protocol (AMQP) is an open standard application layer protocol for message-oriented middleware. The defining features of AMQP are message orientation, queuing, routing (including point-to-point and publish-and-subscribe), reliability and security. AMQP mandates the behavior of the messaging provider and client to the extent that implementations from different vendors are interoperable, in the same way as SMTP, HTTP, FTP, etc. have created interoperable systems. Previous standardizations of middleware have happened at the API level (e.g. JMS) and were focused on standardizing programmer interaction with different middleware implementations, rather than on providing interoperability between multiple implementations. Unlike JMS, which defines an API and a set of behaviors that a messaging implementation must provide, AMQP is a wire-level protocol. A wire-level protocol is a description of the format of the data that is sent across the network as a stream of bytes. Consequently, any tool that can create and interpret messages that conform to this data format can interoperate with any other compliant tool irrespective of implementation language. AMQP is a binary application layer protocol, designed to efficiently support a wide variety of messaging applications and communication patterns. It provides flow controlled, message-oriented communication with message-delivery guarantees such as at-most-once (where each message is delivered once or never), at-least-once (where each message is certain to be delivered, but may do so multiple times) and exactly-once (where the message will always certainly arrive and do so only once), and authentication and/or encryption based on SASL and/or TLS. It assumes an underlying reliable transport layer protocol such as Transmission Control Protocol (TCP). The AMQP specification is defined in several layers: (i) a type system, (ii) a symmetric, asynchronous protocol for the transfer of messages from one process to another, (iii) a standard, extensible message format and (iv) a set of standardised but extensible 'messaging capabilities.' AMQP was originated in 2003 by John O'Hara at JPMorgan Chase in London. AMQP was conceived as a co-operative open effort. The initial design was by JPMorgan Chase from mid-2004 to mid-2006 and it contracted iMatix Corporation to develop a C broker and protocol documentation. In 2005 JPMorgan Chase approached other firms to form a working group that included Cisco Systems, IONA Technologies, iMatix, Red Hat, and Transaction Workflow Innovation Standards Team (TWIST). In the same year JPMorgan Chase partnered with Red Hat to create Apache Qpid, initially in Java and soon after C++. Independently, RabbitMQ was developed in Erlang by Rabbit Technologies, followed later by the Microsoft and StormMQ implementations. The working group grew to 23 companies including Bank of America, Barclays, Cisco Systems, Credit Suisse, Deutsche BÃ¶rse, Goldman Sachs, HCL Technologies Ltd, Progress Software, IIT Software, INETCO Systems Limited, Informatica (including 29 West), JPMorgan Chase, Microsoft Corporation, my-Channels, Novell, Red Hat, Software AG, Solace Systems, StormMQ, Tervela Inc., TWIST Process Innovations ltd, VMware (which acquired Rabbit Technologies) and WSO2. In 2008, Pieter Hintjens, CEO and chief software designer of iMatix, wrote an article called "What is wrong with AMQP (and how to fix it)" and distributed it to the working group to alert of imminent failure, identify problems seen by iMatix and propose ways to fix the AMQP specification. By then, iMatix had already started work on ZeroMQ. In 2010, Hintjens announced that iMatix would leave the AMQP workgroup and did not plan to support AMQP/1.0 in favor of the significantly simpler and faster ZeroMQ. In August 2011, the AMQP working group announced its reorganization into an OASIS member section. AMQP 1.0 was released by the AMQP working group on 30 October 2011, at a conference in New York. At the event Microsoft, Red Hat, VMware, Apache, INETCO and IIT Software demonstrated software running the protocol in an interoperability demonstration. The next day, on 1 November 2011, the formation of an OASIS Technical Committee was announced to advance this contributed AMQP version 1.0 through the international open standards process. The first draft from OASIS was released in February 2012, the changes as compared to that published by the Working Group being restricted to edits for improved clarity (no functional changes). The second draft was released for public review on 20 June (again with no functional changes), and AMQP was approved as an OASIS standard on 31 October 2012. OASIS AMQP was approved for release as an ISO and IEC International Standard in April 2014. AMQP 1.0 was balloted through the Joint Technical Committee on Information Technology (JTC1) of the International Standards Organization (ISO) and the International Electrotechnical Commission (IEC). The approved OASIS AMQP submission has been given the designation, ISO/IEC 19464. Previous versions of AMQP were 0-8, published in June 2006, 0-9, published in December 2006, 0-10 published in February 2008 and 0-9-1, published in November 2008. These earlier releases are significantly different from the 1.0 specification. Whilst AMQP originated in the financial services industry, it has general applicability to a broad range of middleware problems. AMQP defines a self-describing encoding scheme allowing interoperable representation of a wide range of commonly used types. It also allows typed data to be annotated with additional meaning, for example a particular string value might be annotated so that it could be understood as a URL. Likewise a map value containing key-value pairs for 'name', 'address' etc., might be annotated as being a representation of a 'customer' type. The type-system is used to define a message format allowing standard and extended meta-data to be expressed and understood by processing entities. It is also used to define the communication primitives through which messages are exchanged between such entities, i.e. the AMQP frame bodies. The basic unit of data in AMQP is a frame. There are nine AMQP frame bodies defined that are used to initiate, control and tear down the transfer of messages between two peers. These are: open (the connection) begin (the session) attach (the link) transfer flow disposition detach (the link) end (the session) close (the connection) The link protocol is at the heart of AMQP. An attach frame body is sent to initiate a new link; a detach to tear down a link. Links may be established in order to receive or send messages. Messages are sent over an established link using the transfer frame. Messages on a link flow in only one direction. Transfers are subject to a credit-based flow control scheme, managed using flow frames. This allows a process to protect itself from being overwhelmed by too large a volume of messages or more simply to allow a subscribing link to pull messages as and when desired. Each transferred message must eventually be settled. Settlement ensures that the sender and receiver agree on the state of the transfer, providing reliability guarantees. Changes in state and settlement for a transfer (or set of transfers) are communicated between the peers using the disposition frame. Various reliability guarantees can be enforced this way: at-most-once, at-least-once and exactly-once. Multiple links, in both directions, can be grouped together in a session. A session is a bidirectional, sequential conversation between two peers that is initiated with a begin frame and terminated with an end frame. A connection between two peers can have multiple sessions multiplexed over it, each logically independent. Connections are initiated with an open frame in which the sending peer's capabilities are expressed, and terminated with a close frame. AMQP defines as the bare message, that part of the message that is created by the sending application. This is considered immutable as the message is transferred between one or more processes. Ensuring the message as sent by the application is immutable allows for end-to-end message signing and/or encryption and ensures that any integrity checks (e.g. hashes or digests) remain valid. The message can be annotated by intermediaries during transit, but any such annotations are kept distinct from the immutable bare message. Annotations may be added before or after the bare message. The header is a standard set of delivery-related annotations that can be requested or indicated for a message and includes time to live, durability, priority. The bare message itself is structured as an optional list of standard properties (message id, user id, creation time, reply to, subject, correlation id, group id etc.), an optional list of application-specific properties (i.e., extended properties) and a body, which AMQP refers to as application data. Properties are specified in the AMQP type system, as are annotations. The application data can be of any form, and in any encoding the application chooses. One option is to use the AMQP type system to send structured, self-describing data. The link protocol transfers messages between two nodes but assumes very little as to what those nodes are or how they are implemented. A key category is those nodes used as a rendezvous point between senders and receivers of messages (e.g. queues or topics). The AMQP specification calls such nodes distribution nodes and codifies some common behaviors. This includes: some standard outcomes for transfers, through which receivers of messages can for example accept or reject messages a mechanism for indicating or requesting one of the two basic distribution patterns, competing- and non-competing- consumers, through the distribution modes move and copy respectively the ability to create nodes on-demand, e.g. for temporary response queues the ability to refine the set of message of interest to a receiver through filters Though AMQP can be used in simple peer-to-peer systems, defining this framework for messaging capabilities additionally enables interoperability with messaging intermediaries (brokers, bridges etc.) in larger, richer messaging networks. The framework specified covers basic behaviors but allows for extensions to evolve that can be further codified and standardised. Apache Qpid, an open-source project at the Apache Foundation Apache ActiveMQ, an open-source project at the Apache Foundation Azure Event Hubs Azure Service Bus IBM MQ Solace PubSub+, a multi-protocol broker in hardware, software, and cloud JORAM, a Java open-source implementation from the OW2 Consortium. Apache Qpid maintains support for multiple AMQP versions RabbitMQ, an open-source project sponsored by VMware, primarily supports AMQP 0-9-1, with 1.0 via a plugin AMQP protocol version 1.0 is the current specification version. It focuses on core features which are necessary for interoperability at Internet scale. It contains less explicit routing than previous versions because core functionality is the first to be rigorously standardized. AMQP 1.0 interoperability has been more extensively tested with more implementors than prior versions. The AMQP website contains the OASIS specification for version 1.0. Earlier versions of AMQP, published prior to the release of 1.0 (see History above) and significantly different from it, include: AMQP 0-9-1, which has clients available "for many popular programming languages and platforms" AMQP 0-10 These are the known open protocol specifications that cover the same or similar space as AMQP: Streaming Text Oriented Messaging Protocol (STOMP), a text-based protocol developed at Codehaus; uses the JMS-like semantics of 'destination'. Extensible Messaging and Presence Protocol (XMPP), the Extensible Messaging and Presence Protocol. MQTT, a lightweight publish-subscribe protocol. OpenWire as used by ActiveMQ. Java Message Service (JMS), is often compared to AMQP. However, JMS is an API specification (part of the Java EE specification) that defines how message producers and consumers are implemented. JMS does not guarantee interoperability between implementations, and the JMS-compliant messaging system in use may need to be deployed on both client and server. On the other hand, AMQP is a wire-level protocol specification. In theory AMQP provides interoperability as different AMQP-compliant software can be deployed on the client and server sides. Note that, like HTTP and XMPP, AMQP does not have a standard API. Peer-to-peer Message queue Message queuing service Data Distribution Service IBM MQ O'Hara, J. (2007). "Toward a commodity enterprise middleware". ACM Queue. 5 (4): 48â55. doi:10.1145/1255421.1255424. Vinoski, S. (2006). "Advanced Message Queuing Protocol" (PDF). IEEE Internet Computing. 10 (6): 87â89. doi:10.1109/MIC.2006.116. S2CIDÂ 14211884. "OASIS AMQP version 1.0, sections 2.6.7-2.6.8". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, sections 2.6.12-2.6.13". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 5.1". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 2.1". OASIS AMQP Technical Committee. Retrieved 18 June 2012. Hintjens, Pieter (7 February 2006). "Background to the AMQ Project, Authors". iMatix Corporation. Retrieved 18 February 2018. Hintjens, Pieter. "What is wrong with AMQP (and how to fix it)". iMatix. Archived from the original on 6 September 2011. Retrieved 1 March 2024. Hintjens, Pieter (30 March 2010). "iMatix will end OpenAMQ support by 2011". openamq-dev mailing list. Archived from the original on 2 April 2010. Retrieved 1 March 2024. "AMQP Working Group Transitions to OASIS Member Section". Archived from the original on 16 April 2012. Retrieved 28 January 2012. OASIS Forms AMQP Technical Committee to Advance Business Messaging Interoperability Within Middleware, Mobile, and Cloud Environments "30-day Public Review for OASIS AMQP Version 1.0". 21 February 2012. Retrieved 18 June 2012. "15 day Public Review for OASIS AMQP Version 1.0". 20 June 2012. Retrieved 20 June 2012. "AMQP 1.0 Becomes OASIS Standard". 31 October 2012. Retrieved 1 November 2012. "Information technology -- Advanced Message Queuing Protocol (AMQP) v1.0 specification". ISO/IEC 19464. ISO. Retrieved 1 May 2014. "AMQP PMC Meeting Minutes 13th February, 2008". AMQP PMC Minutes. AMQP Working Group. Archived from the original on 30 November 2012. Retrieved 15 June 2012. "RabbitMQ - AMQP 0-8 to 0-9-1". www.rabbitmq.com. Retrieved 12 January 2018. rabbitmq-amqp1.0: AMQP 1.0 support for RabbitMQ, RabbitMQ, 17 December 2017, retrieved 12 January 2018 "OASIS AMQP version 1.0, section 1.1". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 2.6.7-2.6.9". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 2.6.12-2.6.14". AMQP WorkingGroup. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.2.1". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.2". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.3". OASIS AMQP Technical Committee. Retrieved 15 June 2012. "OASIS AMQP version 1.0, section 3.4". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.5.2". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.5.3". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.5.4". OASIS AMQP Technical Committee. Retrieved 18 June 2012. "OASIS AMQP version 1.0, section 3.5.1". OASIS AMQP Technical Committee. Retrieved 18 June 2012. axisc. "AMQP 1.0 in Azure Service Bus and Event Hubs protocol guide". docs.microsoft.com. Retrieved 21 May 2019. ShubhaVijayasarathy. "What is Azure Event Hubs? - a Big Data ingestion service". docs.microsoft.com. Retrieved 21 May 2019. axisc. "Overview of AMQP 1.0 in Azure Service Bus". docs.microsoft.com. Retrieved 21 May 2019. "IBM MQ". www.ibm.com. Retrieved 15 March 2024. "About IBM MQ". www.ibm.com. Retrieved 15 March 2024. "Solace PubSub+". solace.com. Qpid 0.22 - Apache QpidÂ "Status of Pre-1.0 Versions of AMQP". AMQP site. Retrieved 28 May 2014. "AMQP 0-9-1 Model Explained". VMWare, Inc. Retrieved 1 November 2012. Official website OASIS AMQP technical committee High-level Overview of AMQP and the AMQP Model (version 0-9-1) OMG Analysis of AMQP and comparison with DDS-RTPS Google Tech Talk, with video and slides, about RabbitMQ Presentation of AMQP and RestMS messaging at FOSDEM 2009 List of AMQP clients
The Linux kernel is a free and open-source,: 4  monolithic, modular, multitasking, Unix-like operating system kernel. It was originally written in 1991 by Linus Torvalds for his i386-based PC, and it was soon adopted as the kernel for the GNU operating system, which was written to be a free (libre) replacement for Unix. Linux is provided under the GNU General Public License version 2 only, but it contains files under other compatible licenses. Since the late 1990s, it has been included as part of a large number of operating system distributions, many of which are commonly also called Linux. Linux is deployed on a wide variety of computing systems, such as embedded devices, mobile devices (including its use in the Android operating system), personal computers, servers, mainframes, and supercomputers. It can be tailored for specific architectures and for several usage scenarios using a family of simple commands (that is, without the need of manually editing its source code before compilation); privileged users can also fine-tune kernel parameters at runtime. Most of the Linux kernel code is written using the GNU extensions of GCC: 18  to the standard C programming language and with the use of architecture-specific instructions (ISA) in limited parts of the kernel. This produces a highly optimized executable (vmlinux) with respect to utilization of memory space and task execution times.: 379–380  Day-to-day development discussions take place on the Linux kernel mailing list (LKML). Changes are tracked using the version control system git, which was originally authored by Torvalds as a free software replacement for BitKeeper. In April 1991, Linus Torvalds, at the time a 21-year-old computer science student at the University of Helsinki, Finland, started working on some simple ideas for an operating system inspired by UNIX, for a personal computer. He started with a task switcher in Intel 80386 assembly language and a terminal driver. On 25 August 1991, Torvalds posted the following to comp.os.minix, a newsgroup on Usenet: I'm doing a (free) operating system (just a hobby, won't be big and professional like gnu) for 386(486) AT clones. This has been brewing since April, and is starting to get ready. I'd like any feedback on things people like/dislike in minix, as my OS resembles it somewhat (same physical layout of the file-system (due to practical reasons) among other things). I've currently ported bash(1.08) and gcc(1.40), and things seem to work. This implies that I'll get something practical within a few months [...] Yes - it's free of any minix code, and it has a multi-threaded fs. It is NOT protable [sic] (uses 386 task switching etc), and it probably never will support anything other than AT-harddisks, as that's all I have :-(. On 17 September 1991, Torvalds prepared version 0.01 of Linux and put on the "ftp.funet.fi" – FTP server of the Finnish University and Research Network (FUNET). It was not even executable since its code still needed Minix to compile and test it. On 5 October 1991, Torvalds announced the first "official" version of Linux, version 0.02. At this point, Linux was able to run Bash, GCC, and some other GNU utilities: [As] I mentioned a month ago, I'm working on a free version of a Minix-lookalike for AT-386 computers. It has finally reached the stage where it's even usable (though may not be depending on what you want), and I am willing to put out the sources for wider distribution. It is just version 0.02...but I've successfully run bash, gcc, gnu-make, gnu-sed, compress, etc. under it. After that, despite the limited functionality of the early versions, Linux rapidly gained developers and users. Many people contributed code to the project, including some developers from the MINIX community.[citation needed] At the time, the GNU Project had created many of the components required for its free UNIX replacement, the GNU operating system, but its own kernel, GNU Hurd, was incomplete. For this reason, it soon adopted the Linux kernel as well. The Berkeley Software Distribution had not yet freed itself from legal encumbrances and was not competing in the space for a free OS kernel. Torvalds assigned version 0 to the kernel to indicate that it was mainly for testing and not intended for productive use. Version 0.11, released in December 1991, was the first self-hosted Linux, for it could be compiled by a computer running the same kernel. When Torvalds released version 0.12 in February 1992, he adopted the GNU General Public License version 2 (GPLv2) over his previous self-drafted license, which had not permitted commercial redistribution. In contrast to Unix, all source files of Linux are freely available, including device drivers. The initial success of Linux was driven by programmers and testers across the world. With the support of the POSIX APIs, through the libC that, whether needed, acts as an entry point to the kernel address space, Linux could run software and applications that had been developed for Unix. On 19 January 1992, the first post to the new newsgroup alt.os.linux was submitted. On 31 March 1992, the newsgroup was renamed comp.os.linux. The fact that Linux is a monolithic kernel rather than a microkernel was the topic of a debate between Andrew S. Tanenbaum, the creator of MINIX, and Torvalds. The Tanenbaum–Torvalds debate started in 1992 on the Usenet group comp.os.minix as a general discussion about kernel architectures. Linux version 0.95 was the first to be capable of running the X Window System. In March 1994, Linux 1.0.0 was released with 176,250 lines of code. It was the first version suitable for use in production environments. It started a versioning system for the kernel with three or four numbers separated by dots where the first represented the major release, the second was the minor release, and the third was the revision.: 9  At that time odd-numbered minor releases were for development and tests, whilst even numbered minor releases were for production. The optional fourth digit indicated a set of patches to a revision. Development releases were indicated with -rc ("release candidate") suffix. The current version numbering is slightly different from the above. The even vs. odd numbering has been dropped, and a specific major version is now indicated by the first two numbers, taken as a whole. While the time-frame is open for the development of the next major, the -rcN suffix is used to identify the n'th release candidate for the next version. For example, the release of the version 4.16 was preceded by seven 4.16-rcN (from -rc1 to -rc7). Once a stable release is made, its maintenance is passed off to the "stable team". Occasional updates to stable releases are identified by a three numbering scheme (e.g., 4.13.1, 4.13.2, ..., 4.13.16). After version 1.3 of the kernel, Torvalds decided that Linux had evolved enough to warrant a new major number, so he released version 2.0.0 in June 1996. The series included 41 releases. The major feature of 2.0 was support for symmetric multiprocessing (SMP) and support for more types of processors. Starting with version 2.0, Linux is configurable for selecting specific hardware targets and for enabling architecture-specific features and optimizations. The make *config family of commands of kbuild are used to enable and configure thousands of options for building ad hoc kernel executables (vmlinux) and loadable modules. Version 2.2, released on 20 January 1999, improved locking granularity and SMP management, added m68k, PowerPC, Sparc64, Alpha, and other 64-bit platforms support. Furthermore, it added new file systems including Microsoft's NTFS read-only capability. In 1999, IBM published its patches to the Linux 2.2.13 code for the support of the S/390 architecture. Version 2.4.0, released on 4 January 2001, contained support for ISA Plug and Play, USB, and PC Cards. Linux 2.4 added support for the Pentium 4 and Itanium (the latter introduced the ia64 ISA that was jointly developed by Intel and Hewlett-Packard to supersede the older PA-RISC), and for the newer 64-bit MIPS processor. Development for 2.4.x changed a bit in that more features were made available throughout the series, including support for Bluetooth, Logical Volume Manager (LVM) version 1, RAID support, InterMezzo and ext3 file systems. Version 2.6.0 was released on 17 December 2003. The development for 2.6.x changed further towards including new features throughout the series. Among the changes that have been made in the 2.6 series are: integration of µClinux into the mainline kernel sources, PAE support, support for several new lines of CPUs, integration of Advanced Linux Sound Architecture (ALSA) into the mainline kernel sources, support for up to 232 users (up from 216), support for up to 229 process IDs (64-bit only, 32-bit architectures still limited to 215), substantially increased the number of device types and the number of devices of each type, improved 64-bit support, support for file systems which support file sizes of up to 16 terabytes, in-kernel preemption, support for the Native POSIX Thread Library (NPTL), User-mode Linux integration into the mainline kernel sources, SELinux integration into the mainline kernel sources, InfiniBand support, and considerably more. Also notable are the addition of a wide selection of file systems starting with the 2.6.x releases: now, the kernel supports a large number of file systems, some that have been designed for Linux, like ext3, ext4, FUSE, Btrfs, and others that are native of other operating systems like JFS, XFS, Minix, Xenix, Irix, Solaris, System V, Windows and MS-DOS. In 2005 the stable team was formed as a response to the lack of a kernel tree where people could work on bug fixes, and it would keep updating stable versions. In February 2008 the linux-next tree was created to serve as a place where patches aimed to be merged during the next development cycle gathered. Several subsystem maintainers also adopted the suffix -next for trees containing code which they mean to submit for inclusion in the next release cycle. As of January 2014[update], the in-development version of Linux is held in an unstable branch named linux-next. Linux used to be maintained without the help of an automated source code management system until, in 2002, development switched to BitKeeper. It was freely available for Linux developers but it was not free software. In 2005, because of efforts to reverse-engineer it, the company which owned the software revoked its support of the Linux community. In response, Torvalds and others wrote Git. The new system was written within weeks, and in two months the first official kernel made using it was released. Details on the history of the 2.6 kernel series can be found in the ChangeLog files on the 2.6 kernel series source code release area of kernel.org. The 20th anniversary of Linux was celebrated by Torvalds in July 2011 with the release of the 3.0.0 kernel version. As 2.6 had been the version number for 8 years, a new uname26 personality that reports 3.x as 2.6.40+x had to be added to the kernel so that old programs would work. Version 3.0 was released on 22 July 2011. On 30 May 2011, Torvalds announced that the big change was "NOTHING. Absolutely nothing." and asked, "...let's make sure we really make the next release not just an all new shiny number, but a good kernel too." After the expected 6–7 weeks of the development process, it would be released near the 20th anniversary of Linux. On 11 December 2012, Torvalds decided to reduce kernel complexity by removing support for i386 processors, making the 3.7 kernel series the last one still supporting the original processor. The same series unified support for the ARM processor. Version 3.11, released on 2 September 2013, adds many new features such as new O_TMPFILE flag for open(2) to reduce temporary file vulnerabilities, experimental AMD Radeon dynamic power management, low-latency network polling, and zswap (compressed swap cache). The numbering change from 2.6.39 to 3.0, and from 3.19 to 4.0, involved no meaningful technical differentiation. The major version number was increased to avoid large minor numbers. Stable 3.x.y kernels were released until 3.19 in February 2015. In April 2015, Torvalds released kernel version 4.0. By February 2015, Linux had received contributions from nearly 12,000 programmers from more than 1,200 companies, including some of the world's largest software and hardware vendors. Version 4.1 of Linux, released in June 2015, contains over 19.5 million lines of code contributed by almost 14,000 programmers. A total of 1,991 developers, of whom 334 were first-time collaborators, added more than 553,000 lines of code to version 5.8, breaking the record previously held by version 4.9. According to the Stack Overflow's annual Developer Survey of 2019, more than the 53% of all respondents have developed software for Linux and about 27% for Android, although only about 25% develop with Linux-based operating systems. Most websites run on Linux-based operating systems, and all of the world's 500 most powerful supercomputers use some kind of OS based on Linux. Linux distributions bundle the kernel with system software (e.g., the GNU C Library, systemd, and other Unix utilities and daemons) and a wide selection of application software, but their usage share in desktops is low in comparison to other operating systems. Android, which accounts for the majority of the installed base of all operating systems for mobile devices, is responsible for the rising usage of the Linux kernel, together with its wide use in a large variety of embedded devices. Linux is a monolithic kernel with a modular design (i.e., it can insert and remove loadable kernel modules at runtime),: 338  supporting most features once only available in closed source kernels of non-free operating systems. The rest of the article makes use of the UNIX and Unix-like operating systems convention on the official manual pages. The numbers that follow the name of commands, interfaces, and other features, have the purpose of specifying the section (i.e., the type of the OS' component or feature) they belong to (e.g., execve(2) refers to a system call, while exec(3) refers to a userspace library wrapper). The following list and the subsequent sections describe a non-comprehensive overview of Linux architectural design and of some of its noteworthy features. Concurrent computing and (with the availability of enough CPU cores for tasks that are ready to run) even true parallel execution of many processes at once (each of them having one or more threads of execution) on SMP and NUMA architectures. Selection and configuration of hundreds of kernel features and drivers (using one of the make *config family of commands, before running compilation), modification of kernel parameters before booting (usually by inserting instructions into the lines of the GRUB2 menu), and fine tuning of kernel behavior at run-time (using the sysctl(8) interface to /proc/sys/). Configuration (again using the make *config commands) and run-time modifications of the policies (via nice(2), setpriority(2), and the family of sched_*(2) syscalls) of the task schedulers that allow preemptive multitasking (both in user mode and, since the 2.6 series, in kernel mode); the Completely Fair Scheduler (CFS) is the default scheduler of Linux since 2007 and it uses a red-black tree which can search, insert and delete process information (task struct) with O(log n) time complexity, where n is the number of runnable tasks. Advanced memory management with paged virtual memory. Inter-process communications and synchronization mechanism. A virtual filesystem on top of several concrete filesystems (ext4, Btrfs, XFS, JFS, FAT32, and many more). Configurable I/O schedulers, ioctl(2) syscall that manipulates the underlying device parameters of special files (it is a non standard system call, since arguments, returns, and semantics depends on the device driver in question), support for POSIX asynchronous I/O (however, because they scale poorly with multithreaded applications, a family of Linux specific I/O system calls (io_*(2)) had to be created for the management of asynchronous I/O contexts suitable for concurrently processing). OS-level virtualization (with Linux-VServer), paravirtualization and hardware-assisted virtualization (with KVM or Xen, and using QEMU for hardware emulation); On the Xen hypervisor, the Linux kernel provides support to build Linux distributions (such as openSUSE Leap and many others) that work as Dom0, that are virtual machine host servers that provide the management environment for the user's virtual machines (DomU). I/O Virtualization with VFIO and SR-IOV. Virtual Function I/O (VFIO) exposes direct device access to user space in a secure memory (IOMMU) protected environment. With VFIO, a VM Guest can directly access hardware devices on the VM Host Server. This technique improves performance, if compared both to Full virtualization and Paravirtualization. However, with VFIO, devices cannot be shared with multiple VM guests. Single Root I/O Virtualization (SR-IOV) combines the performance gains of VFIO and the ability to share a device with several VM Guests (but it requires special hardware that must be capable to appear to two or more VM guests as different devices). Security mechanisms for discretionary and mandatory access control (SELinux, AppArmor, POSIX ACLs, and others). Several types of layered communication protocols (including the Internet protocol suite). Asymmetric multiprocessing via the RPMsg subsystem. Most device drivers and kernel extensions run in kernel space (ring 0 in many CPU architectures), with full access to the hardware. Some exceptions run in user space; notable examples are filesystems based on FUSE/CUSE, and parts of UIO. Furthermore, the X Window System and Wayland, the windowing system and display server protocols that most people use with Linux, do not run within the kernel. Differently, the actual interfacing with GPUs of graphics cards is an in-kernel subsystem called Direct Rendering Manager (DRM). Unlike standard monolithic kernels, device drivers are easily configured as modules, and loaded or unloaded while the system is running and can also be pre-empted under certain conditions in order to handle hardware interrupts correctly and to better support symmetric multiprocessing. By choice, Linux has no stable device driver application binary interface. Linux typically makes use of memory protection and virtual memory and can also handle non-uniform memory access, however the project has absorbed μClinux which also makes it possible to run Linux on microcontrollers without virtual memory. The hardware is represented in the file hierarchy. User applications interact with device drivers via entries in the /dev or /sys directories. Processes information as well are mapped to the file system through the /proc directory. Linux is a clone of UNIX, and aims toward POSIX and Single UNIX Specification compliance. The kernel also provides system calls and other interfaces that are Linux-specific. In order to be included in the official kernel, the code must comply with a set of licensing rules. The Linux Application binary interface (ABI) between the kernel and the user space has four degrees of stability (stable, testing, obsolete, removed); however, the system calls are expected to never change in order to not break the userspace programs that rely on them. Loadable kernel modules (LKMs), by design, cannot rely on a stable ABI. Therefore, they must always be recompiled whenever a new kernel executable is installed in a system, otherwise they will not be loaded. In-tree drivers that are configured to become an integral part of the kernel executable (vmlinux) are statically linked by the building process. There is also no guarantee of stability of source-level in-kernel API and, because of this, device drivers code, as well as the code of any other kernel subsystem, must be kept updated with kernel evolution. Any developer who makes an API change is required to fix any code that breaks as the result of their change. The set of the Linux kernel API that regards the interfaces exposed to user applications is fundamentally composed of UNIX and Linux-specific system calls. A system call is an entry point into the Linux kernel. For example, among the Linux-specific ones there is the family of the clone(2) system calls. Most extensions must be enabled by defining the _GNU_SOURCE macro in a header file or when the user-land code is being compiled. System calls can only be invoked by using assembly instructions which enable the transition from unprivileged user space to privileged kernel space in ring 0. For this reason, the C standard library (libC) acts as a wrapper to most Linux system calls, by exposing C functions that, only whether it is needed, can transparently enter into the kernel which will execute on behalf of the calling process. For those system calls not exposed by libC, e.g. the fast userspace mutex (futex), the library provides a function called syscall(2) which can be used to explicitly invoke them. Pseudo filesystems (e.g., the sysfs and procfs filesystems) and special files (e.g., /dev/random, /dev/sda, /dev/tty, and many others) constitute another layer of interface to kernel data structures representing hardware or logical (software) devices. Because of the differences existing between the hundreds of various implementations of the Linux OS, executable objects, even though they are compiled, assembled, and linked for running on a specific hardware architecture (that is, they use the ISA of the target hardware), often cannot run on different Linux Distributions. This issue is mainly due to distribution-specific configurations and a set of patches applied to the code of the Linux kernel, differences in system libraries, services (daemons), filesystem hierarchies, and environment variables. The main standard concerning application and binary compatibility of Linux distributions is the Linux Standard Base (LSB). However, the LSB goes beyond what concerns the Linux kernel, because it also defines the desktop specifications, the X libraries and Qt that have little to do with it. The LSB version 5 is built upon several standards and drafts (POSIX, SUS, X/Open, File System Hierarchy (FHS), and others). The parts of the LSB largely relevant to the kernel are the General ABI (gABI), especially the System V ABI and the Executable and Linking Format (ELF), and the Processor Specific ABI (psABI), for example the Core Specification for X86-64. The standard ABI for how x86_64 user programs invoke system calls is to load the syscall number into the rax register, and the other parameters into rdi, rsi, rdx, r10, r8, and r9, and finally to put the syscall assembly instruction in the code. There are several kernel internal APIs utilized between the different subsystems. Some are available only within the kernel subsystems, while a somewhat limited set of in-kernel symbols (i.e., variables, data structures, and functions) is exposed also to dynamically loadable modules (e.g., device drivers loaded on demand) whether they're exported with the EXPORT_SYMBOL() and EXPORT_SYMBOL_GPL() macros (the latter reserved to modules released under a GPL-compatible license). Linux provides in-kernel APIs that manipulate data structures (e.g., linked lists, radix trees, red-black trees, queues) or perform common routines (e.g., copy data from and to user space, allocate memory, print lines to the system log, and so on) that have remained stable at least since Linux version 2.6. In-kernel APIs include libraries of low-level common services used by device drivers: SCSI Interfaces and libATA – respectively, a peer-to-peer packet based communication protocol for storage devices attached to USB, SATA, SAS, Fibre Channel, FireWire, ATAPI device, and an in-kernel library to support [S]ATA host controllers and devices. Direct Rendering Manager (DRM) and Kernel Mode Setting (KMS) – for interfacing with GPUs and supporting the needs of modern 3D-accelerated video hardware, and for setting screen resolution, color depth and refresh rate DMA buffers (DMA-BUF) – for sharing buffers for hardware direct memory access across multiple device drivers and subsystems Video4Linux – for video capture hardware Advanced Linux Sound Architecture (ALSA) – for sound cards New API – for network interface controllers mac80211 and cfg80211 – for wireless network interface controllers The Linux developers chose not to maintain a stable in-kernel ABI. Modules compiled for a specific version of the kernel cannot be loaded into another version without being recompiled, assuming that the in-kernel API has remained the same at the source level; otherwise, the module code must also be modified accordingly. Linux creates processes by means of the clone(2) or by the newer clone3(2) system calls. Depending on the given parameters, the new entity can share most or none of the resources of the caller. These syscalls can create new entities ranging from new independent processes (each having a special identifier called TGID within the task_struct data structure in kernel space, although that same identifier is called PID in userspace), to new threads of execution within the calling process (by using the CLONE_THREAD parameter). In this latter case the new entity owns the same TGID of the calling process and consequently has also the same PID in userspace. If the executable is dynamically linked to shared libraries, a dynamic linker (for ELF objects, it is typically /lib/ld-linux.so.2) is used to find and load the needed objects, prepare the program to run and then run it. The Native POSIX Thread Library, simply known as the NPTL, provides the standard POSIX threads interface (pthreads) to userspace. Whenever a new thread is created using the pthread_create(3) POSIX interface, the clone(2) family of system calls must also be given the address of the function that the new thread must jump to. The Linux kernel provides the futex(7) (acronym for "Fast user-space mutexes") mechanisms for fast user-space locking and synchronization; the majority of the operations are performed in userspace but it may be necessary to communicate with the kernel using the futex(2) system call. A very special category of threads is the so-called kernel threads. They must not be confused with the above-mentioned threads of execution of the user's processes. Kernel threads exist only in kernel space and their only purpose is to concurrently run kernel tasks. Differently, whenever an independent process is created, the syscalls return exactly to the next instruction of the same program, concurrently in parent process and in child's one (i.e., one program, two processes). Different return values (one per process) enable the program to know in which of the two processes it is currently executing. Programs need this information because the child process, a few steps after process duplication, usually invokes the execve(2) system call (possibly via the family of exec(3) wrapper functions in glibC) and replace the program that is currently being run by the calling process with a new program, with newly initialized stack, heap, and (initialized and uninitialized) data segments. When it is done, it results in two processes that run two different programs. Depending on the effective user id (euid), and on the effective group id (egid), a process running with user zero privileges (root, the system administrator, owns the identifier 0) can perform everything (e.g., kill all the other processes or recursively wipe out whole filesystems), instead non zero user processes cannot. capabilities(7) divides the privileges traditionally associated with superuser into distinct units, which can be independently enabled and disabled by the parent process or dropped by the child itself. The Linux process scheduler is modular, in the sense that it enables different scheduling classes and policies. Scheduler classes are plugable scheduler algorithms that can be registered with the base scheduler code. Each class schedules different types of processes. The core code of the scheduler iterates over each class in order of priority and chooses the highest priority scheduler that has a schedulable entity of type struct sched_entity ready to run.: 46–47  Entities may be threads, group of threads, and even all the processes of a specific user. Linux provides both user preemption as well as full kernel preemption.: 62–63  Preemption reduces latency, increases responsiveness, and makes Linux more suitable for desktop and real-time applications. For normal tasks, by default, the kernel uses the Completely Fair Scheduler (CFS) class, introduced in the 2.6.23 version of the kernel. Internally this default-scheduler class is defined in a macro of a C header as SCHED_NORMAL. In other POSIX kernels, a similar policy known as SCHED_OTHER allocates CPU timeslices (i.e, it assigns absolute slices of the processor time depending on either predetermined or dynamically computed priority of each process). The Linux CFS does away with absolute timeslices and assigns a fair proportion of CPU time, as a function of parameters like the total number of runnable processes and the time they have already run; this function also takes into account a kind of weight that depends on their relative priorities (nice values).: 46–50  With user preemption, the kernel scheduler can replace the current process with the execution of a context switch to a different one that therefore acquires the computing resources for running (CPU, memory, and more). It makes it according to the CFS algorithm (in particular, it uses a variable called vruntime for sorting entities and then chooses the one that has the smaller vruntime, - i.e., the schedulable entity that has had the least share of CPU time), to the active scheduler policy and to the relative priorities. With kernel preemption, the kernel can preempt itself when an interrupt handler returns, when kernel tasks block, and whenever a subsystem explicitly calls the schedule() function. The kernel also contains two POSIX-compliant real-time scheduling classes named SCHED_FIFO (realtime first-in-first-out) and SCHED_RR (realtime round-robin), both of which take precedence over the default class. An additional scheduling policy known as SCHED DEADLINE, implementing the earliest deadline first algorithm (EDF), was added in kernel version 3.14, released on 30 March 2014. SCHED_DEADLINE takes precedence over all the other scheduling classes. Real-time PREEMPT_RT patches, included into the mainline Linux since version 2.6, provide a deterministic scheduler, the removal of preemption and interrupts disabling (where possible), PI Mutexes (i.e., locking primitives that avoid priority inversion), support for High Precision Event Timers (HPET), preemptive read-copy-update (RCU), (forced) IRQ threads, and other minor features. In 2023, Peter Zijlstra proposed replacing CFS with an earliest eligible virtual deadline first scheduling (EEVDF) scheduler, to prevent the need for CFS "latency nice" patches. The EEVDF scheduler replaced CFS in version 6.6 of the Linux kernel. The kernel has different causes of concurrency (e.g., interrupts, bottom halves, preemption of kernel and users tasks, symmetrical multiprocessing).: 167  For protecting critical regions (sections of code that must be executed atomically), shared memory locations (like global variables and other data structures with global scope), and regions of memory that are asynchronously modifiable by hardware (e.g., having the C volatile type qualifier), Linux provides a large set of tools. They consist of atomic types (which can only be manipulated by a set of specific operators), spinlocks, semaphores, mutexes,: 176–198  and lockless algorithms (e.g., RCUs). Most lock-less algorithms are built on top of memory barriers for the purpose of enforcing memory ordering and prevent undesired side effects due to compiler optimization. PREEMPT_RT code included in mainline Linux provide RT-mutexes, a special kind of Mutex which do not disable preemption and have support for priority inheritance. Almost all locks are changed into sleeping locks when using configuration for realtime operation. Priority inheritance avoids priority inversion by granting a low-priority task which holds a contended lock the priority of a higher-priority waiter until that lock is released. Linux includes a kernel lock validator called Lockdep. The management of the interrupts, although it could be seen as a single job, is divided in two separate parts. This split in two is due to the different time constraints and to the synchronization needs of the tasks whose the management is composed of. The first part is made up of an asynchronous interrupt service routine that in Linux is known as the top half, while the second part is carried out by one of three types of the so-called bottom halves (softirq, tasklets, and work queues).: 133–137  Linux interrupts service routines can be nested (i.e., a new IRQ can trap into a high priority ISR that preempts any other lower priority ISRs). Memory management in Linux is a complex topic. First of all, the kernel is not pageable (i.e., it is always resident in physical memory and cannot be swapped to the disk). In the kernel there is no memory protection (no SIGSEGV signals, unlike in userspace), therefore memory violations lead to instability and system crashes.: 20  Linux implements virtual memory with 4 and 5-levels page tables. As said, only user memory space is always pageable. It maintains information about each page frame of RAM in apposite data structures (of type struct page) that are populated immediately after boots and that are kept until shutdown, regardless of them being or not associated with virtual pages. Furthermore, it classifies all page frames in zones, according to their architecture dependent constraints and intended use. For example, pages reserved for DMA operations are in ZONE_DMA, pages that are not permanently mapped to virtual addresses are in ZONE_HIGHMEM (in x86_32 architecture this zone is for physical addresses above 896 MB, while x86_64 does not need it because x86_64 can permanently map physical pages that reside in higher addresses), and all that remains (with the exception of other less used classifications) is in ZONE_NORMAL. Small chunks of memory can be dynamically allocated via the family of kmalloc() APIs and freed with the appropriate variant of kfree(). vmalloc() and kvfree() are used for large virtually contiguous chunks. alloc_pages() allocates the desired number of entire pages. The kernel includes the SLAB, SLUB and SLOB allocators as configurable alternatives. SLUB is the newest and it is also the default allocator. It aims for simplicity and efficiency, and is PREEMPT_RT compatible. The SLOB allocator was later removed in Linux 6.4, with the SLAB allocator planning on being removed in Linux 6.5, leaving the sole remaining allocator to be SLUB, an allocator that has been available since Linux 2.6. While not originally designed to be portable, Linux is now one of the most widely ported operating system kernels, running on a diverse range of systems from the ARM architecture to IBM z/Architecture mainframe computers. The first port was performed on the Motorola 68000 platform. The modifications to the kernel were so fundamental that Torvalds viewed the Motorola version as a fork and a "Linux-like operating system". However, that moved Torvalds to lead a major restructure of the code to facilitate porting to more computing architectures. The first Linux that, in a single source tree, had code for more than i386 alone, supported the DEC Alpha AXP 64-bit platform. Linux runs as the main operating system on IBM's Summit; as of October 2019[update], all of the world's 500 fastest supercomputers run some operating system based on the Linux kernel, a big change from 1998 when the first Linux supercomputer got added to the list. Linux has also been ported to various handheld devices such as Apple's iPhone 3G and iPod. In 2007, the LKDDb project has been started to build a comprehensive database of hardware and protocols known by Linux kernels. The database is built automatically by static analysis of the kernel sources. Later in 2014, the Linux Hardware project was launched to automatically collect a database of all tested hardware configurations with the help of users of various Linux distributions. Rebootless updates can even be applied to the kernel by using live patching technologies such as Ksplice, kpatch and kGraft. Minimalistic foundations for live kernel patching were merged into the Linux kernel mainline in kernel version 4.0, which was released on 12 April 2015. Those foundations, known as livepatch and based primarily on the kernel's ftrace functionality, form a common core capable of supporting hot patching by both kGraft and kpatch, by providing an application programming interface (API) for kernel modules that contain hot patches and an application binary interface (ABI) for the userspace management utilities. However, the common core included into Linux kernel 4.0 supports only the x86 architecture and does not provide any mechanisms for ensuring function-level consistency while the hot patches are applied. As of April 2015[update], there is ongoing work on porting kpatch and kGraft to the common live patching core provided by the Linux kernel mainline. Kernel bugs present potential security issues. For example, they may allow for privilege escalation or create denial-of-service attack vectors. Over the years, numerous bugs affecting system security were found and fixed. New features are frequently implemented to improve the kernel's security. Capabilities(7) have already been introduced in the section about the processes and threads. Android makes use of them and systemd gives administrators detailed control over the capabilities of processes. Linux offers a wealth of mechanisms to reduce kernel attack surface and improve security which are collectively known as the Linux Security Modules (LSM). They comprise the Security-Enhanced Linux (SELinux) module, whose code has been originally developed and then released to the public by the NSA, and AppArmor among others. SELinux is now actively developed and maintained on GitHub. SELinux and AppArmor provide support to access control security policies, including mandatory access control (MAC), though they profoundly differ in complexity and scope. Another security feature is the Seccomp BPF (SECure COMPuting with Berkeley Packet Filters) which works by filtering parameters and reducing the set of system calls available to user-land applications. Critics have accused kernel developers of covering up security flaws, or at least not announcing them; in 2008, Linus Torvalds responded to this with the following: I personally consider security bugs to be just "normal bugs". I don't cover them up, but I also don't have any reason what-so-ever to think it's a good idea to track them and announce them as something special...one reason I refuse to bother with the whole security circus is that I think it glorifies—and thus encourages—the wrong behavior. It makes "heroes" out of security people, as if the people who don't just fix normal bugs aren't as important. In fact, all the boring normal bugs are way more important, just because there's[sic] a lot more of them. I don't think some spectacular security hole should be glorified or cared about as being any more "special" than a random spectacular crash due to bad locking. Linux distributions typically release security updates to fix vulnerabilities in the Linux kernel. Many offer long-term support releases that receive security updates for a certain Linux kernel version for an extended period of time. Intel None Red Hat Linaro Unknown IBM Consultants Samsung SUSE Google nearly 500 other companies The community of Linux kernel developers comprises about 5000–6000 members. According to the "2017 State of Linux Kernel Development", a study issued by the Linux Foundation, covering the commits for the releases 4.8 to 4.13, about 1500 developers were contributing from about 200–250 companies on average. The top 30 developers contributed a little more than 16% of the code. For companies, the top contributors are Intel (13.1%) and Red Hat (7.2%), Linaro (5.6%), IBM (4.1%), the second and fifth places are held by the 'none' (8.2%) and 'unknown' (4.1%) categories. Instead of a roadmap, there are technical guidelines. Instead of a central resource allocation, there are persons and companies who all have a stake in the further development of the Linux kernel, quite independently from one another: People like Linus Torvalds and I don’t plan the kernel evolution. We don’t sit there and think up the roadmap for the next two years, then assign resources to the various new features. That's because we don’t have any resources. The resources are all owned by the various corporations who use and contribute to Linux, as well as by the various independent contributors out there. It's those people who own the resources who decide... — Andrew Morton, 2005 As with many large open-source software projects, developers are required to adhere to the Contributor Covenant, a code of conduct intended to address harassment of minority contributors. Additionally, to prevent offense the use of inclusive terminology within the source code is mandated. The Linux development community uses Git to manage the source code. Git users clone the latest version of Torvalds' tree with git-clone(1) and keep it up to date using git-pull(1). Contributions are submitted as patches, in the form of text messages on the LKML (and often also on other mailing lists dedicated to particular subsystems). The patches must conform to a set of rules and to a formal language that, among other things, describes which lines of code are to be deleted and what others are to be added to the specified files. These patches can be automatically processed so that system administrators can apply them in order to make just some changes to the code or to incrementally upgrade to the next version. Linux is distributed also in GNU zip (gzip) and bzip2 formats. A developer who wants to change the Linux kernel starts with developing and testing that change. Depending on how significant the change is and how many subsystems it modifies, the change will either be submitted as a single patch or in multiple patches of source code. In case of a single subsystem that is maintained by a single maintainer, these patches are sent as e-mails to the maintainer of the subsystem with the appropriate mailing list in Cc. The maintainer and the readers of the mailing list will review the patches and provide feedback. Once the review process has finished the subsystem maintainer accepts the patches in the relevant Git kernel tree. If the changes to the Linux kernel are bug fixes that are considered important enough, a pull request for the patches will be sent to Torvalds within a few days. Otherwise, a pull request will be sent to Torvalds during the next merge window. The merge window usually lasts two weeks and starts immediately after the release of the previous kernel version. The Git kernel source tree names all developers who have contributed to the Linux kernel in the Credits directory and all subsystem maintainers are listed in Maintainers. Linux is written in a special C programming language supported by GCC, a compiler that extends the C standard in many ways, for example using inline sections of code written in the assembly language (in GCC's "AT&T-style" syntax) of the target architecture. Since 2002 all the code must adhere to the 21 rules comprising the Linux Kernel Coding Style. In September 2021, the GCC version requirement for compiling and building the Linux kernel increased from GCC 4.9 to 5.1, allowing the potential for the kernel to be moved from using C code based on the C89 standard to using code written with the C11 standard, with the migration to the standard taking place in March 2022, with the release of Linux 5.18. Initial support for the Rust programming language was added in Linux 6.1 which was released in December 2022, with later kernel versions, such as Linux 6.2 and Linux 6.3, further improving the support. The GNU Compiler Collection (GCC or GNU cc) is the default compiler for the mainline Linux sources and it is invoked by a utility called make. Then, the GNU Assembler (more often called GAS or GNU as) outputs the object files from the GCC generated assembly code. Finally, the GNU Linker (GNU ld) is used to produce a statically linked executable kernel file called vmlinux. Both as and ld are part of GNU Binary Utilities (binutils). The above-mentioned tools are collectively known as the GNU toolchain. GCC was for a long time the only compiler capable of correctly building Linux. In 2004, Intel claimed to have modified the kernel so that its C compiler was also capable of compiling it. There was another such reported success in 2009, with a modified 2.6.22 version. Support for the Intel compiler has been dropped in 2023. Since 2010, effort has been underway to build Linux with Clang, an alternative compiler for the C language; as of 12 April 2014, the official kernel could almost be compiled by Clang. The project dedicated to this effort is named LLVMLinux after the LLVM compiler infrastructure upon which Clang is built. LLVMLinux does not aim to fork either Linux or the LLVM, therefore it is a meta-project composed of patches that are eventually submitted to the upstream projects. By enabling Linux to be compiled by Clang, developers may benefit from shorter compilation times. In 2017, developers completed upstreaming patches to support building the Linux kernel with Clang in the 4.15 release, having backported support for X86-64 and AArch64 to the 4.4, 4.9, and 4.14 branches of the stable kernel tree. Google's Pixel 2 shipped with the first Clang built Linux kernel, though patches for Pixel (1st generation) did exist. 2018 saw ChromeOS move to building kernels with Clang by default, while Android (operating system) made Clang and LLVM's linker LLD required for kernel builds in 2019. Google moved its production kernel used throughout its datacenters to being built with Clang in 2020. Today, the ClangBuiltLinux group coordinates fixes to both Linux and LLVM to ensure compatibility, both composed of members from LLVMLinux and having upstreamed patches from LLVMLinux. Bugs involving the Linux Kernel can be difficult to troubleshoot. This is because of the kernel's interaction with userspace and hardware; and also because they might be caused from a wider range of reasons compared to those of user programs. A few examples of the underlying causes are semantic errors in code, misuse of synchronization primitives, and incorrect hardware management.: 364  A report of a non-fatal bug in the kernel is called an "oops"; such deviations from correct behavior of the Linux kernel may allow continued operation with compromised reliability. A critical and fatal error is reported via the panic() function. It prints a message and then halts the kernel.: 371  One of the most common techniques used to find out bugs in code is debugging by printing. For this purpose Linux provides an in-kernel API called printk() which stores messages in a circular buffer. The syslog(2) system call is used for reading and/or clearing the kernel message ring buffer and for setting the maximum log level of the messages to be sent to the console (i.e., one of the eight KERN_* parameters of printk(), which tell the severity of the condition reported); usually it is invoked via the glibC wrapper klogctl(3). Kernel messages are also exported to userland through the /dev/kmsg interface (e.g., systemd-journald reads that interface and by default append the messages to /var/log/journal). Another fundamental technique for debugging a running kernel is tracing. The ftrace mechanism is a Linux internal tracer; it is used for monitoring and debugging Linux at runtime and it can also analyze user space latencies due to kernel misbehavior. Furthermore, ftrace allows users to trace Linux at boot-time. kprobes and kretprobes can break (like debuggers in userspace) into Linux and non-disruptively collect information. kprobes can be inserted into code at (almost) any address, while kretprobes work at function return. uprobes have similar purposes but they also have some differences in usage and implementation. With KGDB Linux can be debugged in much the same way as userspace programs. KGDB requires an additional machine that runs GDB and that is connected to the target to be debugged using a serial cable or Ethernet. The Linux kernel project integrates new code on a rolling basis. Software checked into the project must work and compile without error. Each kernel subsystem is assigned a maintainer who is responsible for reviewing patches against the kernel code standards and keeps a queue of patches that can be submitted to Linus Torvalds within a merge window of several weeks. Patches are merged by Torvalds into the source code of the prior stable Linux kernel release, creating the -rc release candidate for the next stable kernel. Once the merge window is closed only fixes to the new code in the development release are accepted. The -rc development release of the kernel goes through regression tests and once it is judged to be stable by Torvalds and the kernel subsystem maintainers a new Linux kernel is released and the development process starts all over again. Developers who feel treated unfairly can report this to the Linux Foundation's Technical Advisory Board. In July 2013, the maintainer of the USB 3.0 driver Sage Sharp asked Torvalds to address the abusive commentary in the kernel development community. In 2014, Sharp backed out of Linux kernel development, saying that "The focus on technical excellence, in combination with overloaded maintainers, and people with different cultural and social norms, means that Linux kernel maintainers are often blunt, rude, or brutal to get their job done". At the linux.conf.au (LCA) conference in 2018, developers expressed the view that the culture of the community has gotten much better in the past few years. Daniel Vetter, the maintainer of the Intel drm/i915 graphics kernel driver, commented that the "rather violent language and discussion" in the kernel community has decreased or disappeared. Laurent Pinchart asked developers for feedback on their experience with the kernel community at the 2017 Embedded Linux Conference Europe. The issues brought up were discussed a few days later at the Maintainers Summit. Concerns over the lack of consistency in how maintainers responded to patches submitted by developers were echoed by Shuah Khan, the maintainer of the kernel self-test framework. Torvalds contended that there would never be consistency in the handling of patches because different kernel subsystems have, over time, adopted different development processes. Therefore, it was agreed upon that each kernel subsystem maintainer would document the rules for patch acceptance. The Git tree of Linus Torvalds that contains the Linux kernel is referred to as mainline Linux. Every stable kernel release originates from the mainline tree, and is frequently published on kernel.org. Mainline Linux has only solid support for a small subset of the many devices that run Linux. Non-mainline support is provided by independent projects, such as Yocto or Linaro, but in many cases the kernel from the device vendor is needed. Using a vendor kernel likely requires a board support package. Maintaining a kernel tree outside of mainline Linux has proven to be difficult. Mainlining refers to the effort of adding support for a device to the mainline kernel, while there was formerly only support in a fork or no support at all. This usually includes adding drivers or device tree files. When this is finished, the feature or security fix is considered mainlined. The maintainer of the stable branch, Greg Kroah-Hartman, has applied the term Linux-like to downstream kernel forks by vendors that add millions of lines of code to the mainline kernel. In 2019, Google stated that they wanted to use the mainline Linux kernel in Android so the number of kernel forks would be reduced. The term Linux-like has also been applied to the Embeddable Linux Kernel Subset, which does not include the full mainline Linux kernel but a small modified subset of the code. There are certain communities that develop kernels based on the official Linux. Some interesting bits of code from these forks that include Linux-libre, Compute Node Linux, INK, L4Linux, RTLinux, and User-Mode Linux (UML) have been merged into the mainline. Some operating systems developed for mobile phones initially used heavily modified versions of Linux, including Google Android, Firefox OS, HP webOS, Nokia Maemo and Jolla Sailfish OS. In 2010, the Linux community criticised Google for effectively starting its own kernel tree: This means that any drivers written for Android hardware platforms, can not get merged into the main kernel tree because they have dependencies on code that only lives in Google's kernel tree, causing it to fail to build in the kernel.org tree. Because of this, Google has now prevented a large chunk of hardware drivers and platform code from ever getting merged into the main kernel tree. Effectively creating a kernel branch that a number of different vendors are now relying on. — Greg Kroah-Hartman, 2010 Today Android uses a customized Linux where major changes are implemented in device drivers, but some changes to the core kernel code is required. Android developers also submit patches to the official Linux that finally can boot the Android operating system. For example, a Nexus 7 can boot and run the mainline Linux. At a 2001 presentation at the Computer History Museum, Linus Torvalds had this to say in response to a question about distributions of Linux using precisely the same kernel sources or not: They're not... well they are, and they're not. There is no single kernel. Every single distribution has their own changes. That's been going on since pretty much day one. I don't know if you may remember Yggdrasil was known for having quite extreme changes to the kernel and even today all of the major vendors have their own tweaks because they have some portion of the market they're interested in and quite frankly that's how it should be. Because if everybody expects one person, me, to be able to track everything that's not the point of GPL. That's not the point of having an open system. So actually the fact that a distribution decides that something is so important to them that they will add patches for even when it's not in the standard kernel, that's a really good sign for me. So that's for example how something like ReiserFS got added. And the reason why ReiserFS is the first journaling filesystem that was integrated in the standard kernel was not because I love Hans Reiser. It was because SUSE actually started shipping with ReiserFS as their standard kernel, which told me "ok." This is actually in production use. Normal People are doing this. They must know something I don't know. So in a very real sense what a lot of distribution houses do, they are part of this "let's make our own branch" and "let's make our changes to this." And because of the GPL, I can take the best portions of them. — Linus Torvalds, 2001 There have been several notable conflicts among Linux kernel developers. Examples of such conflicts are: In July 2007, Con Kolivas announced that he would cease developing for the Linux kernel. In July 2009, Alan Cox quit his role as the TTY layer maintainer after disagreement with Linus Torvalds. In December 2010, there was a discussion between Linux SCSI maintainer James Bottomley and SCST maintainer Vladislav Bolkhovitin about which SCSI target stack should be included in the Linux kernel. This made some Linux users upset. In June 2012, Torvalds made it very clear that he did not agree with NVIDIA releasing its drivers as closed. In April 2014, Torvalds banned Kay Sievers from submitting patches to the Linux kernel for failing to deal with bugs that caused systemd to negatively interact with the kernel. In October 2014, Lennart Poettering accused Torvalds of tolerating the rough discussion style on Linux kernel related mailing lists and of being a bad role model. In March 2015, Christoph Hellwig filed a lawsuit against VMware for infringement of the copyright on the Linux kernel. Linus Torvalds made it clear that he did not agree with this and similar initiatives by calling lawyers a festering disease. In April 2021, a team from the University of Minnesota was found to be submitting "bad faith" patches to the kernel as part of their research. This resulted in the immediate reversion of all patches ever submitted by a member of the university. In addition, a warning was issued by a senior maintainer that any future patch from the university would be rejected on sight. Prominent Linux kernel developers have been aware of the importance of avoiding conflicts between developers. For a long time there was no code of conduct for kernel developers due to opposition by Linus Torvalds. However, a Linux Kernel Code of Conflict was introduced on 8 March 2015. It was replaced on 16 September 2018 by a new Code of Conduct based on the Contributor Covenant. This coincided with a public apology by Torvalds and a brief break from kernel development. On 30 November 2018, complying with the Code of Conduct, Jarkko Sakkinen of Intel sent out patches replacing instances of "fuck" appearing in source code comments with suitable versions focused on the word 'hug'. As of 2021[update], the 5.11 release of the Linux kernel had around 30.34 million lines of code. Roughly 14% of the code is part of the "core" (arch, kernel and mm directories), while 60% is drivers. Linux is evolution, not intelligent design! — Linus Torvalds, 2005 The cost to redevelop version 2.6.0 of the Linux kernel in a traditional proprietary development setting has been estimated to be US$612 million (€467M, £394M) in 2004 prices using the COCOMO person-month estimation model. In 2006, a study funded by the European Union put the redevelopment cost of kernel version 2.6.8 higher, at €882M ($1.14bn, £744M). This topic was revisited in October 2008 by Amanda McPherson, Brian Proffitt, and Ron Hale-Evans. Using David A. Wheeler's methodology, they estimated redevelopment of the 2.6.25 kernel now costs $1.3bn (part of a total $10.8bn to redevelop Fedora 9). Again, Garcia-Garcia and Alonso de Magdaleno from University of Oviedo (Spain) estimate that the value annually added to kernel was about €100M between 2005 and 2007 and €225M in 2008, it would cost also more than €1bn (about $1.4bn as of February 2010) to develop in the European Union. As of 7 March 2011[update], using then-current LOC (lines of code) of a 2.6.x Linux kernel and wage numbers with David A. Wheeler's calculations it would cost approximately $3bn (about €2.2bn) to redevelop the Linux kernel as it keeps getting bigger. An updated calculation as of 26 September 2018[update], using then-current 20,088,609 LOC (lines of code) for the 4.14.14 Linux kernel and the current US national average programmer salary of $75,506 show it would cost approximately $14,725,449,000 dollars (£11,191,341,000) to rewrite the existing code. The latest kernel version and older kernel versions are maintained separately. Most latest kernel releases were supervised by Linus Torvalds. The Linux kernel developer community maintains a stable kernel by applying fixes for software bugs that have been discovered during the development of the subsequent stable kernel. Therefore, www.kernel.org will always list two stable kernels. The next stable Linux kernel is now released only 8 to 12 weeks later. Therefore, the Linux kernel maintainers have designated some stable kernel releases as longterm, these long-term support Linux kernels are updated with bug fixes for two or more years. As of February 2022[update], there are six longterm Linux kernels: 5.15.23, 5.10.100, 5.4.179, 4.19.229, 4.14.266, and 4.9.301. The full list of releases is at Linux kernel version history. Most Linux users run a kernel supplied by their Linux distribution. Some distributions ship the "vanilla" or "stable" kernels. However, several Linux distribution vendors (such as Red Hat and Debian) maintain another set of Linux kernel branches which are integrated into their products. These are usually updated at a slower pace compared to the "vanilla" branch, and they usually include all fixes from the relevant "stable" branch, but at the same time they can also add support for drivers or features which had not been released in the "vanilla" version the distribution vendor started basing their branch from. Initially, Torvalds released Linux under a license which forbade any commercial use. This was changed in version 0.12 by a switch to the GNU General Public License version 2 (GPLv2). This license allows distribution and sale of possibly modified and unmodified versions of Linux but requires that all those copies be released under the same license and be accompanied by - or that, on request, free access is given to - the complete corresponding source code. Torvalds has described licensing Linux under the GPLv2 as the "best thing I ever did". The Linux kernel is licensed explicitly under GNU General Public License version 2 only (GPL-2.0-only) with an explicit syscall exception (Linux-syscall-note), without offering the licensee the option to choose any later version, which is a common GPL extension. Contributed code must be available under GPL-compatible license. There was considerable debate about how easily the license could be changed to use later GPL versions (including version 3), and whether this change is even desirable. Torvalds himself specifically indicated upon the release of version 2.4.0 that his own code is released only under version 2. However, the terms of the GPL state that if no version is specified, then any version may be used, and Alan Cox pointed out that very few other Linux contributors had specified a particular version of the GPL. In September 2006, a survey of 29 key kernel programmers indicated that 28 preferred GPLv2 to the then-current GPLv3 draft. Torvalds commented, "I think a number of outsiders... believed that I personally was just the odd man out because I've been so publicly not a huge fan of the GPLv3." This group of high-profile kernel developers, including Torvalds, Greg Kroah-Hartman and Andrew Morton, commented on mass media about their objections to the GPLv3. They referred to clauses regarding DRM/tivoization, patents, "additional restrictions" and warned a Balkanisation of the "Open Source Universe" by the GPLv3. Linus Torvalds, who decided not to adopt the GPLv3 for the Linux kernel, reiterated his criticism even years later. It is debated whether some loadable kernel modules (LKMs) are to be considered derivative works under copyright law, and thereby whether or not they fall under the terms of the GPL. In accordance with the license rules, LKMs using only a public subset of the kernel interfaces are non-derived works, thus Linux gives system administrators the mechanisms to load out-of-tree binary objects into the kernel address space. There are some out-of-tree loadable modules that make legitimate use of the dma_buf kernel feature. GPL compliant code can certainly use it. However, a different possible use case would be Nvidia Optimus that pairs a fast GPU with an Intel integrated GPU, where the Nvidia GPU writes into the Intel framebuffer when it is active. But, Nvidia cannot use this infrastructure because it necessitates bypassing a rule that can only be used by LKMs that are also GPL. Alan Cox replied on LKML, rejecting a request from one of their engineers to remove this technical enforcement from the API. Torvalds clearly stated on the LKML that "[I] claim that binary-only kernel modules ARE derivative "by default"'". On the other hand, Torvalds has also said that "[one] gray area in particular is something like a driver that was originally written for another operating system (i.e., clearly not a derived work of Linux in origin). THAT is a gray area, and _that_ is the area where I personally believe that some modules may be considered to not be derived works simply because they weren't designed for Linux and don't depend on any special Linux behaviour". Proprietary graphics drivers, in particular, are heavily discussed. Whenever proprietary modules are loaded into Linux, the kernel marks itself as being "tainted", and therefore bug reports from tainted kernels will often be ignored by developers. The official kernel, that is the Linus git branch at the kernel.org repository, contains binary blobs released under the terms of the GNU GPLv2 license. Linux can also search filesystems to locate binary blobs, proprietary firmware, drivers, or other executable modules, then it can load and link them into kernel space. When it is needed (e.g., for accessing boot devices or for speed) firmware can be built-in to the kernel, this means building the firmware into vmlinux; however this is not always a viable option for technical or legal issues (e.g., it is not permitted to do this with firmware that is non-GPL compatible, although this is quite common nonetheless). Linux is a registered trademark of Linus Torvalds in the United States, the European Union, and some other countries. A legal battle over the trademark began in 1996, when William Della Croce, a lawyer who was never involved in the development of Linux, started requesting licensing fees for the use of the word Linux. After it was proven that the word was in common use long before Della Croce's claimed first use, the trademark was awarded to Torvalds. Linux portal Free and open-source software portal Operating system – Software that manages computer hardware resources Kernel – Core of a computer operating system Monolithic Kernel – Type of kernel computer program Microkernel – Kernel that provides fewer services than a traditional kernel Linux kernel version history – Version history of the Linux kernel Comparison of operating systems Comparison of operating system kernels Linux – Family of Unix-like operating systems Minix 3 – Unix-like operating system macOS – Operating system for Apple computers Microsoft Windows – Computer operating systems As a whole, Linux source is provided under the terms of the GPL-2.0-only license with an explicit syscall exception. Aside from that, individual files can be provided under a different license which is required to be compatible with the GPL-2.0-only license (i.e., the GNU General Public License version 2) or a dual license, with one of the choices being the GPL version 2 or a GPLv2 compatible license. "Linux Logos and Mascots". Linux Online. 2008. Archived from the original on 15 August 2010. Retrieved 11 August 2009. Sasha Levin (26 March 2024). "Linux 6.8.2". Retrieved 27 March 2024. Linus Torvalds (31 March 2024). "Linux 6.9-rc2". Retrieved 31 March 2024. Bergmann, Arnd (3 March 2022). "Kbuild: move to -std=gnu11". git.kernel.org. Proven, Liam. "Linux 6.1: Rust to hit mainline kernel". The Register. Retrieved 12 May 2023. "COPYING". git.kernel.org. Archived from the original on 2 September 2021. Retrieved 2 September 2021. "GPL-2.0-only". spdx.org. Retrieved 2 September 2021. "Linux-syscall-note". spdx.org. Retrieved 2 September 2021. "GPL-2.0". git.kernel.org. "Linux-syscall-note". git.kernel.org. "Linux kernel licensing rules — The Linux Kernel documentation". www.kernel.org. Archived from the original on 7 March 2020. Retrieved 6 January 2020. Love, Robert (2010). Linux kernel development (3rd ed.). Upper Saddle River, NJ: Addison-Wesley. ISBN 978-0-672-32946-3. OCLC 268788260. "TOP500 Supercomputer Sites: Operating system Family / Linux". Top500.org. Archived from the original on 19 November 2012. Retrieved 5 October 2019. "Kernel Build System — The Linux Kernel documentation". Kernel.org. Archived from the original on 22 July 2020. Retrieved 17 July 2020. "Kconfig make config — The Linux Kernel documentation". Kernel.org. Archived from the original on 17 July 2020. Retrieved 13 September 2020. "KernelBuild - Linux Kernel Newbies". kernelnewbies.org. Archived from the original on 19 October 2020. Retrieved 13 September 2020. "The Sysctl Interface". Linux.it. Archived from the original on 17 February 2020. Retrieved 13 September 2020. "sysctl(8) - Linux manual page". man7.org. Archived from the original on 30 September 2020. Retrieved 13 September 2020. "procfs(5) - Linux manual page". man7.org. Archived from the original on 24 September 2020. Retrieved 13 September 2020. "C Extensions (Using the GNU Compiler Collection (GCC))". gcc.gnu.org. Archived from the original on 20 November 2020. Retrieved 13 November 2020. Richardson, Marjorie (1 November 1999). "Interview: Linus Torvalds". Linux Journal. Archived from the original on 14 May 2011. Retrieved 20 August 2009. Torvalds, Linus Benedict (26 August 1991). "What would you like to see most in minix?". Newsgroup: comp.os.minix. Usenet: 1991Aug25.205708.9541@klaava.Helsinki.FI. Archived from the original on 9 May 2013. Retrieved 14 September 2016. Welsh, Matt; Dalheimer, Matthias Kalle; Kaufman, Lar (1999). "1: Introduction to Linux". Running Linux (3rd ed.). Sebastopol, California: O'Reilly Media, Inc. p. 5. ISBN 1-56592-976-4. OCLC 50638246. "Free minix-like kernel sources for 386-AT - Google Groups". groups.google.com. 5 October 1991. Archived from the original on 1 March 2021. Retrieved 19 March 2020. Williams, Sam (March 2002). "Chapter 9: The GNU General Public License". Free as in Freedom: Richard Stallman's Crusade for Free Software. O'Reilly. ISBN 0-596-00287-4. Retrieved 12 November 2010. "Explaining BSD". FreeBSD Documentation Portal. Retrieved 6 October 2023. Christine Bresnahan & Richard Blum (2016). LPIC-2: Linux Professional Institute Certification Study Guide: Exam 201 and Exam 202. John Wiley & Sons. p. 107. ISBN 9781119150794. Torvalds, Linus. "Release Notes for Linux v0.12". The Linux Kernel Archives. Archived from the original on 19 August 2007. Retrieved 21 February 2007. Fred Hantelmann (2016). LINUX Start-up Guide: A self-contained introduction. Springer Science & Business Media. p. 1. ISBN 9783642607493. Fred Hantelmann (2016). LINUX Start-up Guide: A self-contained introduction. Springer Science & Business Media. p. 16. ISBN 9783642607493. Summers, David W. (19 January 1992). "Troubles with Partitions". Newsgroup: alt.os.linux. Usenet: 1992Jan19.085628.18752@cseg01.uark.edu. Archived from the original on 2 June 2013. Retrieved 7 January 2007. Clegg, Alan B. (31 March 1992). "It's here!". Newsgroup: comp.os.linux. Usenet: 1992Mar31.131811.19832@rock.concert.net. Archived from the original on 2 June 2013. Retrieved 7 January 2007. "Appendix A: The Tanenbaum-Torvalds Debate". Open Sources: Voices from the Open Source Revolution. O'Reilly. 1999. ISBN 1-56592-582-3. Retrieved 22 November 2006. Tanenbaum, Andy (29 January 1992). "LINUX is obsolete". Newsgroup: comp.os.minix. Usenet: 12595@star.cs.vu.nl. Archived from the original on 17 October 2011. Retrieved 10 May 2006. Tanenbaum, Andy (12 May 2006). "Tanenbaum-Torvalds Debate: Part II". VU University Amsterdam. Archived from the original on 5 August 2015. Retrieved 6 January 2007. Hayward, David (22 November 2012). "The history of Linux: how time has shaped the penguin". TechRadar. Archived from the original on 19 March 2020. Retrieved 19 March 2020. Hayward, David (22 November 2012). "The history of Linux: how time has shaped the penguin". TechRadar. Archived from the original on 19 March 2020. Retrieved 26 March 2020. "How the development process works — The Linux Kernel documentation". Kernel.org. Archived from the original on 9 December 2017. Retrieved 26 March 2020. Christine Bresnahan & Richard Blum (2016). LPIC-2: Linux Professional Institute Certification Study Guide: Exam 201 and Exam 202. John Wiley & Sons. p. 108. ISBN 9781119150794. Torvalds, Linus (9 June 1996). "Linux 2.0 really _is_ released." LKML (Mailing list). Archived from the original on 2 April 2015. Retrieved 8 March 2015. Torvalds, Linus (20 January 1999). "2.2.0-final". LKML (Mailing list). Archived from the original on 2 April 2015. Retrieved 8 March 2015. "The Wonderful World of Linux 2.2". 26 January 1999. Archived from the original on 6 November 2014. Retrieved 27 October 2008. "Linux/390 Observations and Notes". linuxvm.org. Archived from the original on 26 February 2019. Retrieved 29 March 2020. Torvalds, Linus (4 January 2001). "And oh, btw." LKML (Mailing list). Archived from the original on 26 January 2016. Retrieved 8 March 2015. "The Wonderful World of Linux 2.4". Archived from the original on 17 March 2005. Retrieved 27 October 2008. Torvalds, Linus (17 December 2003). "Linux 2.6.0". LKML (Mailing list). Archived from the original on 2 April 2015. Retrieved 28 February 2015. "proc(5) - Linux manual page" (see /proc/sys/kernel/pid_max). Archived from the original on 7 February 2014. Retrieved 19 February 2014. "btrfs Wiki". btrfs.wiki.kernel.org. Archived from the original on 25 April 2012. Retrieved 17 July 2020. Fred Hantelmann (2016). LINUX Start-up Guide: A self-contained introduction. Springer Science & Business Media. pp. 1–2. ISBN 9783642607493. Kroah-Hartman, Greg (3 August 2006). "Adrian Bunk is now taking over the 2.6.16-stable branch". LKML (Mailing list). Archived from the original on 26 January 2016. Retrieved 21 February 2015. Rothwell, Stephen (12 February 2008). "Announce: Linux-next (Or Andrew's dream :-))". LKML (Mailing list). Archived from the original on 24 November 2010. Retrieved 30 October 2010. Corbet, Jonathan (21 October 2010). "linux-next and patch management process". LWN.net. Eklektix, Inc. Archived from the original on 21 June 2010. Retrieved 30 October 2010. "The Linux Kernel Archives". Kernel.org. Archived from the original on 30 January 1998. Retrieved 22 January 2014. Linux Kernel Mailing List (17 June 2005). "Linux 2.6.12". git-commits-head (Mailing list). Archived from the original on 26 January 2016. Retrieved 23 January 2008. "Index of /pub/linux/kernel/v2.6". Kernel.org. Archived from the original on 10 February 2014. Retrieved 2 March 2014. "Add a personality to report 2.6.x version numbers [LWN.net]". lwn.net. Archived from the original on 16 July 2020. Retrieved 15 July 2020. Torvalds, Linus (21 July 2011). "Linux 3.0 release". Linux kernel mailing list. Archived from the original on 18 October 2019. Retrieved 16 May 2013. Torvalds, Linus (30 May 2011). "Linux 3.0-rc1". LKML (Mailing list). Archived from the original on 31 May 2011. Retrieved 1 July 2013. Vaughan-Nichols, Steven J. (13 December 2012). "Good-Bye 386: Linux to drop support for i386 chips with next major release". ZDNet. CBS Interactive. Archived from the original on 17 February 2015. Retrieved 6 February 2013. Fingas, Jon (15 December 2012). "Linux to drop i386 support in the 3.8 kernel, make us upgrade our Doom rig". Engadget. AOL. Archived from the original on 2 April 2015. Retrieved 22 March 2015. Vaughan-Nichols, Steven J. (11 December 2012). "Linux 3.7 arrives, ARM developers rejoice". ZDNet. CBS Interactive. Archived from the original on 5 November 2014. Retrieved 6 February 2013. Torvalds, Linus (2 September 2013). "Linux 3.11". LKML (Mailing list). Archived from the original on 26 February 2014. Retrieved 3 September 2013. "Linux 3.11". kernelnewbies.org. 2 September 2013. Retrieved 21 January 2014. Torvalds, Linus (12 April 2015). "Linux 4.0 released". LKML (Mailing list). Archived from the original on 13 April 2015. Retrieved 12 April 2015. "The Linux Foundation Releases Linux Development Report". Linux Foundation. 18 February 2015. Archived from the original on 19 July 2016. Retrieved 20 February 2015. Michael Larabel (23 June 2014). "Linux Kernel At 19.5 Million Lines Of Code, Continues Rising". Phoronix. Archived from the original on 23 November 2020. Retrieved 23 June 2015. Corbet, Jonathan (3 August 2020). "Some statistics from the 5.8 kernel cycle". LWN - Linux Weekly News. Archived from the original on 4 September 2020. Retrieved 11 August 2020. "Stack Overflow Developer Survey 2019 - most popular technologies". Stack Overflow. Archived from the original on 8 October 2020. Retrieved 17 March 2020. "Stack Overflow Developer Survey 2019 - development environments and tools". Stack Overflow. Archived from the original on 7 March 2020. Retrieved 17 March 2020. "Usage Statistics and Market Share of Operating Systems for Websites, March 2020". w3techs.com. Retrieved 17 March 2020. "Usage Statistics and Market Share of Unix for Websites, March 2020". w3techs.com. Retrieved 17 March 2020. "TOP500 Supercomputer Sites: Operating system Family / Linux". Top500.org. Archived from the original on 19 November 2012. Retrieved 5 October 2019. "Gartner Says Sales of Tablets Will Represent Less Than 10 Percent of All Devices in 2014" (Press release). Egham, UK: Gartner. 15 October 2014. Archived from the original on 17 October 2014. Retrieved 19 October 2014. Lunden, Ingrid (15 October 2014). "Tablet Sales Growth Plummets In 2014 As Android Smartphones Continue To Soar: Gartner". TechCrunch. AOL. Archived from the original on 23 October 2014. Retrieved 23 October 2014. "Global PC Shipments Exceed Forecast with Mild Improvement in Consumer Demand, While Apple Moves to #5 Spot, According to IDC" (Press release). Framingham, MA: IDC. 8 October 2014. Archived from the original on 11 October 2014. Retrieved 19 October 2014. "README". git.kernel.org. Archived from the original on 24 July 2012. Retrieved 24 March 2021. "sched(7) - Linux manual page". man7.org. Archived from the original on 17 July 2020. Retrieved 27 July 2020. "FAQ: Preemption". kernelnewbies.org. 22 August 2009. Archived from the original on 7 August 2020. Retrieved 7 May 2015. Jonathan Corbet (24 February 2003). "Driver porting: the preemptible kernel". LWN.net. Archived from the original on 10 August 2020. Retrieved 7 May 2015. Molnár, Ingo (13 April 2007). "[patch] Modular Scheduler Core and Completely Fair Scheduler [CFS]". LKML (Mailing list). Archived from the original on 3 November 2020. Retrieved 30 March 2020. "Completely Fair Scheduler | Linux Journal". Linuxjournal.com. Archived from the original on 3 August 2020. Retrieved 30 March 2020. "ioctl(2) - Linux manual page". man7.org. Archived from the original on 20 July 2020. Retrieved 11 August 2020. "aio(7) - Linux manual page". man7.org. Archived from the original on 12 April 2020. Retrieved 11 August 2020. "io_setup(2) - Linux manual page". man7.org. Archived from the original on 20 August 2020. Retrieved 11 August 2020. "KVM". Linux-kvm.org. Archived from the original on 28 March 2020. Retrieved 29 March 2020. "TechComparison - Linux Virtualization Wiki". Virt.kernelnewbies.org. Archived from the original on 3 August 2020. Retrieved 29 March 2020. "Virtualization_support_through_KVM in Linux_2_6_20 - Linux Kernel Newbies". Kernelnewbies.org. Archived from the original on 29 November 2019. Retrieved 29 March 2020. Coekaerts, Wim. "Linux mainline contains all the Xen code bits for Dom0 and DomU support". blogs.oracle.com. Archived from the original on 3 August 2020. Retrieved 29 March 2020. "Xen celebrates full Dom0 and DomU support in Linux 3.0 – blog.xen.org". 7 June 2011. Archived from the original on 7 June 2011. Retrieved 29 March 2020. Wilk, Konrad Rzeszutek (31 January 2014). "Linux 3.14 and PVH". Xen Project. Archived from the original on 29 March 2020. Retrieved 29 March 2020. "Introduction to Xen Virtualization | Virtualization Guide | openSUSE Leap 15.2". doc.opensuse.org. Archived from the original on 28 September 2020. Retrieved 29 September 2020. "Virtualization technology | Virtualization Guide | openSUSE Leap 15.3". doc.opensuse.org. Retrieved 30 September 2021. "SELinux Project". GitHub. Archived from the original on 12 December 2019. Retrieved 10 January 2020. "AppArmor — The Linux Kernel documentation". Kernel.org. Archived from the original on 8 May 2020. Retrieved 10 January 2020. Jake Edge (25 November 2008). "Character devices in user space". LWN.net. Archived from the original on 26 January 2021. Retrieved 7 May 2015. Jonathan Corbet (2 May 2007). "UIO: user-space drivers". LWN.net. Archived from the original on 11 November 2020. Retrieved 7 May 2015. "stable-api-nonsense - Linux kernel source tree". git.kernel.org. Archived from the original on 5 March 2021. Retrieved 18 April 2020. Gorman, Mel (15 February 2004). Understanding the Linux Virtual Memory Manager (PDF). Prentice Hall. p. 26. ISBN 0-13-145348-3. Archived (PDF) from the original on 3 May 2019. Retrieved 27 January 2020. Greg Ungerer. "uClinux mainline Announcement". Archived from the original on 31 October 2007. Retrieved 15 January 2008. Nguyen, Binh (30 July 2004). "Linux Filesystem Hierarchy: Chapter 1. Linux Filesystem Hierarchy". The Linux Documentation Project. Archived from the original on 2 December 2020. Retrieved 28 November 2012. "Admin Guide README". Kernel.org git repositories. "Linux kernel release 5.x — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 4 January 2020. "README\ABI\Documentation - kernel/git/torvalds/linux.git - Linux kernel source tree". git.kernel.org. Archived from the original on 1 October 2020. Retrieved 18 April 2020. "syscalls\stable\ABI\Documentation - kernel/git/torvalds/linux.git - Linux kernel source tree". git.kernel.org. Archived from the original on 2 October 2020. Retrieved 18 April 2020. "1.Intro.rst - Documentation/process/1.Intro.rst - Linux source code (v5.8) - Bootlin". elixir.bootlin.com. Retrieved 8 August 2020. "syscalls". man7. Archived from the original on 15 January 2020. Retrieved 28 January 2020. "intro(2) - Linux manual page". man7.org. Archived from the original on 17 July 2020. Retrieved 16 July 2020. "clone". man7.org. Archived from the original on 18 January 2020. Retrieved 28 January 2020. "feature_test_macros". man7.org. Archived from the original on 19 January 2020. Retrieved 28 January 2020. "vdso(7) - Linux manual page". man7.org. Archived from the original on 2 February 2020. Retrieved 2 February 2020. "futex(2) - Linux manual page". man7.org. Archived from the original on 31 January 2020. Retrieved 2 February 2020. "syscall(2) - Linux manual page". man7.org. Archived from the original on 21 January 2020. Retrieved 2 February 2020. "sysfs(5) - Linux manual page". man7.org. Archived from the original on 18 January 2020. Retrieved 6 January 2020. "Rules on how to access information in sysfs — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 6 January 2020. "Linux Foundation Referenced Specifications". refspecs.linuxbase.org. Retrieved 3 February 2020. "LSB Specifications". refspecs.linuxbase.org. Retrieved 3 February 2020. "Linux Standard Base Desktop Specification, Generic Part". refspecs.linuxbase.org. Retrieved 3 February 2020. "Normative References". refspecs.linuxfoundation.org. Archived from the original on 12 August 2020. Retrieved 3 February 2020. "Linux Standard Base Core Specification, Generic Part". refspecs.linuxfoundation.org. Archived from the original on 29 November 2019. Retrieved 3 February 2020. "System V Application Binary Interface - Edition 4.1" (PDF). Sco.com. Archived (PDF) from the original on 13 December 2019. Retrieved 3 February 2020. "Xinuos Inc. | Developers | Gabi | 2003-12-17 | System V Application Binary Interface - DRAFT". Sco.com. Archived from the original on 3 February 2020. Retrieved 3 February 2020. "Executable And Linking Format (ELF)". Refspecs.linuxbase.org. Retrieved 3 February 2020. "elf(5) - Linux manual page". man7.org. Archived from the original on 30 November 2020. Retrieved 18 November 2020. "Linux Standard Base Core Specification for X86-64". Refspecs.linuxbase.org. Retrieved 3 February 2020. "System V Application Binary Interface - DRAFT". Refspecs.linuxbase.org. Retrieved 3 February 2020. Seyfarth, Ray (2012). Introduction to 64 Bit Intel Assembly Language Programming for Linux. CreateSpace Independent Publishing Platform. p. 170. ISBN 9781478119203. "Anatomy of a system call, part 1 [LWN.net]". lwn.net. Archived from the original on 18 August 2020. Retrieved 16 July 2020. "Anatomy of a system call, part 2 [LWN.net]". lwn.net. Archived from the original on 6 August 2020. Retrieved 16 July 2020. Deucher, Alex (7 October 2014). "AMD's New Unified Open Source Driver". X.Org Foundation. Archived from the original on 21 January 2015. Retrieved 21 January 2015. "Symbols - Unreliable Guide To Hacking The Linux Kernel — The Linux Kernel documentation". Kernel.org. Archived from the original on 3 August 2020. Retrieved 8 February 2020. "Exported symbols and the internal API [LWN.net]". Lwn.net. Archived from the original on 31 March 2020. Retrieved 15 March 2020. "Unexporting kallsyms_lookup_name() [LWN.net]". Lwn.net. Archived from the original on 1 April 2020. Retrieved 15 March 2020. "Trees I: Radix trees [LWN.net]". lwn.net. Archived from the original on 8 November 2020. Retrieved 13 November 2020. "Trees II: red-black trees [LWN.net]". lwn.net. Archived from the original on 13 November 2020. Retrieved 13 November 2020. "Unreliable Guide To Hacking The Linux Kernel". Kernel.org (1st ed.). 2005. Archived from the original on 16 February 2020. Retrieved 15 March 2020. "Unreliable Guide To Hacking The Linux Kernel — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 15 March 2020. "Unreliable Guide To Locking — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 15 March 2020. "SCSI Interfaces Guide — The Linux Kernel documentation". Kernel.org. Archived from the original on 2 June 2020. Retrieved 11 June 2020. "libATA Developer's Guide — The Linux Kernel documentation". Kernel.org. Archived from the original on 30 May 2020. Retrieved 11 June 2020. "DRM Internals — The Linux Kernel documentation". Kernel.org. Archived from the original on 1 June 2020. Retrieved 11 June 2020. "Kernel Mode Setting (KMS) — The Linux Kernel documentation". Kernel.org. Archived from the original on 11 June 2020. Retrieved 11 June 2020. "Introduce DMA buffer sharing mechanism [LWN.net]". lwn.net. Archived from the original on 11 June 2020. Retrieved 11 June 2020. "Sharing CPU and GPU buffers on Linux*". 01.org. 12 May 2016. Archived from the original on 11 June 2020. Retrieved 11 June 2020. "Buffer Sharing and Synchronization — The Linux Kernel documentation". Kernel.org. Archived from the original on 1 June 2020. Retrieved 11 June 2020. "About mac80211". Linux Kernel Organization, Inc. Archived from the original on 1 February 2021. Retrieved 8 June 2014. "Linux 802.11 Driver Developer's Guide — The Linux Kernel documentation". Kernel.org. Retrieved 19 November 2021. "[PATCH v3 1/2] fork: add clone3 [LWN.net]". lwn.net. Archived from the original on 16 July 2020. Retrieved 16 July 2020. "clone(2) - Linux manual page". man7.org. Archived from the original on 15 July 2020. Retrieved 15 July 2020. "clone3(), fchmodat4(), and fsinfo() [LWN.net]". lwn.net. Archived from the original on 15 June 2020. Retrieved 15 July 2020. "ld-linux.so(8) - Linux manual page". man7.org. Archived from the original on 26 November 2020. Retrieved 18 November 2020. "nptl(7) - Linux manual page". man7.org. Archived from the original on 25 July 2020. Retrieved 25 July 2020. "pthreads(7) - Linux manual page". man7.org. Archived from the original on 15 July 2020. Retrieved 25 July 2020. "pthread_create(3) - Linux manual page". man7.org. Archived from the original on 25 July 2020. Retrieved 25 July 2020. "futex(7) - Linux manual page". man7.org. Archived from the original on 15 July 2020. Retrieved 25 July 2020. "Kernel threads made easy [LWN.net]". lwn.net. Archived from the original on 31 March 2020. Retrieved 15 August 2020. "execve(2) - Linux manual page". Man7.org. Archived from the original on 15 July 2020. Retrieved 17 July 2020. "capabilities(7) - Linux manual page". man7.org. Archived from the original on 15 July 2020. Retrieved 2 August 2020. Bar, Moshe (1 April 2000). "The Linux Scheduler". Linux Journal. Belltown Media, Inc. Archived from the original on 2 February 2021. Retrieved 14 April 2012. BKK19-TR03 - The Linux Kernel Scheduler - Overview, archived from the original on 15 December 2021, retrieved 17 May 2021 "Lowering Latency in Linux: Introducing a Preemptible Kernel | Linux Journal". Linuxjournal.com. Archived from the original on 9 August 2020. Retrieved 17 August 2020. "CFS Scheduler — The Linux Kernel documentation". Kernel.org. Retrieved 1 May 2021. "IEEE Standard for Information Technology – Portable Operating System Interface, POSIX.1b, Real-time extensions (IEEE Std 1003.1b-1993)". Archived from the original on 16 November 2010. Retrieved 17 March 2016. Larabel, Michael (24 January 2014). "The Linux 3.14 Kernel Already Has Many Exciting Features". Phoronix. Archived from the original on 13 August 2020. Retrieved 3 February 2014. "Linux kernel 3.14, Section 1.1. Deadline scheduling class for better real-time scheduling". kernelnewbies.org. 30 March 2014. Archived from the original on 15 January 2021. Retrieved 2 April 2014. "RT-mutex implementation design — The Linux Kernel documentation". Kernel.org. Retrieved 17 December 2021. "RT-mutex subsystem with PI support — The Linux Kernel documentation". Kernel.org. Retrieved 17 December 2021. McKenney, Paul (10 August 2005). "A realtime preemption overview". LWN.net. Archived from the original on 10 August 2020. Retrieved 5 February 2012. "OSADL Project: Realtime Linux". OSADL. Archived from the original on 4 February 2021. Retrieved 5 February 2012. "Steven-Rostedt_on_PREEMPT_RT" (PDF). "EEVDF Scheduler May Be Ready For Landing With Linux 6.6". Phoronix. Retrieved 31 August 2023. "[PATCH 00/10] sched: EEVDF using latency-nice [LWN.net]". LWN.net. "An EEVDF CPU scheduler for Linux [LWN.net]". LWN.net. Retrieved 31 August 2023. "EEVDF Scheduler Merged For Linux 6.6, Intel Hybrid Cluster Scheduling Re-Introduced". Phoronix. "locking — The Linux Kernel documentation". Kernel.org. Retrieved 17 December 2021. "locking.rst - Documentation/kernel-hacking/locking.rst - Linux source code (v5.11.10) - Bootlin". elixir.bootlin.com. Retrieved 29 March 2021. "What is RCU, Fundamentally? [LWN.net]". lwn.net. Retrieved 29 March 2021. "What is RCU? Part 2: Usage [LWN.net]". lwn.net. Retrieved 29 March 2021. "RCU part 3: the RCU API [LWN.net]". lwn.net. Retrieved 29 March 2021. "Linux-Kernel Memory Model". open-std.org. Retrieved 29 March 2021. "A formal kernel memory-ordering model (part 1) [LWN.net]". lwn.net. Retrieved 29 March 2021. "A formal kernel memory-ordering model (part 2) [LWN.net]". lwn.net. Retrieved 29 March 2021. Stern, Alan. "Explanation of the Linux-Kernel Memory Consistency Model". "kernel/git/torvalds/linux.git - Linux kernel source tree". git.kernel.org. Retrieved 17 December 2021. "Lock types and their rules — The Linux Kernel documentation". Kernel.org. Retrieved 17 December 2021. "Short subjects: Realtime, Futexes, and ntfs3". Lwn.net. Retrieved 20 February 2022. "RT-mutex subsystem with PI support — The Linux Kernel documentation". Kernel.org. Retrieved 20 February 2022. "RT-mutex implementation design — the Linux Kernel documentation". "Runtime locking correctness validator — The Linux Kernel documentation". Kernel.org. Retrieved 17 December 2021. "Interrupts, threads, and lockdep [LWN.net]". lwn.net. Retrieved 17 December 2021. "The Linux Storage Stack Diagram". Thomas-krenn.com. Archived from the original on 3 August 2020. Retrieved 19 March 2020. "The SLUB allocator". Lwn.net. 11 April 2007. Retrieved 20 February 2022. "Slab allocators in the Linux Kernel: SLAB, SLOB, SLUB" (PDF). Events.static.linuxfound.org. Retrieved 20 February 2022. "Kernel/Git/Torvalds/Linux.git - Linux kernel source tree". Git.kernel.org. Corbet, Jonathan (28 April 2023). "6.4 Merge window, part 1 [LWN.net]". LWN.net. Retrieved 12 May 2023. "Linux's SLAB Allocator Next On Deck For Deprecation & Removal". Phoronix. Retrieved 12 May 2023. Torvalds, Linus (January 1999). "The Linux Edge". Open Sources: Voices from the Open Source Revolution. O'Reilly. ISBN 1-56592-582-3. Retrieved 13 October 2013. "Porting Linux to the DEC Alpha: The Kernel and Shell". Archived from the original on 5 September 2019. Retrieved 5 October 2019. "Linux on Alpha: A Strategic Choice". Archived from the original on 4 September 2019. Retrieved 5 October 2019. "Avalon Cluster | TOP500 Supercomputer Sites". Top500.org. Archived from the original on 5 October 2019. Retrieved 5 October 2019. Wang, David (6 May 2010). "Android Now Running On iPhone 3G". TechHive. IDG. Archived from the original on 22 July 2010. Retrieved 11 July 2010. "LKDDb". LKDDb Project. Archived from the original on 25 February 2021. Retrieved 26 January 2021. "Linux Hardware". Linux Hardware Project. Archived from the original on 26 January 2021. Retrieved 26 January 2021. "Linux kernel 4.0, Section 1.2. Live patching". kernelnewbies.org. 26 April 2015. Archived from the original on 4 May 2015. Retrieved 27 April 2015. Jonathan Corbet (25 February 2015). "A rough patch for live patching". LWN.net. Archived from the original on 27 April 2015. Retrieved 27 April 2015. "kernel/git/torvalds/linux.git: Pull live patching infrastructure from Jiri Kosina (Linux kernel source tree)". kernel.org. 11 February 2015. Archived from the original on 11 June 2015. Retrieved 27 April 2015. Mookhey, K. K.; Burghate, Nilesh (1 July 2005). Linux: Security, Audit and Control Features. US: ISACA. p. 14. ISBN 1-893209-78-4. Archived from the original on 2 June 2013. Retrieved 31 December 2010. Hatch, Brian (15 July 2008). Hacking Exposed Linux: Linux Security Secrets and Solutions. McGraw-Hill Osborne Media. p. 524. ISBN 978-0-07-226257-5. Archived from the original on 2 June 2013. Retrieved 31 December 2010. Jaeger, Trent (7 October 2008). Operating System Security. Morgan and Claypool Publishers. p. 122. ISBN 978-1-59829-212-1. Archived from the original on 2 June 2013. Retrieved 31 December 2010. "CAP_PERFMON — and new capabilities in general [LWN.net]". lwn.net. Archived from the original on 4 August 2020. Retrieved 2 August 2020. "Linux Security Module Usage — The Linux Kernel documentation". Kernel.org. Archived from the original on 2 May 2020. Retrieved 10 January 2020. "National Security Agency | Central Security Service > What We Do > Research > SE Linux > SE Linux FAQs". Nsa.gov. Archived from the original on 18 September 2019. Retrieved 10 January 2020. "Seccomp BPF (SECure COMPuting with filters) — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 10 January 2020. Andrews, Jeremy (16 July 2008). "Security Bugs and Full Disclosure". KernelTrap. Archived from the original on 19 July 2008. Retrieved 31 December 2010. Spengler, Brad (16 July 2008). "Linux's unofficial security-through-coverup policy". Full Disclosure (Mailing list). Archived from the original on 7 August 2020. Retrieved 31 December 2010. "The Linux Kernel Archives". www.kernel.org. Retrieved 28 February 2023. "2017 State of Linux Kernel Development". The Linux Foundation. 25 October 2017. Archived from the original on 27 May 2020. Retrieved 27 May 2020. "Contributor Covenant Code of Conduct". The Linux Kernel documentation. Retrieved 6 October 2021. "Linux Kernel Contributor Covenant Code of Conduct Interpretation". The Linux Kernel Documentation. Retrieved 6 October 2021. Williams, Dan. "[PATCH] CodingStyle: Inclusive Terminology". Linux Kernel Mailing List. "git-clone(1) - Linux manual page". man7.org. Archived from the original on 14 October 2020. Retrieved 16 August 2020. "git-pull(1) - Linux manual page". man7.org. Archived from the original on 12 November 2020. Retrieved 16 August 2020. Robert Love (2010). Linux Kernel Development: Linux Kernel Development. Pearson Education. p. 11. ISBN 9780768696790. Robert Love (2010). Linux Kernel Development: Linux Kernel Development. Pearson Education. p. 12. ISBN 9780768696790. "How the development process works". Archived from the original on 9 December 2017. Retrieved 4 February 2018. Robert Love (2010). Linux Kernel Development: Linux Kernel Development. Pearson Education. p. 13. ISBN 9780768696790. "HOWTO do Linux kernel development — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 4 January 2020. "Linux kernel coding style — The Linux Kernel documentation". Kernel.org. Archived from the original on 5 January 2020. Retrieved 4 January 2020. Tim Anderson. "Linux kernel minimum compiler raised to GCC 5.1, allowing potential C11 use". The Register. Retrieved 12 May 2023. Larabel, Michael. "The Switch Has Been Made From C89 To C11/GNU11 With Linux 5.18". www.phoronix.com. Retrieved 12 May 2023. Sharwood, Simon (11 December 2022). "Linus Torvalds reveals Linux kernel 6.1". The Register. Retrieved 12 May 2023. Corbet, Jonathan. "Rust in the 6.2 kernel". LWN.net. Retrieved 12 May 2023. Larabel, Michael. "More Rust Code Readied For Linux 6.3 - Closer To Having Rust Drivers Upstreamed". Phoronix. Retrieved 12 May 2023. Kubbilun, Ingo A. (2 June 2004). "Linux kernel patch for Intel Compiler" (in German). Pyrillion.org. Archived from the original on 22 July 2011. Retrieved 12 November 2010. timothy (26 February 2009). "High Performance Linux Kernel Project — LinuxDNA". Slashdot Linux. Dice Holdings. Archived from the original on 18 October 2019. Retrieved 30 October 2010. Ryan, Justin (25 February 2009). "LinuxDNA Supercharges Linux with the Intel C/C++ Compiler". Linux Journal. Belltown Media, Inc. Archived from the original on 9 November 2020. Retrieved 30 October 2010. Larabel, Michael (5 March 2023). "Linux 6.3 Drops Support For The Intel ICC Compiler". Phoronix. Retrieved 6 March 2023. Lelbach, Bryce (25 October 2010). "Clang builds a working Linux Kernel (Boots to RL5 with SMP, networking and X, self hosts)". cfe-dev (Mailing list). Archived from the original on 7 September 2015. Larabel, Michael (12 April 2014). "Linux 3.15 Can Almost Be Compiled Under LLVM's Clang". Phoronix. Archived from the original on 13 August 2020. Retrieved 10 June 2014. Larabel, Michael. "Patch By Patch, LLVM Clang Gets Better At Building The Linux Kernel". Phoronix. Archived from the original on 13 August 2020. Retrieved 20 November 2014. Edge, Jake (7 May 2013). "LFCS: The LLVMLinux project". LWN.net. Archived from the original on 10 August 2020. Retrieved 3 March 2015. Möller, Jan-Simon (2 February 2014). "LLVMLinux: The Linux Kernel with Dragon Wings" (PDF). LLVM Project. Archived (PDF) from the original on 3 August 2020. Retrieved 3 March 2015. Desaulniers, Nick; Hackmann, Greg; Hines, Stephen (18 October 2017). "2017 LLVM Developers' Meeting: Compiling Android userspace and Linux kernel with LLVM". YouTube. Archived from the original on 31 December 2020. Retrieved 7 December 2020. Hackmann, Greg (2 February 2017). "marlin-nougat-mr1-clang Patch Series". Archived from the original on 10 December 2020. Retrieved 6 December 2020. Kaehlcke, Matthias (22 October 2018). "cros-kernel2: Make clang the default compiler for kernel builds". Archived from the original on 10 December 2020. Retrieved 6 December 2020. Larabel, Michael (4 February 2019). "Using LLVM Clang To Compile The Linux Kernel Is Heating Up Again Thanks To Google". Phoronix. Archived from the original on 25 November 2020. Retrieved 6 December 2020. Desaulniers, Nick (10 December 2019). "vts: kernel: enforce vts_kernel_toolchain for all TARGET_ARCH for R". Archived from the original on 10 December 2020. Retrieved 6 December 2020. Desaulniers, Nick (19 November 2020). "Re: violating function pointer signature". LKML. Retrieved 6 December 2020. Bradford, John (8 March 2003). "Re: what's an OOPS". LKML (Mailing list). Archived from the original on 31 October 2014. Retrieved 30 October 2010. "syslog(2) - Linux manual page". man7.org. Archived from the original on 13 October 2020. Retrieved 15 August 2020. "kmsg: export printk records to the /dev/kmsg interface [LWN.net]". lwn.net. Archived from the original on 2 October 2015. Retrieved 16 August 2020. "systemd". Freedesktop.org. Archived from the original on 18 August 2020. Retrieved 16 August 2020. "systemd-journald(8) - Linux manual page". man7.org. Archived from the original on 12 August 2020. Retrieved 15 August 2020. See what your computer is doing with Ftrace utilities, archived from the original on 15 December 2021, retrieved 9 May 2021 "Debugging the kernel using Ftrace - part 1 [LWN.net]". lwn.net. Archived from the original on 9 November 2020. Retrieved 15 September 2020. "Debugging the kernel using Ftrace - part 2 [LWN.net]". lwn.net. Archived from the original on 31 March 2020. Retrieved 15 September 2020. "ftrace - Function Tracer — The Linux Kernel documentation". Kernel.org. Archived from the original on 19 September 2020. Retrieved 15 September 2020. "Boot-time tracing — The Linux Kernel documentation". Kernel.org. Archived from the original on 31 October 2020. Retrieved 19 September 2020. "Kernel Probes (Kprobes) — The Linux Kernel documentation". Kernel.org. Archived from the original on 11 October 2020. Retrieved 6 October 2020. "Uprobe-tracer: Uprobe-based Event Tracing — The Linux Kernel documentation". Kernel.org. Archived from the original on 4 December 2020. Retrieved 6 October 2020. "Using kgdb, kdb and the kernel debugger internals". mirrors.edge.kernel.org. Archived from the original on 26 January 2021. Retrieved 3 November 2020. Gene Sally (2010). Pro Linux Embedded Systems. Apress. p. 252. ISBN 9781430272267. "Code of Conflict". Retrieved 4 February 2018.[permanent dead link] Sharwood, Simon (6 October 2015). "Linux kernel dev who asked Linus Torvalds to stop verbal abuse quits over verbal abuse". The Register. Archived from the original on 29 March 2020. Retrieved 4 February 2018. Edge, Jake (31 January 2018). "Too many lords, not enough stewards". LWN.net. Archived from the original on 9 November 2020. Retrieved 4 February 2018. Corbet, Jonathan (6 November 2017). "Bash the kernel maintainers". LWN.net. Archived from the original on 26 January 2021. Retrieved 4 February 2018. Billimoria, Kaiwan N. (2021). Linux Kernel Programming A Comprehensive Guide to Kernel Internals, Writing Kernel Modules, and Kernel Synchronization. Birmingham: Packt Publishing, Limited. p. 55. ISBN 978-1-78995-592-7. OCLC 1240585605. Vaduva, Alexandru (2016). Linux : embedded development : leverage the power of Linux to develop captivating and powerful embedded Linux projects : a course in three modules. Alex Gonzalez, Chris Simmonds. Birmingham, UK. p. 663. ISBN 978-1-78712-445-5. OCLC 960471438.{{cite book}}: CS1 maint: location missing publisher (link) Karim Yaghmour (2008). Building embedded Linux systems (2nd ed.). Sebastopol [Calif.]: O'Reilly Media. p. 387. ISBN 978-0-596-52968-0. OCLC 273049576. Yaghmour, Karim (2011). Embedded Android. Sebastopol, CA: O'Reilly Media. p. 44. ISBN 978-1-4493-2798-9. OCLC 812180000. "SoC (System on a Chip)". OpenWrt Wiki. 6 November 2014. Archived from the original on 23 August 2022. Retrieved 15 March 2021. "What to do about CVE numbers [LWN.net]". lwn.net. Retrieved 15 March 2021. Amadeo, Ron (20 November 2019). "Google outlines plans for mainline Linux kernel support in Android". Ars Technica. Retrieved 31 March 2021. Bruchon, Jody (24 April 2021), jbruchon/elks, retrieved 27 April 2021 "The state of preempt-rt". linuxplumbersconf.org. Archived from the original on 15 October 2016. Retrieved 14 June 2016. Meyer, David (3 February 2010). "Linux developer explains Android kernel code removal". ZDNet. CBS Interactive. Archived from the original on 15 October 2016. Retrieved 3 February 2010. "Chapter 03: maemo Platform Overview". maemo Technology Overview. Nokia. 2008. Archived from the original on 16 June 2008. Retrieved 9 April 2010. Kroah-Hartman, Greg (2 February 2010). "Android and the Linux kernel community". Archived from the original on 27 April 2019. Retrieved 3 February 2010. Roger Ye (2017). Android System Programming. Packt Publishing. p. 14. ISBN 9781787120389. Torvalds, Linus (19 September 2001). "The Origins of Linux—Linus Torvalds". YouTube. Archived from the original on 15 December 2021. Retrieved 6 December 2020. "Why I quit: kernel developer Con Kolivas". APC Magazine. ACP Magazines. 24 July 2007. Archived from the original on 7 July 2011. Retrieved 15 August 2011. Corbet, Jonathan (25 July 2007). "Re: -mm merge plans for 2.6.23". LWN.net. Archived from the original on 11 February 2018. Retrieved 10 February 2018. Cox, Alan (28 July 2009). "Re: [PATCH] kdesu broken". Archived from the original on 11 February 2018. Retrieved 10 February 2018. Rodrigues, Goldwyn (22 January 2011). "A tale of two SCSI targets". Archived from the original on 15 February 2018. Retrieved 14 February 2018. Steinmetz, Andreas (17 January 2013). "LIO - the broken iSCSI target implementation". Archived from the original on 15 February 2018. Retrieved 14 February 2018. Paul, Ryan (19 June 2012). "Linus Torvalds says "f–k you" to NVIDIA". Archived from the original on 15 February 2018. Retrieved 14 February 2018. John Gold (3 April 2014). "Linus Torvalds suspends key Linux developer: Kernel panic as Systemd dev pokes the bear". Archived from the original on 24 March 2019. Retrieved 24 March 2019. Poettering, Lennart (6 October 2014). "On the sickness of the Linux Kernel Community". Google+. Archived from the original on 27 May 2018. Retrieved 10 February 2018. Brodkin, Jon (6 March 2015). "VMware alleged to have violated Linux's open source license for years". Ars Technica. Archived from the original on 15 February 2018. Retrieved 14 February 2018. McCarthy, Kieren (26 August 2016). "Having offended everyone else in the world, Linus Torvalds calls own lawyers a 'nasty festering disease'". The Register. Archived from the original on 15 February 2018. Retrieved 14 February 2018. Kroah-Hartman, Greg. "[PATCH 000/190] Revertion of all of the umn.edu commits". Linux Kernel Mailing List Archive. Retrieved 13 January 2022. Chin, Monica (30 April 2021). "How a university got itself banned from the Linux kernel". The Verge. Retrieved 13 January 2022. Corbet, Jonathan (10 September 2007). "KS2007: Developer relations and development process". LWN.net. Archived from the original on 12 February 2018. Retrieved 11 February 2018. Brodkin, Jon (16 July 2013). "Linus Torvalds defends his right to shame Linux kernel developers". ARS Technica. Archived from the original on 17 February 2018. Retrieved 11 February 2018. Corbet, Jonathan (9 March 2015). "The kernel's code of conflict". LWN.net. Archived from the original on 12 February 2018. Retrieved 11 February 2018. Corbet, Jonathan (18 September 2018). "Code, conflict, and conduct". LWN.net. Archived from the original on 19 September 2018. Retrieved 19 September 2018. Cohen, Noam (19 September 2018). "After Years of Abusive E-mails, the Creator of Linux Steps Aside". The New Yorker. Archived from the original on 20 February 2020. Retrieved 24 September 2018. Larabel, Michael. "Dropping Profanity In Kernel Code Comments: Linux Gets "Hugs"". Phoronix. Archived from the original on 21 April 2019. Retrieved 15 June 2019. "Linux Evolution" (PDF). 26 March 2008. Archived (PDF) from the original on 14 December 2013. Retrieved 6 November 2013. "Perpetual Development: A Model of the Linux Kernel Life Cycle" (PDF). 25 October 2011. Archived (PDF) from the original on 17 October 2013. Retrieved 6 November 2013. Kroah-Hartman, Greg (12 February 2008). "Re: Announce: Linux-next (Or Andrew's dream :-))". Linux Kernel Mailing List (Mailing list). Archived from the original on 2 February 2017. Retrieved 30 January 2017. Wheeler, David A. "Linux Kernel 2.6: It's Worth More!". Archived from the original on 20 August 2011. Retrieved 18 January 2007. "Economic impact of FLOSS on innovation and competitiveness of the EU ICT sector" (PDF) (Table 3 on page 50). Archived (PDF) from the original on 15 February 2010. Retrieved 8 January 2011. "Estimating Total Development Cost Of a Linux Distribution" (PDF) (Table on page 6). Archived from the original (PDF) on 11 July 2010. "The Billion Dollar Kernel". Linux.slashdot.org. 24 February 2010. Archived from the original on 15 May 2011. Retrieved 12 November 2010. Wheeler, David. "The Linux Kernel: It's Worth More!". Archived from the original on 24 February 2021. Retrieved 17 September 2012. "Linux MAINTAINERS file". Archived from the original on 12 January 2013. Alexandru Vaduva, Alex Gonzalez & Chris Simmonds (2016). Linux: Embedded Development. Packt Publishing. p. 663. ISBN 9781787124455. "The Linux Kernel Archives". Archived from the original on 15 February 2022. Retrieved 15 February 2022. Yamagata, Hiroo (3 August 1997). "The Pragmatist of Free Software". HotWired. Archived from the original on 10 February 2007. Retrieved 21 February 2007. "GPL-v2". gnu.org. Archived from the original on 25 December 2019. Retrieved 28 January 2020. Corbet, Jonathan (31 January 2006). "GPLv3 and the kernel". LWN.net. Archived from the original on 10 August 2020. Retrieved 21 February 2007. Torvalds, Linus (8 September 2000). "Linux-2.4.0-test8". LKML (Mailing list). Archived from the original on 15 May 2020. Retrieved 21 February 2007. "gnu.org". Gnu.org. Archived from the original on 2 February 2021. Retrieved 18 October 2017. Cox, Alan (20 January 2006). "Re: GPL V3 and Linux". LKML (Mailing list). Archived from the original on 26 January 2021. Retrieved 21 February 2007. Shankland, Stephen (25 September 2006). "Top Linux programmers pan GPL 3". News.com. CNET. Retrieved 21 February 2007.[permanent dead link] James E.J. Bottomley; Mauro Carvalho Chehab; Thomas Gleixner; Christoph Hellwig; Dave Jones; Greg Kroah-Hartman; Tony Luck; Andrew Morton; Trond Myklebust; David Woodhouse (15 September 2006). "Kernel developers' position on GPLv3: The Dangers and Problems with GPLv3". LWN.net. Archived from the original on 18 January 2021. Retrieved 11 March 2015. Petreley, Nicholas (27 September 2006). "A fight against evil or a fight for attention?". linuxjournal.com. Archived from the original on 2 March 2018. Retrieved 11 March 2015. "Linus Torvalds says GPL v3 violates everything that GPLv2 stood for". Debconf 2014. 2014. Archived from the original on 8 May 2018. Retrieved 21 March 2018. Clark, Rob; Semwal, Sumit (1 November 2012). "DMA Buffer Sharing Framework: An Introduction" (PDF). Embedded Linux Conference. Archived (PDF) from the original on 8 August 2014. Retrieved 2 August 2014. Cox, Alan (10 October 2012). "[PATCH] dma-buf: Use EXPORT_SYMBOL". Direct Rendering Infrastructure (Mailing list). Archived from the original on 22 January 2013. Retrieved 3 September 2013. Torvalds, Linus (10 December 2003). "RE: Linux GPL and binary module exception clause?". LKML (Mailing list). Archived from the original on 15 June 2011. Retrieved 31 December 2010. Torvalds, Linus (3 December 2003). "Re: Linux GPL and binary module exception clause?". LKML (Mailing list). Archived from the original on 28 April 2020. Retrieved 12 November 2010. "Tainted kernels — The Linux Kernel documentation". Kernel.org. Archived from the original on 7 March 2020. Retrieved 13 January 2020. "Linux Firmware API — The Linux Kernel documentation". Kernel.org. Archived from the original on 13 January 2020. Retrieved 13 January 2020. "Built-in firmware — The Linux Kernel documentation". Kernel.org. Archived from the original on 10 June 2020. Retrieved 10 June 2020. "Linux TM registration in the US". uspto.gov. Archived from the original on 24 February 2021. Retrieved 6 September 2019. "Linux TM registration in the EU". euipo.europa.eu. Archived from the original on 9 June 2016. Retrieved 28 November 2020. Hughes, Phil (1 August 1997). "Linux Trademark Dispute". Linux Journal. Belltown Media, Inc. Archived from the original on 30 April 2010. Retrieved 8 December 2010. Hughes, Phil (1 March 1997). "Action Taken on Linux Trademark". Linux Journal. Belltown Media, Inc. Archived from the original on 3 March 2010. Retrieved 8 December 2010. Gisselberg, Tonya (2010). "The Trademark History of Linux, the Operating System" (PDF). Gisselberg Law Firm, Inc. Archived from the original (PDF) on 11 July 2011. Retrieved 8 December 2010. Torvalds, Linus; Diamond, David (2001). Just for Fun: The Story of an Accidental Revolutionary. HarperBusiness. ISBN 978-0066620732. Bezroukov, Nikolai. "Ch 4: A benevolent dictator". Portraits of Open Source Pioneers (e-book). Softpanorama. Archived from the original on 13 October 2005. Retrieved 3 October 2005. "LinkSys and binary modules". LWN.net Weekly Edition. 16 October 2003. Archived from the original on 1 August 2016. Retrieved 21 July 2016. "Everyone's Favorite Linux Mascot". Archived from the original on 16 August 2005. Retrieved 16 June 2005. Pranevich, Joseph (December 2003). "The Wonderful World of Linux 2.6". Archived from the original on 16 July 2003. "LinuxChanges". Archived from the original on 31 October 2005. Retrieved 31 October 2005. "Seminar Paper on Linux Kernel 2.6". Archived from the original on 2 February 2007. "Linux Device Drivers" (3rd ed.). Archived from the original on 27 July 2016. Retrieved 21 July 2016. "Understanding the Linux Kernel" (Book) (3rd ed.). Archived from the original on 17 December 2005. Retrieved 22 December 2005. Linux Kernel Networking, by Rami Rosen, 2014 (Book). Archived from the original on 12 May 2015. Retrieved 14 June 2015. "Linux: The GPL And Binary Modules". Archived from the original on 23 July 2005. "Anatomy of the Linux kernel". IBM. Archived from the original on 27 June 2007. Retrieved 9 June 2007. Tanenbaum, Andrew; Bos, Herbert (2015). Modern Operating Systems. United States of America: Pearson. p. 722. ISBN 9781292061429. OCLC 892574803. Wikimedia Commons has media related to Linux kernel. Wikibooks has more on the topic of: Linux kernel Official website Linux kernel documentation index Linux kernel man pages Kernel bugzilla, and regressions for each recent kernel version Kernel Newbies, a source of various kernel-related information Kernel coverage at LWN.net, an authoritative source of kernel-related information Bootlin's Elixir Cross Referencer, a Linux kernel source code cross-reference Greg Kroah Hartman on the Linux kernel on YouTube
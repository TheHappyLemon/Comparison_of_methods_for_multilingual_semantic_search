Proprietary software is software that grants its creator, publisher, or other rightsholder or rightsholder partner a legal monopoly by modern copyright and intellectual property law to exclude the recipient from freely sharing the software or modifying it, and—in some cases, as is the case with some patent-encumbered and EULA-bound software—from making use of the software on their own, thereby restricting their freedoms. Proprietary software is a subset of non-free software, a term defined in contrast to free and open-source software; non-commercial licenses such as CC BY-NC are not deemed proprietary, but are non-free. Proprietary software may either be closed-source software or source-available software. Until the late 1960s, computers—especially large and expensive mainframe computers, machines in specially air-conditioned computer rooms—were usually leased to customers rather than sold. Service and all software available were usually supplied by manufacturers without separate charge until 1969. Computer vendors usually provided the source code for installed software to customers.[citation needed] Customers who developed software often made it available to the public without charge. Closed source means computer programs whose source code is not published except to licensees. It is available to be modified only by the organization that developed it and those licensed to use the software. In 1969, IBM, which had antitrust lawsuits pending against it, led an industry change by starting to charge separately for mainframe software and services, by unbundling hardware and software. Bill Gates' "Open Letter to Hobbyists" in 1976 decried computer hobbyists' rampant copyright infringement of software, particularly Microsoft's Altair BASIC interpreter, and asserted that their unauthorized use hindered his ability to produce quality software. But the legal status of software copyright, especially for object code, was not clear until the 1983 appeals court ruling in Apple Computer, Inc. v. Franklin Computer Corp. According to Brewster Kahle the legal characteristic of software changed also due to the U.S. Copyright Act of 1976. Starting in February 1983 IBM adopted an "object-code-only" model for a growing list of their software and stopped shipping much of the source code, even to licensees. In 1983, binary software became copyrightable in the United States as well by the Apple vs. Franklin law decision, before which only source code was copyrightable. Additionally, the growing availability of millions of computers based on the same microprocessor architecture created for the first time an unfragmented and big enough market for binary distributed software. The hallmark of proprietary software licenses is that the software publisher grants the use of one or more copies of software under the end-user license agreement (EULA), but ownership of those copies remains with the software publisher (hence use of the term "proprietary"). This feature of proprietary software licenses means that certain rights regarding the software are reserved by the software publisher. Therefore, it is typical of EULAs to include terms which define the uses of the software, such as the number of installations allowed or the terms of distribution. The most significant effect of this form of licensing is that, if ownership of the software remains with the software publisher, then the end-user must accept the software license. In other words, without acceptance of the license, the end-user may not use the software at all. One example of such a proprietary software license is the license for Microsoft Windows. As is usually the case with proprietary software licenses, this license contains an extensive list of activities which are restricted, such as: reverse engineering, simultaneous use of the software by multiple users, and publication of benchmarks or performance tests. There are numerous types of licensing models, varying from simple perpetual licenses and floating licenses (also known as concurrent licenses) to more advanced models such as the metered license. The most common licensing models are per single user (named user, client, node) or per user in the appropriate volume discount level, while some manufacturers accumulate existing licenses. These open volume licensing programs are typically called open license program (OLP), transactional license program (TLP), volume license program (VLP) etc. and are contrary to the contractual license program (CLP), where the customer commits to purchase a certain number of licenses over a fixed period (mostly two years). Licensing per concurrent/floating user also occurs, where all users in a network have access to the program, but only a specific number at the same time. Another license model is licensing per dongle, which allows the owner of the dongle to use the program on any computer. Licensing per server, CPU or points, regardless the number of users, is common practice, as well as site or company licenses. Sometimes one can choose between perpetual (permanent) and annual license. For perpetual licenses, one year of maintenance is often required, but maintenance (subscription) renewals are discounted. For annual licenses, there is no renewal; a new license must be purchased after expiration. Licensing can be host/client (or guest), mailbox, IP address, domain etc., depending on how the program is used. Additional users are inter alia licensed per extension pack (e.g. up to 99 users), which includes the base pack (e.g. 5 users). Some programs are modular, so one will have to buy a base product before they can use other modules. Software licensing often also includes maintenance. This, usually with a term of one year, is either included or optional, but must often be bought with the software. The maintenance agreement (contract) typically contains a clause that allows the licensee to receive minor updates (V.1.1 => 1.2), and sometimes major updates (V.1.2 => 2.0). This option is usually called update insurance or upgrade assurance. For a major update, the customer has to buy an upgrade, if it is not included in the maintenance agreement. For a maintenance renewal, some manufacturers charge a reinstatement (reinstallment) fee retroactively per month, in the event that the current maintenance has expired. Maintenance sometimes includes technical support. When it does, the level of technical support, which are commonly named gold, silver and bronze, can vary depending on the communication method (i.e. e-mail versus telephone support), availability (e.g. 5x8, 5 days a week, 8 hours a day) and reaction time (e.g. three hours). Support is also licensed per incident as an incident pack (e.g. five support incidents per year). Many manufacturers offer special conditions for schools and government agencies (EDU/GOV license). Migration from another product (crossgrade), even from a different manufacturer (competitive upgrade) is offered. Software distributions considered as proprietary may in fact incorporate a "mixed source" model including both free and non-free software in the same distribution. Most if not all so-called proprietary UNIX distributions are mixed source software, bundling open-source components like BIND, Sendmail, X Window System, DHCP, and others along with a purely proprietary kernel and system utilities. Some free software packages are also simultaneously available under proprietary terms. Examples include MySQL, Sendmail and ssh. The original copyright holders for a work of free software, even copyleft free software, can use dual-licensing to allow themselves or others to redistribute proprietary versions. Non-copyleft free software (i.e. software distributed under a permissive free software license or released to the public domain) allows anyone to make proprietary redistributions. Free software that depends on proprietary software is considered "trapped" by the Free Software Foundation. This includes software written only for Microsoft Windows, or software that could only run on Java, before it became free software. Most of the software is covered by copyright which, along with contract law, patents, and trade secrets, provides legal basis for its owner to establish exclusive rights. A software vendor delineates the specific terms of use in an end-user license agreement (EULA). The user may agree to this contract in writing, interactively on screen (clickwrap), or by opening the box containing the software (shrink wrap licensing). License agreements are usually not negotiable. Software patents grant exclusive rights to algorithms, software features, or other patentable subject matter, with coverage varying by jurisdiction. Vendors sometimes grant patent rights to the user in the license agreement. The source code for a piece of proprietary software is routinely handled as a trade secret. Software can be made available with fewer restrictions on licensing or source-code access; software that satisfies certain conditions of freedom and openness is known as "free" or "open-source." Since license agreements do not override applicable copyright law or contract law, provisions in conflict with applicable law are not enforceable. Some software is specifically licensed and not sold, in order to avoid limitations of copyright such as the first-sale doctrine. The owner of proprietary software exercises certain exclusive rights over the software. The owner can restrict the use, inspection of source code, modification of source code, and redistribution. Vendors typically limit the number of computers on which software can be used, and prohibit the user from installing the software on extra computers.[citation needed] Restricted use is sometimes enforced through a technical measure, such as product activation, a product key or serial number, a hardware key, or copy protection. Vendors may also distribute versions that remove particular features, or versions which allow only certain fields of endeavor, such as non-commercial, educational, or non-profit use. Use restrictions vary by license: Windows Vista Starter is restricted to running a maximum of three concurrent applications. The retail edition of Microsoft Office Home and Student 2007 is limited to non-commercial use on up to three devices in one household. Windows XP can be installed on one computer, and limits the number of network file sharing connections to 10. The Home Edition disables features present in Windows XP Professional. Traditionally, Adobe licenses are limited to one user, but allow the user to install a second copy on a home computer or laptop. This is no longer true with the switching to Creative Cloud. iWork '09, Apple's productivity suite, is available in a five-user family pack, for use on up to five computers in a household. Vendors typically distribute proprietary software in compiled form, usually the machine language understood by the computer's central processing unit. They typically retain the source code, or human-readable version of the software, often written in a higher level programming language. This scheme is often referred to as closed source. While most proprietary software is distributed without the source code, some vendors distribute the source code or otherwise make it available to customers. For example, users who have purchased a license for the Internet forum software vBulletin can modify the source for their own site but cannot redistribute it. This is true for many web applications, which must be in source code form when being run by a web server. The source code is covered by a non-disclosure agreement or a license that allows, for example, study and modification, but not redistribution. The text-based email client Pine and certain implementations of Secure Shell are distributed with proprietary licenses that make the source code available.[citation needed]Some licenses for proprietary software allow distributing changes to the source code, but only to others licensed for the product, and some of those modifications are eventually picked up by the vendor. Some governments fear that proprietary software may include defects or malicious features which would compromise sensitive information. In 2003 Microsoft established a Government Security Program (GSP) to allow governments to view source code and Microsoft security documentation, of which the Chinese government was an early participant. The program is part of Microsoft's broader Shared Source Initiative which provides source code access for some products. The Reference Source License (Ms-RSL) and Limited Public License (Ms-LPL) are proprietary software licenses where the source code is made available. Governments have also been accused of adding such malware to software themselves. According to documents released by Edward Snowden, the NSA has used covert partnerships with software companies to make commercial encryption software exploitable to eavesdropping, or to insert backdoors. Software vendors sometimes use obfuscated code to impede users who would reverse engineer the software. This is particularly common with certain programming languages.[citation needed] For example, the bytecode for programs written in Java can be easily decompiled to somewhat usable code,[citation needed] and the source code for programs written in scripting languages such as PHP or JavaScript is available at run time. Proprietary software vendors can prohibit the users from sharing the software with others. Another unique license is required for another party to use the software. In the case of proprietary software with source code available, the vendor may also prohibit customers from distributing their modifications to the source code. Shareware is closed-source software whose owner encourages redistribution at no cost, but which the user sometimes must pay to use after a trial period. The fee usually allows use by a single user or computer. In some cases, software features are restricted during or after the trial period, a practice sometimes called crippleware. Proprietary software often[citation needed] stores some of its data in file formats that are incompatible with other software, and may also communicate using protocols which are incompatible. Such formats and protocols may be restricted as trade secrets or subject to patents.[citation needed] A proprietary application programming interface (API) is a software library interface "specific to one device or, more likely to a number of devices within a particular manufacturer's product range." The motivation for using a proprietary API can be vendor lock-in or because standard APIs do not support the device's functionality. The European Commission, in its March 24, 2004, decision on Microsoft's business practices, quotes, in paragraph 463, Microsoft general manager for C++ development Aaron Contorer as stating in a February 21, 1997, internal Microsoft memo drafted for Bill Gates: The Windows API is so broad, so deep, and so functional that most ISVs would be crazy not to use it. And it is so deeply embedded in the source code of many Windows apps that there is a huge switching cost to using a different operating system instead. Early versions of the iPhone SDK were covered by a non-disclosure agreement. The agreement forbade independent developers from discussing the content of the interfaces. Apple discontinued the NDA in October 2008. Any dependency on the future versions and upgrades for a proprietary software package can create vendor lock-in, entrenching a monopoly position. Proprietary software may also have licensing terms that limit the usage of that software to a specific set of hardware. Apple has such a licensing model for macOS, an operating system which is limited to Apple hardware, both by licensing and various design decisions. This licensing model has been affirmed by the United States Court of Appeals for the Ninth Circuit. Proprietary software which is no longer marketed, supported or sold by its owner is called abandonware, the digital form of orphaned works. If the proprietor of a software package should cease to exist, or decide to cease or limit production or support for a proprietary software package, recipients and users of the package may have no recourse if problems are found with the software. Proprietors can fail to improve and support software because of business problems. Support for older or existing versions of a software package may be ended to force users to upgrade and pay for newer versions(planned obsolescence). Sometimes another vendor or a software's community themselves can provide support for the software, or the users can migrate to either competing systems with longer support life cycles or to FOSS-based systems. Some proprietary software is released by their owner at end-of-life as open-source or source available software, often to prevent the software from becoming unsupported and unavailable abandonware. 3D Realms and id Software are famous for the practice of releasing closed source software into the open source.[further explanation needed] Some of those kinds are free-of-charge downloads (freeware), some are still commercially sold (e.g. Arx Fatalis).[further explanation needed] More examples of formerly closed-source software in the List of commercial software with available source code and List of commercial video games with available source code. Proprietary software is not synonymous with commercial software, although the two terms are sometimes used synonymously in articles about free software. Proprietary software can be distributed at no cost or for a fee, and free software can be distributed at no cost or for a fee. The difference is that whether proprietary software can be distributed, and what the fee would be, is at the proprietor's discretion. With free software, anyone who has a copy can decide whether, and how much, to charge for a copy or related services. Proprietary software that comes for no cost is called freeware. Proponents of commercial proprietary software argue that requiring users to pay for software as a product increases funding or time available for the research and development of software. For example, Microsoft says that per-copy fees maximize the profitability of software development. Proprietary software generally creates greater commercial activity over free software, especially in regard to market revenues. Proprietary software is often sold with a license that gives the end user right to use the software. Business software Commercial off-the-shelf Comparison of open-source and closed-source software Proprietary hardware Retail software Saraswati Experts. "2.5.3". COMPUTER SCIENCE WITH C++. Saraswati House Pvt Ltd. p. 1.27. ISBN 978-93-5199-877-8. Retrieved 29 June 2017. AUUG, Inc. (March 2003). "Chapter 1. Definitions". AUUGN. AUUG, Inc. p. 51. Retrieved 29 June 2017. Ceruzzi, Paul E. (2003). A History of Modern Computing. Cambridge, MA: MIT Press. p. 128. ISBN 0-262-53203-4. Although IBM agreed to sell its machines as part of a Consent Decree effective January 1956, leasing continued to be its preferred way of doing business.then everyone started fighting "The History of Equipment Leasing", Lease Genie, archived from the original on April 11, 2008, retrieved November 12, 2010, In the 1960s, IBM and Xerox recognized that substantial sums could be made from the financing of their equipment. The leasing of computer and office equipment that occurred then was a significant contribution to leasings [sic] growth, since many companies were exposed to equipment leasing for the first time when they leased such equipment. "Overview of the GNU System". GNU Operating System. Free Software Foundation. 2016-06-16. Retrieved 2017-05-01. Pugh, Emerson W. (2002). "Origins of Software Bundling". IEEE Annals of the History of Computing. 24 (1): 57–58. doi:10.1109/85.988580. Hamilton, Thomas W. (1969). IBM's Unbundling Decision: Consequences for Users and the Industry. Programming Sciences Corporation. IBM (n.d.). "Chronological History of IBM: 1960s". Retrieved May 28, 2016. Rather than offer hardware, services and software exclusively in packages, marketers 'unbundled' the components and offered them for sale individually. Unbundling gave birth to the multibillion-dollar software and services industries, of which IBM is today a world leader. Gates, Bill (February 3, 1976). "An Open Letter to Hobbyists". Retrieved May 28, 2016. Swann, Matthew (18 November 2004). Executable Code is Not the Proper Subject of Copyright Law (Technical report). Cal Poly State University. CPSLO-CSC-04-02. Pamela Samuelson (Sep 1984), "CONTU Revisited: The Case against Copyright Protection for Computer Programs in Machine-Readable Form", Duke Law Journal, 1984 (4): 663–769, doi:10.2307/1372418, JSTOR 1372418, archived from the original on Aug 4, 2017 Robert X. Cringely's interview with Brewster Kahle, 46th minute Archived 2019-01-18 at the Wayback Machine Cantrill, Bryan (2014-09-17). "Corporate Open Source Anti-patterns". YouTube. At 3:15. Archived from the original (video) on 2021-10-27. Retrieved 2015-12-26. Gallant, John (1985-03-18). "IBM policy draws fire - Users say source code rules hamper change". Computerworld. Retrieved 2015-12-27. While IBM's policy of withholding source code for selected software products has already marked its second anniversary, users are only now beginning to cope with the impact of that decision. But whether or not the advent of object-code-only products has affected their day-to-day DP operations, some users remain angry about IBM's decision. Announced in February 1983, IBM's object-code-only policy has been applied to a growing list of Big Blue system software products Hassett, Rob (Dec 18, 2012). "Impact of Apple vs. Franklin Decision". InternetLegal.com. Archived from the original on Sep 8, 2023. Landley, Rob (2009-05-23). "May 23, 2009". landley.net. Archived from the original on Dec 8, 2015. Retrieved 2015-12-02. So if open source used to be the norm back in the 1960's and 70's, how did this _change_? Where did proprietary software come from, and when, and how? How did Richard Stallman's little utopia at the MIT AI lab crumble and force him out into the wilderness to try to rebuild it? Two things changed in the early 80's: the exponentially growing installed base of microcomputer hardware reached critical mass around 1980, and a legal decision altered copyright law to cover binaries in 1983. Increasing volume: The microprocessor creates millions of identical computers Scholten, Thomas. "Software Licensing". Retrieved 21 May 2012. Engelfriet, Arnoud (August–September 2006). "The best of both worlds". Intellectual Asset Management (IAM) (19). Gavin Stewart. Archived from the original on 2013-09-14. Retrieved 2008-05-19. Loftus, Jack (2007-02-19). "Managing mixed source software stacks". LinuxWorld. Archived from the original on 2010-06-03. Tan, Aaron (2006-12-28). "Novell: We're a 'mixed-source' company". CNET Networks, Inc. Rosenberg, Donald (2000). Open Source: The Unauthorized White Papers. Foster City: IDG. p. 109. ISBN 0-7645-4660-0. "Categories of Free and Non-Free Software". GNU Project. Free Software Foundation (2009-05-05). "Frequently Asked Questions about the GNU Licenses". Retrieved 2017-05-01. Richard Stallman (2004-04-12). "Free But Shackled - The Java Trap". Retrieved 2017-05-01. Liberman, Michael (1995). "Overreaching Provisions in Software License Agreements". Richmond Journal of Law and Technology. 1: 4. Retrieved November 29, 2011. Limitations and Exceptions to Copyright and Neighbouring Rights in the Digital Environment: An International Library Perspective (2004). IFLA (2013-01-22). Retrieved on 2013-06-16. Daniel A. Tysver (2008-11-23). "Why Protect Software Through Patents". Bitlaw. Retrieved 2009-06-03. In connection with the software, an issued patent may prevent others from utilizing a certain algorithm (such as the GIF image compression algorithm) without permission, or may prevent others from creating software programs that perform a function in a certain way. In connection with computer software, copyright law can be used to prevent the total duplication of a software program, as well as the copying of a portion of software code. Donovan, S. (1994). "Patent, copyright and trade secret protection for software". IEEE Potentials. 13 (3): 20. doi:10.1109/45.310923. S2CID 19873766. Essentially there are only three ways to protect computer software under the law: patent it, register a copyright for it, or keep it as a trade secret. Eben Moglen (2005-02-12). "Why the FSF gets copyright assignments from contributors". Retrieved 2017-05-01. Under US copyright law, which is the law under which most free software programs have historically been first published, [...] only the copyright holder or someone having assignment of the copyright can enforce the license. White, Aoife (2012-07-03). "Oracle Can't Stop Software License Resales, EU Court Says". Bloomberg. Microsoft Corporation (2005-04-01). "End-User License Agreement for Microsoft Software: Microsoft Windows XP Professional Edition Service Pack 2" (PDF). Microsoft. p. Page 3. Retrieved 2009-04-29. Microsoft Corporation (2005-04-01). "End-User License Agreement for Microsoft Software: Microsoft Windows XP Professional Edition Service Pack 2" (PDF). Microsoft. p. Page 1. Retrieved 2009-04-29. You may install, use, access, display and run one copy of the Software on a single computer, such as a workstation, terminal or another device ("Workstation Computer"). The Software may not be used by more than two (2) processors at any one time on any single Workstation Computer. ... You may permit a maximum of ten (10) computers or other electronic devices (each a 'Device') to connect to the Workstation Computer to utilize one or more of the following services of the Software: File Services, Print Services, Internet Information Services, Internet Connection Sharing and telephony services. Adobe Systems, Adobe Software License Agreement (PDF), retrieved 2010-06-09 Parker, Jason (January 27, 2009). "Apple iWork '09 review: Apple iWork '09". CNET. Retrieved May 2, 2022. Heffan, Ira V. (1997). "Copyleft: Licensing Collaborative Works in the Digital Age" (PDF). Stanford Law Review. 49 (6): 1490. doi:10.2307/1229351. JSTOR 1229351. Archived from the original (PDF) on 2013-05-14. Retrieved 2009-07-27. Under the proprietary software model, most software developers withhold their source code from users. David A. Wheeler (2009-02-03). "Free-Libre / Open Source Software (FLOSS) is Commercial Software". Retrieved 2009-06-03. "Distribution of IBM Licensed Programs and Licensed Program Materials and Modified Agreement for IBM Licensed Programs". Announcement Letters. IBM. February 8, 1983. 283-016. Greg Mushial (July 20, 1983), "Module 24: SLAC Enhancements to and Beautifications of the IBM H-Level Assembler for Version 2.8", SLAC VM NOTEBOOK, Stanford Linear Accelerator Center Shankland, Stephen (January 30, 2003). "Governments to see Windows code". CNET. Retrieved May 2, 2022. Gao, Ken (February 28, 2003). "China to view Windows code". CNET. Retrieved May 2, 2022. James Ball, Julian Borger and Glenn Greenwald (2013-09-06). "US and UK spy agencies defeat privacy and security on the internet". The Guardian. Bruce Schneier (2013-09-06). "How to remain secure against NSA surveillance". The Guardian. Feigenbaum, Joan (30 October 2003). "Attacking an Obfuscated Cipher by Injecting Faults". Digital Rights Management: ACM CCS-9 Workshop, DRM 2002, Washington, DC, USA, November 18, 2002, Revised Papers. Second International Workshop on Digital Rights Management. Lecture Notes in Computer Science. Vol. 2696. Springer Berlin Heidelberg. p. 17. ISBN 978-3-540-44993-5. Retrieved 12 January 2024 – via Internet Archive. Tony Patton (2008-11-21). "Protect your JavaScript with obfuscation". TechRepublic. Archived from the original on March 15, 2014. Retrieved May 2, 2022. While the Web promotes the sharing of such code, there are times when you or a client may not want to share their JavaScript code. This may be due to the sensitive nature of data within the code, proprietary calculations, or any other scenario. Orenstein, David (January 10, 2000). "Application Programming Interface". Computerworld. Retrieved May 2, 2022. "Commission Decision of 24.03.2004 relating to a proceeding under Article 82 of the EC Treaty (Case COMP/C-3/37.792 Microsoft)" (PDF). European Commission. March 24, 2004. Archived from the original (PDF) on October 28, 2008. Retrieved June 17, 2009. Wilson, Ben (2008-10-01). "Apple Drops NDA for Released iPhone Software". CNET. Archived from the original on 2013-03-08. Retrieved 2022-05-02. The Linux Information Project (2006-04-29). "Vendor Lock-in Definition". Retrieved 2009-06-11. Vendor lock-in, or just lock-in, is the situation in which customers are dependent on a single manufacturer or supplier for some product [...] This dependency is typically a result of standards that are controlled by the vendor [...] It can grant the vendor some extent of monopoly power [...] The best way for an organization to avoid becoming a victim of vendor lock-in is to use products that conform to free, industry-wide standards. Free standards are those that can be used by anyone and are not controlled by a single company. In the case of computers, this can usually be accomplished by using free software rather than proprietary software (i.e., commercial software). Don Reisinger (2011-09-29). "Apple wins key battle against Psystar over Mac clones". Retrieved 2022-05-02. "What happens when a proprietary software company dies?". Linux. October 24, 2003. Retrieved May 2, 2022. Livingston, Brian (December 15, 2006). "Microsoft Turns Up The Heat On Windows 2000 Users". CRN. Retrieved May 2, 2022. Cassia, Fernando (March 28, 2007). "Open Source, the only weapon against 'planned obsolescence'". The Inquirer. Linux Today. Archived from the original on January 20, 2011. Retrieved August 2, 2012. Bell, John (October 1, 2009). "Opening the Source of Art". Technology Innovation Management Review. Archived from the original on March 30, 2014. Retrieved May 2, 2022. that no further patches to the title would be forthcoming. The community was predictably upset. Instead of giving up on the game, users decided that if Activision wasn't going to fix the bugs, they would. They wanted to save the game by getting Activision to open the source so it could be kept alive beyond the point where Activision lost interest. With some help from members of the development team that were active on fan forums, they were eventually able to convince Activision to release Call to Power II's source code in October of 2003. Wen, Howard (June 10, 2004). "Keeping the Myths Alive". Linux Dev Center. Archived from the original on April 6, 2013. Retrieved December 22, 2012. fans of the Myth trilogy have taken this idea a step further: they have official access to the source code for the Myth games. Organized under the name MythDevelopers, this all-volunteer group of programmers, artists, and other talented people devote their time to improving and supporting further development of the Myth game series. Largent, Andy (October 8, 2003). "Homeworld Source Code Released". Inside Mac Games. Archived from the original on October 12, 2013. Retrieved November 24, 2012. With the release of Homeworld 2 for the PC, Relic Entertainment has decided to give back to their impressive fan community by releasing the source code to the original Homeworld. Rosen, Lawrence (2004). Open Source Licensing. Upper Saddle River: Prentice Hall. pp. 52, 255, 259. ISBN 978-0-13-148787-1. Havoc Pennington (2008-03-02). "Debian Tutorial". Archived from the original on 2018-01-29. Retrieved 2009-06-04. It is important to distinguish commercial software from proprietary software. Proprietary software is non-free software, while commercial software is software sold for money. Russell McOrmond (2000-01-04). "What is "Commercial Software"?". Retrieved 2009-05-02. Michael K. Johnson (1996-09-01). "Licenses and Copyright". Retrieved 2009-06-16. If you program for Linux, you do need to understand licensing, no matter if you are writing free software or commercial software. Eric S. Raymond (2003-12-29). "Proprietary, Jargon File". Retrieved 2009-06-12. Proprietary software should be distinguished from commercial software. It is possible for the software to be commercial [...] without being proprietary. The reverse is also possible, for example in binary-only freeware. "Selling Free Software". GNU Project. "The Commercial Software Model". Microsoft. May 2001. Archived from the original on 2007-03-05. Open Source Versus Commercial Software: Why Proprietary Software is Here to Stay. Sams Publishing. October 2005. Retrieved 2022-05-02. Media related to Proprietary software at Wikimedia Commons
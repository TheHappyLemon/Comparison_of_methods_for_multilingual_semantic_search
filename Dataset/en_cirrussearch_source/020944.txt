In mathematics, a permutation of a set is, loosely speaking, an arrangement of its members into a sequence or linear order, or if the set is already ordered, a rearrangement of its elements. The word "permutation" also refers to the act or process of changing the linear order of an ordered set. For example, there are six permutations (orderings) of the set {1, 2, 3}: written as tuples, they are (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), and (3, 2, 1). Anagrams of a word whose letters are all different are also permutations: the letters are already ordered in the original word, and the anagram reorders them. The study of permutations of finite sets is an important topic in combinatorics and group theory. Permutations are used in almost every branch of mathematics and in many other fields of science. In computer science, they are used for analyzing sorting algorithms; in quantum physics, for describing states of particles; and in biology, for describing RNA sequences. The number of permutations of n distinct objects is n factorial, usually written as n!, which means the product of all positive integers less than or equal to n. Formally, a permutation of a set S is defined as a bijection from S to itself. That is, it is a function from S to S for which every element occurs exactly once as an image value. Such a function σ:S→S{\displaystyle \sigma :S\to S} is equivalent to the rearrangement of the elements of S in which each element i is replaced by the corresponding σ(i){\displaystyle \sigma (i)}. For example, the permutation (3, 1, 2) is described by the function σ{\displaystyle \sigma } defined as σ(1)=3,σ(2)=1,σ(3)=2{\displaystyle \sigma (1)=3,\quad \sigma (2)=1,\quad \sigma (3)=2}. The collection of all permutations of a set form a group called the symmetric group of the set. The group operation is the composition of functions (performing one rearrangement after the other), which results in another function (rearrangement). The properties of permutations do not depend on the nature of the elements being permuted, only on their number, so one often considers the standard set S={1,2,…,n}{\displaystyle S=\{1,2,\ldots ,n\}}. In elementary combinatorics, the k-permutations, or partial permutations, are the ordered arrangements of k distinct elements selected from a set. When k is equal to the size of the set, these are the permutations in the previous sense. Permutations called hexagrams were used in China in the I Ching (Pinyin: Yi Jing) as early as 1000 BC. In Greece, Plutarch wrote that Xenocrates of Chalcedon (396–314 BC) discovered the number of different syllables possible in the Greek language. This would have been the first attempt on record to solve a difficult problem in permutations and combinations. Al-Khalil (717–786), an Arab mathematician and cryptographer, wrote the Book of Cryptographic Messages. It contains the first use of permutations and combinations, to list all possible Arabic words with and without vowels. The rule to determine the number of permutations of n objects was known in Indian culture around 1150 AD. The Lilavati by the Indian mathematician Bhāskara II contains a passage that translates as follows: The product of multiplication of the arithmetical series beginning and increasing by unity and continued to the number of places, will be the variations of number with specific figures. In 1677, Fabian Stedman described factorials when explaining the number of permutations of bells in change ringing. Starting from two bells: "first, two must be admitted to be varied in two ways", which he illustrates by showing 1 2 and 2 1. He then explains that with three bells there are "three times two figures to be produced out of three" which again is illustrated. His explanation involves "cast away 3, and 1.2 will remain; cast away 2, and 1.3 will remain; cast away 1, and 2.3 will remain". He then moves on to four bells and repeats the casting away argument showing that there will be four different sets of three. Effectively, this is a recursive process. He continues with five bells using the "casting away" method and tabulates the resulting 120 combinations. At this point he gives up and remarks: Now the nature of these methods is such, that the changes on one number comprehends the changes on all lesser numbers, ... insomuch that a compleat Peal of changes on one number seemeth to be formed by uniting of the compleat Peals on all lesser numbers into one entire body; Stedman widens the consideration of permutations; he goes on to consider the number of permutations of the letters of the alphabet and of horses from a stable of 20. A first case in which seemingly unrelated mathematical questions were studied with the help of permutations occurred around 1770, when Joseph Louis Lagrange, in the study of polynomial equations, observed that properties of the permutations of the roots of an equation are related to the possibilities to solve it. This line of work ultimately resulted, through the work of Évariste Galois, in Galois theory, which gives a complete description of what is possible and impossible with respect to solving polynomial equations (in one unknown) by radicals. In modern mathematics, there are many similar situations in which understanding a problem requires studying certain permutations related to it. Permutations played an important role in the cryptanalysis of the Enigma machine, a cipher device used by Nazi Germany during World War II. In particular, one important property of permutations, namely, that two permutations are conjugate exactly when they have the same cycle type, was used by cryptologist Marian Rejewski to break the German Enigma cipher in turn of years 1932-1933. In mathematics texts it is customary to denote permutations using lowercase Greek letters. Commonly, either α,β,γ{\displaystyle \alpha ,\beta ,\gamma } or σ,τ,ρ,π{\displaystyle \sigma ,\tau ,\rho ,\pi } are used. A permutation can be defined as a bijection (an invertible mapping, a one-to-one and onto function) from a set S to itself: σ:S ⟶∼ S.{\displaystyle \sigma :S\ {\stackrel {\sim }{\longrightarrow }}\ S.} The identity permutation is defined by σ(x)=x{\displaystyle \sigma (x)=x} for all elements x∈S{\displaystyle x\in S}, and can be denoted by the number 1{\displaystyle 1}, by id=idS{\displaystyle {\text{id}}={\text{id}}_{S}}, or by a single 1-cycle (x). The set of all permutations of a set with n elements forms the symmetric group Sn{\displaystyle S_{n}}, where the group operation is composition of functions. Thus for two permutations σ{\displaystyle \sigma } and τ{\displaystyle \tau } in the group Sn{\displaystyle S_{n}}, their product π=στ{\displaystyle \pi =\sigma \tau } is defined by: π(i)=σ(τ(i)).{\displaystyle \pi (i)=\sigma (\tau (i)).} Composition is usually written without a dot or other sign. In general, composition of two permutations is not commutative: τσ≠στ.{\displaystyle \tau \sigma \neq \sigma \tau .} As a bijection from a set to itself, a permutation is a function that performs a rearrangement of a set, termed an active permutation or substitution. An older viewpoint sees a permutation as an ordered arrangement or list of all the elements of S, called a passive permutation (see § One-line notation below). A permutation σ{\displaystyle \sigma } can be decomposed into one or more disjoint cycles which are the orbits of the cyclic group ⟨σ⟩={1,σ,σ2,…}{\displaystyle \langle \sigma \rangle =\{1,\sigma ,\sigma ^{2},\ldots \}} acting on the set S. A cycle is found by repeatedly applying the permutation to an element: x,σ(x),σ(σ(x)),…,σk−1(x){\displaystyle x,\sigma (x),\sigma (\sigma (x)),\ldots ,\sigma ^{k-1}(x)}, where we assume σk(x)=x{\displaystyle \sigma ^{k}(x)=x} . A cycle consisting of k elements is called a k-cycle. (See § Cycle notation below.) A fixed point of a permutation σ{\displaystyle \sigma } is an element x which is taken to itself, that is σ(x)=x{\displaystyle \sigma (x)=x}, forming a 1-cycle (x){\displaystyle (\,x\,)}. A permutation with no fixed points is called a derangement. A permutation exchanging two elements (a single 2-cycle) and leaving the others fixed is called a transposition. Several notations are widely used to represent permutations conveniently. Cycle notation is a popular choice, as it is compact and shows the permutation's structure clearly. This article will use cycle notation unless otherwise specified. Cauchy's two-line notation lists the elements of S in the first row, and the image of each element below it in the second row. For example, the permutation of S = {1, 2, 3, 4, 5, 6} given by the function σ(1)=2,  σ(2)=6,  σ(3)=5,  σ(4)=4,  σ(5)=3,  σ(6)=1{\displaystyle \sigma (1)=2,\ \ \sigma (2)=6,\ \ \sigma (3)=5,\ \ \sigma (4)=4,\ \ \sigma (5)=3,\ \ \sigma (6)=1} can be written as σ=(123456265431).{\displaystyle \sigma ={\begin{pmatrix}1&2&3&4&5&6\\2&6&5&4&3&1\end{pmatrix}}.} The elements of S may appear in any order in the first row, so this permutation could also be written: σ=(234561654312)=(654321134562).{\displaystyle \sigma ={\begin{pmatrix}2&3&4&5&6&1\\6&5&4&3&1&2\end{pmatrix}}={\begin{pmatrix}6&5&4&3&2&1\\1&3&4&5&6&2\end{pmatrix}}.} If there is a "natural" order for the elements of S, say x1,x2,…,xn{\displaystyle x_{1},x_{2},\ldots ,x_{n}}, then one uses this for the first row of the two-line notation: σ=(x1x2x3⋯xnσ(x1)σ(x2)σ(x3)⋯σ(xn)).{\displaystyle \sigma ={\begin{pmatrix}x_{1}&x_{2}&x_{3}&\cdots &x_{n}\\\sigma (x_{1})&\sigma (x_{2})&\sigma (x_{3})&\cdots &\sigma (x_{n})\end{pmatrix}}.} Under this assumption, one may omit the first row and write the permutation in one-line notation as σ=σ(x1)σ(x2)σ(x3)⋯σ(xn){\displaystyle \sigma =\sigma (x_{1})\;\sigma (x_{2})\;\sigma (x_{3})\;\cdots \;\sigma (x_{n})}, that is, as an ordered arrangement of the elements of S. Care must be taken to distinguish one-line notation from the cycle notation described below: a common usage is to omit parentheses or other enclosing marks for one-line notation, while using parentheses for cycle notation. The one-line notation is also called the word representation. The example above would then be: σ=(123456265431)=265431.{\displaystyle \sigma ={\begin{pmatrix}1&2&3&4&5&6\\2&6&5&4&3&1\end{pmatrix}}=265431.} (It is typical to use commas to separate these entries only if some have two or more digits.) This compact form is common in elementary combinatorics and computer science. It is especially useful in applications where the permutations are to be compared as larger or smaller using lexicographic order. Cycle notation describes the effect of repeatedly applying the permutation on the elements of the set S, with an orbit being called a cycle. The permutation is written as a list of cycles; since distinct cycles involve disjoint sets of elements, this is referred to as "decomposition into disjoint cycles". To write down the permutation σ{\displaystyle \sigma } in cycle notation, one proceeds as follows: Write an opening bracket followed by an arbitrary element x of S{\displaystyle S}: (x{\displaystyle (\,x} Trace the orbit of x, writing down the values under successive applications of σ{\displaystyle \sigma }: (x,σ(x),σ(σ(x)),…{\displaystyle (\,x,\sigma (x),\sigma (\sigma (x)),\ldots } Repeat until the value returns to x, and close the parenthesis without repeating x: (xσ(x)σ(σ(x))…){\displaystyle (\,x\,\sigma (x)\,\sigma (\sigma (x))\,\ldots \,)} Continue with an element y of S which was not yet written, and repeat the above process: (xσ(x)σ(σ(x))…)(y…){\displaystyle (\,x\,\sigma (x)\,\sigma (\sigma (x))\,\ldots \,)(\,y\,\ldots \,)} Repeat until all elements of S are written in cycles. Also, it is common to omit 1-cycles, since these can be inferred: for any element x in S not appearing in any cycle, one implicitly assumes σ(x)=x{\displaystyle \sigma (x)=x}. Following the convention of omitting 1-cycles, one may interpret an individual cycle as a permutation which fixes all the elements not in the cycle (a cyclic permutation having only one cycle of length greater than 1). Then the list of disjoint cycles can be seen as the composition of these cyclic permutations. For example, the one-line permutation σ=265431{\displaystyle \sigma =265431} can be written in cycle notation as: σ=(126)(35)(4)=(126)(35).{\displaystyle \sigma =(126)(35)(4)=(126)(35).} This may be seen as the composition σ=κ1κ2{\displaystyle \sigma =\kappa _{1}\kappa _{2}} of cyclic permutations: κ1=(126)=(126)(3)(4)(5),κ2=(35)=(35)(1)(2)(6).{\displaystyle \kappa _{1}=(126)=(126)(3)(4)(5),\quad \kappa _{2}=(35)=(35)(1)(2)(6).} While permutations in general do not commute, disjoint cycles do; for example: σ=(126)(35)=(35)(126).{\displaystyle \sigma =(126)(35)=(35)(126).} Also, each cycle can be rewritten from a different starting point; for example, σ=(126)(35)=(261)(53).{\displaystyle \sigma =(126)(35)=(261)(53).} Thus one may write the disjoint cycles of a given permutation in many different ways. A convenient feature of cycle notation is that inverting the permutation is given by reversing the order of the elements in each cycle. For example, σ−1=(A2(126)(35))−1=(621)(53).{\displaystyle \sigma ^{-1}=\left({\vphantom {A^{2}}}(126)(35)\right)^{-1}=(621)(53).} In some combinatorial contexts it is useful to fix a certain order for the elements in the cycles and of the (disjoint) cycles themselves. Miklós Bóna calls the following ordering choices the canonical cycle notation: in each cycle the largest element is listed first the cycles are sorted in increasing order of their first element, not omitting 1-cycles For example, (513)(6)(827)(94) is a permutation of S = {1, 2, . . . , 9} in canonical cycle notation. Richard Stanley calls this the "standard representation" of a permutation, and Martin Aigner uses "standard form". Sergey Kitaev also uses the "standard form" terminology, but reverses both choices; that is, each cycle lists its minimal element first, and the cycles are sorted in decreasing order of their minimal elements. There are two ways to denote the composition of two permutations. In the most common notation, σ⋅τ{\displaystyle \sigma \cdot \tau } is the function that maps any element x to σ(τ(x)){\displaystyle \sigma (\tau (x))}. The rightmost permutation is applied to the argument first, because the argument is written to the right of the function. A different rule for multiplying permutations comes from writing the argument to the left of the function, so that the leftmost permutation acts first. In this notation, the permutation is often written as an exponent, so σ acting on x is written xσ; then the product is defined by xσ⋅τ=(xσ)τ{\displaystyle x^{\sigma \cdot \tau }=(x^{\sigma })^{\tau }}. This article uses the first definition, where the rightmost permutation is applied first. The function composition operation satisfies the axioms of a group. It is associative, meaning (ρσ)τ=ρ(στ){\displaystyle (\rho \sigma )\tau =\rho (\sigma \tau )}, and products of more than two permutations are usually written without parentheses. The composition operation also has an identity element (the identity permutation id{\displaystyle {\text{id}}}), and each permutation σ{\displaystyle \sigma } has an inverse σ−1{\displaystyle \sigma ^{-1}} (its inverse function) with σ−1σ=σσ−1=id{\displaystyle \sigma ^{-1}\sigma =\sigma \sigma ^{-1}={\text{id}}}. The concept of a permutation as an ordered arrangement admits several generalizations that have been called permutations, especially in older literature. In older literature and elementary textbooks, a k-permutation of n (sometimes called a partial permutation, sequence without repetition, variation, or arrangement) means an ordered arrangement (list) of a k-element subset of an n-set. The number of such k-permutations (k-arrangements) of n{\displaystyle n} is denoted variously by such symbols as Pkn{\displaystyle P_{k}^{n}}, nPk{\displaystyle _{n}P_{k}}, nPk{\displaystyle ^{n}\!P_{k}}, Pn,k{\displaystyle P_{n,k}}, P(n,k){\displaystyle P(n,k)}, or Ank{\displaystyle A_{n}^{k}}, computed by the formula: P(n,k)=n⋅(n−1)⋅(n−2)⋯(n−k+1)⏟k factors{\displaystyle P(n,k)=\underbrace {n\cdot (n-1)\cdot (n-2)\cdots (n-k+1)} _{k\ \mathrm {factors} }}, which is 0 when k > n, and otherwise is equal to n!(n−k)!.{\displaystyle {\frac {n!}{(n-k)!}}.} The product is well defined without the assumption that n{\displaystyle n} is a non-negative integer, and is of importance outside combinatorics as well; it is known as the Pochhammer symbol (n)k{\displaystyle (n)_{k}} or as the k{\displaystyle k}-th falling factorial power nk_{\displaystyle n^{\underline {k}}}: P(n,k)=nPk=(n)k=nk_.{\displaystyle P(n,k)={_{n}}P_{k}=(n)_{k}=n^{\underline {k}}.} This usage of the term permutation is closely associated with the term combination to mean a subset. A k-combination of a set S is a k-element subset of S: the elements of a combination are not ordered. Ordering the k-combinations of S in all possible ways produces the k-permutations of S. The number of k-combinations of an n-set, C(n,k), is therefore related to the number of k-permutations of n by: C(n,k)=P(n,k)P(k,k)=nk_k!=n!(n−k)!k!.{\displaystyle C(n,k)={\frac {P(n,k)}{P(k,k)}}={\frac {n^{\underline {k}}}{k!}}={\frac {n!}{(n-k)!\,k!}}.} These numbers are also known as binomial coefficients, usually denoted (nk){\displaystyle {\tbinom {n}{k}}}: C(n,k)=nCk=(nk).{\displaystyle C(n,k)={_{n}}C_{k}={\binom {n}{k}}.} Ordered arrangements of k elements of a set S, where repetition is allowed, are called k-tuples. They have sometimes been referred to as permutations with repetition, although they are not permutations in the usual sense. They are also called words over the alphabet S. If the set S has n elements, the number of k-tuples over S is nk.{\displaystyle n^{k}.} A formal language is a set of words obeying specified rules. If M is a finite multiset, then a multiset permutation is an ordered arrangement of elements of M in which each element appears a number of times equal exactly to its multiplicity in M. An anagram of a word having some repeated letters is an example of a multiset permutation. If the multiplicities of the elements of M (taken in some order) are m1{\displaystyle m_{1}}, m2{\displaystyle m_{2}}, ..., ml{\displaystyle m_{l}} and their sum (that is, the size of M) is n, then the number of multiset permutations of M is given by the multinomial coefficient, (nm1,m2,…,ml)=n!m1!m2!⋯ml!=(∑i=1lmi)!∏i=1lmi!.{\displaystyle {n \choose m_{1},m_{2},\ldots ,m_{l}}={\frac {n!}{m_{1}!\,m_{2}!\,\cdots \,m_{l}!}}={\frac {\left(\sum _{i=1}^{l}{m_{i}}\right)!}{\prod _{i=1}^{l}{m_{i}!}}}.} For example, the number of distinct anagrams of the word MISSISSIPPI is: 11!1!4!4!2!=34650{\displaystyle {\frac {11!}{1!\,4!\,4!\,2!}}=34650}. A k-permutation of a multiset M is a sequence of k elements of M in which each element appears a number of times less than or equal to its multiplicity in M (an element's repetition number). Permutations, when considered as arrangements, are sometimes referred to as linearly ordered arrangements. If, however, the objects are arranged in a circular manner this distinguished ordering is weakened: there is no "first element" in the arrangement, as any element can be considered as the start. An arrangement of distinct objects in a circular manner is called a circular permutation. These can be formally defined as equivalence classes of ordinary permutations of these objects, for the equivalence relation generated by moving the final element of the linear arrangement to its front. Two circular permutations are equivalent if one can be rotated into the other. The following four circular permutations on four letters are considered to be the same. 1 4 2 3 4 3 2 1 3 4 1 2 2 3 1 4 The circular arrangements are to be read counter-clockwise, so the following two are not equivalent since no rotation can bring one to the other. 1 1 4 3 3 4 2 2 There are (n – 1)! circular permutations of a set with n elements. The number of permutations of n distinct objects is n!. The number of n-permutations with k disjoint cycles is the signless Stirling number of the first kind, denoted c(n,k){\displaystyle c(n,k)} or [nk]{\displaystyle [{\begin{smallmatrix}n\\k\end{smallmatrix}}]}. The cycles (including the fixed points) of a permutation σ{\displaystyle \sigma } of a set with n elements partition that set; so the lengths of these cycles form an integer partition of n, which is called the cycle type (or sometimes cycle structure or cycle shape) of σ{\displaystyle \sigma }. There is a "1" in the cycle type for every fixed point of σ{\displaystyle \sigma }, a "2" for every transposition, and so on. The cycle type of β=(125)(34)(68)(7){\displaystyle \beta =(1\,2\,5\,)(\,3\,4\,)(6\,8\,)(\,7\,)} is (3,2,2,1).{\displaystyle (3,2,2,1).} This may also be written in a more compact form as [112231]. More precisely, the general form is [1α12α2⋯nαn]{\displaystyle [1^{\alpha _{1}}2^{\alpha _{2}}\dotsm n^{\alpha _{n}}]}, where α1,…,αn{\displaystyle \alpha _{1},\ldots ,\alpha _{n}} are the numbers of cycles of respective length. The number of permutations of a given cycle type is n!1α12α2⋯nαnα1!α2!⋯αn!{\displaystyle {\frac {n!}{1^{\alpha _{1}}2^{\alpha _{2}}\dotsm n^{\alpha _{n}}\alpha _{1}!\alpha _{2}!\dotsm \alpha _{n}!}}}. The number of cycle types of a set with n elements equals the value of the partition function p(n){\displaystyle p(n)}. Polya's cycle index polynomial is a generating function which counts permutations by their cycle type. In general, composing permutations written in cycle notation follows no easily described pattern – the cycles of the composition can be different from those being composed. However the cycle type is preserved in the special case of conjugating a permutation σ{\displaystyle \sigma } by another permutation π{\displaystyle \pi }, which means forming the product πσπ−1{\displaystyle \pi \sigma \pi ^{-1}}. Here, πσπ−1{\displaystyle \pi \sigma \pi ^{-1}} is the conjugate of σ{\displaystyle \sigma } by π{\displaystyle \pi } and its cycle notation can be obtained by taking the cycle notation for σ{\displaystyle \sigma } and applying π{\displaystyle \pi } to all the entries in it. It follows that two permutations are conjugate exactly when they have the same cycle type. The order of a permutation σ{\displaystyle \sigma } is the smallest positive integer m so that σm=id{\displaystyle \sigma ^{m}=\mathrm {id} }. It is the least common multiple of the lengths of its cycles. For example, the order of σ=(152)(34){\displaystyle \sigma =(152)(34)} is lcm(3,2)=6{\displaystyle {\text{lcm}}(3,2)=6}. Every permutation of a finite set can be expressed as the product of transpositions. Although many such expressions for a given permutation may exist, either they all contain an even number of transpositions or they all contain an odd number of transpositions. Thus all permutations can be classified as even or odd depending on this number. This result can be extended so as to assign a sign, written sgn⁡σ{\displaystyle \operatorname {sgn} \sigma }, to each permutation. sgn⁡σ=+1{\displaystyle \operatorname {sgn} \sigma =+1} if σ{\displaystyle \sigma } is even and sgn⁡σ=−1{\displaystyle \operatorname {sgn} \sigma =-1} if σ{\displaystyle \sigma } is odd. Then for two permutations σ{\displaystyle \sigma } and π{\displaystyle \pi } sgn⁡(σπ)=sgn⁡σ⋅sgn⁡π.{\displaystyle \operatorname {sgn} (\sigma \pi )=\operatorname {sgn} \sigma \cdot \operatorname {sgn} \pi .} It follows that sgn⁡(σσ−1)=+1.{\displaystyle \operatorname {sgn} \left(\sigma \sigma ^{-1}\right)=+1.} The sign of a permutation is equal to the determinant of its permutation matrix (below). A permutation matrix is an n × n matrix that has exactly one entry 1 in each column and in each row, and all other entries are 0. There are several ways to assign a permutation matrix to a permutation of {1, 2, ..., n}. One natural approach is to define Lσ{\displaystyle L_{\sigma }} to be the linear transformation of Rn{\displaystyle \mathbb {R} ^{n}} which permutes the standard basis {e1,…,en}{\displaystyle \{\mathbf {e} _{1},\ldots ,\mathbf {e} _{n}\}} by Lσ(ej)=eσ(j){\displaystyle L_{\sigma }(\mathbf {e} _{j})=\mathbf {e} _{\sigma (j)}}, and define Mσ{\displaystyle M_{\sigma }} to be its matrix. That is, Mσ{\displaystyle M_{\sigma }} has its jth column equal to the n × 1 column vector eσ(j){\displaystyle \mathbf {e} _{\sigma (j)}}: its (i, j) entry is to 1 if i = σ(j), and 0 otherwise. Since composition of linear mappings is described by matrix multiplication, it follows that this construction is compatible with composition of permutations: MσMτ=Mστ{\displaystyle M_{\sigma }M_{\tau }=M_{\sigma \tau }}. For example, the one-line permutations σ=213, τ=231{\displaystyle \sigma =213,\ \tau =231} have product στ=132{\displaystyle \sigma \tau =132}, and the corresponding matrices are: MσMτ=(010100001)(001100010)=(100001010)=Mστ.{\displaystyle M_{\sigma }M_{\tau }={\begin{pmatrix}0&1&0\\1&0&0\\0&0&1\end{pmatrix}}{\begin{pmatrix}0&0&1\\1&0&0\\0&1&0\end{pmatrix}}={\begin{pmatrix}1&0&0\\0&0&1\\0&1&0\end{pmatrix}}=M_{\sigma \tau }.} It is also common in the literature to find the inverse convention, where a permutation σ is associated to the matrix Pσ=(Mσ)−1=(Mσ)T{\displaystyle P_{\sigma }=(M_{\sigma })^{-1}=(M_{\sigma })^{T}} whose (i, j) entry is 1 if j = σ(i) and is 0 otherwise. In this convention, permutation matrices multiply in the opposite order from permutations, that is, PσPτ=Pτσ{\displaystyle P_{\sigma }P_{\tau }=P_{\tau \sigma }}. In this correspondence, permutation matrices act on the right side of the standard 1×n{\displaystyle 1\times n} row vectors (ei)T{\displaystyle ({\bf {e}}_{i})^{T}}: (ei)TPσ=(eσ(i))T{\displaystyle ({\bf {e}}_{i})^{T}P_{\sigma }=({\bf {e}}_{\sigma (i)})^{T}}. The Cayley table on the right shows these matrices for permutations of 3 elements. In some applications, the elements of the set being permuted will be compared with each other. This requires that the set S has a total order so that any two elements can be compared. The set {1, 2, ..., n} with the usual ≤ relation is the most frequently used set in these applications. A number of properties of a permutation are directly related to the total ordering of S, considering the permutation written in one-line notation as a sequence σ=σ(1)σ(2)⋯σ(n){\displaystyle \sigma =\sigma (1)\sigma (2)\cdots \sigma (n)}. An ascent of a permutation σ of n is any position i < n where the following value is bigger than the current one. That is, i is an ascent if σ(i)<σ(i+1){\displaystyle \sigma (i)<\sigma (i{+}1)}. For example, the permutation 3452167 has ascents (at positions) 1, 2, 5, and 6. Similarly, a descent is a position i < n with σ(i)>σ(i+1){\displaystyle \sigma (i)>\sigma (i{+}1)}, so every i with 1≤i<n{\displaystyle 1\leq i<n} is either an ascent or a descent. An ascending run of a permutation is a nonempty increasing contiguous subsequence that cannot be extended at either end; it corresponds to a maximal sequence of successive ascents (the latter may be empty: between two successive descents there is still an ascending run of length 1). By contrast an increasing subsequence of a permutation is not necessarily contiguous: it is an increasing sequence obtained by omitting some of the values of the one-line notation. For example, the permutation 2453167 has the ascending runs 245, 3, and 167, while it has an increasing subsequence 2367. If a permutation has k − 1 descents, then it must be the union of k ascending runs. The number of permutations of n with k ascents is (by definition) the Eulerian number ⟨nk⟩{\displaystyle \textstyle \left\langle {n \atop k}\right\rangle }; this is also the number of permutations of n with k descents. Some authors however define the Eulerian number ⟨nk⟩{\displaystyle \textstyle \left\langle {n \atop k}\right\rangle } as the number of permutations with k ascending runs, which corresponds to k − 1 descents. An exceedance of a permutation σ1σ2...σn is an index j such that σj > j. If the inequality is not strict (that is, σj ≥ j), then j is called a weak exceedance. The number of n-permutations with k exceedances coincides with the number of n-permutations with k descents. A record or left-to-right maximum of a permutation σ is an element i such that σ(j) < σ(i) for all j < i. Foata's fundamental bijection transforms a permutation σ{\displaystyle \sigma } with a given canonical cycle form into the permutation f(σ)=σ^{\displaystyle f(\sigma )={\hat {\sigma }}} whose one-line notation has the same sequence of elements with parentheses removed. For example: σ=(513)(6)(827)(94)=(123456789375916824),{\displaystyle \sigma =(513)(6)(827)(94)={\begin{pmatrix}1&2&3&4&5&6&7&8&9\\3&7&5&9&1&6&8&2&4\end{pmatrix}},} σ^=513682794=(123456789513682794).{\displaystyle {\hat {\sigma }}=513682794={\begin{pmatrix}1&2&3&4&5&6&7&8&9\\5&1&3&6&8&2&7&9&4\end{pmatrix}}.} Here the first element in each canonical cycle of σ{\displaystyle \sigma } becomes a record (left-to-right maximum) of σ^{\displaystyle {\hat {\sigma }}}. Given σ^{\displaystyle {\hat {\sigma }}}, one may find its records and insert parentheses to construct the inverse transformation σ=f−1(σ^){\displaystyle \sigma =f^{-1}({\hat {\sigma }})}. Underlining the records in the above example: σ^=5_136_8_279_4{\displaystyle {\hat {\sigma }}={\underline {5}}\,1\,3\,{\underline {6}}\,{\underline {8}}\,2\,7\,{\underline {9}}\,4}, which allows the reconstruction of the cycles of σ{\displaystyle \sigma }. The following table shows σ^{\displaystyle {\hat {\sigma }}} and σ{\displaystyle \sigma } for the six permutations of S = {1, 2, 3}, with the bold text on each side showing the notation used in the bijection: one-line notation for σ^{\displaystyle {\hat {\sigma }}} and canonical cycle notation for σ{\displaystyle \sigma }. As a first corollary, the number of n-permutations with exactly k records is equal to the number of n-permutations with exactly k cycles: this last number is the signless Stirling number of the first kind, c(n,k){\displaystyle c(n,k)}. Furthermore, Foata's mapping takes an n-permutation with k weak exceedances to an n-permutation with k − 1 ascents. For example, (2)(31) = 321 has k = 2 weak exceedances (at index 1 and 2), whereas f(321) = 231 has k − 1 = 1 ascent (at index 1; that is, from 2 to 3). An inversion of a permutation σ is a pair (i, j) of positions where the entries of a permutation are in the opposite order: i<j{\displaystyle i<j} and σ(i)>σ(j){\displaystyle \sigma (i)>\sigma (j)}. Thus a descent is an inversion at two adjacent positions. For example, σ = 23154 has (i, j) = (1, 3), (2, 3), and (4, 5), where (σ(i), σ(j)) = (2, 1), (3, 1), and (5, 4). Sometimes an inversion is defined as the pair of values (σ(i), σ(j)); this makes no difference for the number of inversions, and the reverse pair (σ(j), σ(i)) is an inversion in the above sense for the inverse permutation σ−1. The number of inversions is an important measure for the degree to which the entries of a permutation are out of order; it is the same for σ and for σ−1. To bring a permutation with k inversions into order (that is, transform it into the identity permutation), by successively applying (right-multiplication by) adjacent transpositions, is always possible and requires a sequence of k such operations. Moreover, any reasonable choice for the adjacent transpositions will work: it suffices to choose at each step a transposition of i and i + 1 where i is a descent of the permutation as modified so far (so that the transposition will remove this particular descent, although it might create other descents). This is so because applying such a transposition reduces the number of inversions by 1; as long as this number is not zero, the permutation is not the identity, so it has at least one descent. Bubble sort and insertion sort can be interpreted as particular instances of this procedure to put a sequence into order. Incidentally this procedure proves that any permutation σ can be written as a product of adjacent transpositions; for this one may simply reverse any sequence of such transpositions that transforms σ into the identity. In fact, by enumerating all sequences of adjacent transpositions that would transform σ into the identity, one obtains (after reversal) a complete list of all expressions of minimal length writing σ as a product of adjacent transpositions. The number of permutations of n with k inversions is expressed by a Mahonian number. This is the coefficient of qk{\displaystyle q^{k}} in the expansion of the product [n]q!=∏m=1n∑i=0m−1qi=1(1+q)(1+q+q2)⋯(1+q+q2+⋯+qn−1),{\displaystyle [n]_{q}!=\prod _{m=1}^{n}\sum _{i=0}^{m-1}q^{i}=1\left(1+q\right)\left(1+q+q^{2}\right)\cdots \left(1+q+q^{2}+\cdots +q^{n-1}\right),} The notation [n]q!{\displaystyle [n]_{q}!} denotes the q-factorial. This expansion commonly appears in the study of necklaces. Let σ∈Sn,i,j∈{1,2,…,n}{\displaystyle \sigma \in S_{n},i,j\in \{1,2,\dots ,n\}} such that i<j{\displaystyle i<j} and σ(i)>σ(j){\displaystyle \sigma (i)>\sigma (j)}. In this case, say the weight of the inversion (i,j){\displaystyle (i,j)} is σ(i)−σ(j){\displaystyle \sigma (i)-\sigma (j)}. Kobayashi (2011) proved the enumeration formula ∑i<j,σ(i)>σ(j)(σ(i)−σ(j))=|{τ∈Sn∣τ≤σ,τ is bigrassmannian}{\displaystyle \sum _{i<j,\sigma (i)>\sigma (j)}(\sigma (i)-\sigma (j))=|\{\tau \in S_{n}\mid \tau \leq \sigma ,\tau {\text{ is bigrassmannian}}\}} where ≤{\displaystyle \leq } denotes Bruhat order in the symmetric groups. This graded partial order often appears in the context of Coxeter groups. One way to represent permutations of n things is by an integer N with 0 ≤ N < n!, provided convenient methods are given to convert between the number and the representation of a permutation as an ordered arrangement (sequence). This gives the most compact representation of arbitrary permutations, and in computing is particularly attractive when n is small enough that N can be held in a machine word; for 32-bit words this means n ≤ 12, and for 64-bit words this means n ≤ 20. The conversion can be done via the intermediate form of a sequence of numbers dn, dn−1, ..., d2, d1, where di is a non-negative integer less than i (one may omit d1, as it is always 0, but its presence makes the subsequent conversion to a permutation easier to describe). The first step then is to simply express N in the factorial number system, which is just a particular mixed radix representation, where, for numbers less than n!, the bases (place values or multiplication factors) for successive digits are (n − 1)!, (n − 2)!, ..., 2!, 1!. The second step interprets this sequence as a Lehmer code or (almost equivalently) as an inversion table. In the Lehmer code for a permutation σ, the number dn represents the choice made for the first term σ1, the number dn−1 represents the choice made for the second term σ2 among the remaining n − 1 elements of the set, and so forth. More precisely, each dn+1−i gives the number of remaining elements strictly less than the term σi. Since those remaining elements are bound to turn up as some later term σj, the digit dn+1−i counts the inversions (i,j) involving i as smaller index (the number of values j for which i < j and σi > σj). The inversion table for σ is quite similar, but here dn+1−k counts the number of inversions (i,j) where k = σj occurs as the smaller of the two values appearing in inverted order. Both encodings can be visualized by an n by n Rothe diagram (named after Heinrich August Rothe) in which dots at (i,σi) mark the entries of the permutation, and a cross at (i,σj) marks the inversion (i,j); by the definition of inversions a cross appears in any square that comes both before the dot (j,σj) in its column, and before the dot (i,σi) in its row. The Lehmer code lists the numbers of crosses in successive rows, while the inversion table lists the numbers of crosses in successive columns; it is just the Lehmer code for the inverse permutation, and vice versa. To effectively convert a Lehmer code dn, dn−1, ..., d2, d1 into a permutation of an ordered set S, one can start with a list of the elements of S in increasing order, and for i increasing from 1 to n set σi to the element in the list that is preceded by dn+1−i other ones, and remove that element from the list. To convert an inversion table dn, dn−1, ..., d2, d1 into the corresponding permutation, one can traverse the numbers from d1 to dn while inserting the elements of S from largest to smallest into an initially empty sequence; at the step using the number d from the inversion table, the element from S inserted into the sequence at the point where it is preceded by d elements already present. Alternatively one could process the numbers from the inversion table and the elements of S both in the opposite order, starting with a row of n empty slots, and at each step place the element from S into the empty slot that is preceded by d other empty slots. Converting successive natural numbers to the factorial number system produces those sequences in lexicographic order (as is the case with any mixed radix number system), and further converting them to permutations preserves the lexicographic ordering, provided the Lehmer code interpretation is used (using inversion tables, one gets a different ordering, where one starts by comparing permutations by the place of their entries 1 rather than by the value of their first entries). The sum of the numbers in the factorial number system representation gives the number of inversions of the permutation, and the parity of that sum gives the signature of the permutation. Moreover, the positions of the zeroes in the inversion table give the values of left-to-right maxima of the permutation (in the example 6, 8, 9) while the positions of the zeroes in the Lehmer code are the positions of the right-to-left minima (in the example positions the 4, 8, 9 of the values 1, 2, 5); this allows computing the distribution of such extrema among all permutations. A permutation with Lehmer code dn, dn−1, ..., d2, d1 has an ascent n − i if and only if di ≥ di+1. In computing it may be required to generate permutations of a given sequence of values. The methods best adapted to do this depend on whether one wants some randomly chosen permutations, or all permutations, and in the latter case if a specific ordering is required. Another question is whether possible equality among entries in the given sequence is to be taken into account; if so, one should only generate distinct multiset permutations of the sequence. An obvious way to generate permutations of n is to generate values for the Lehmer code (possibly using the factorial number system representation of integers up to n!), and convert those into the corresponding permutations. However, the latter step, while straightforward, is hard to implement efficiently, because it requires n operations each of selection from a sequence and deletion from it, at an arbitrary position; of the obvious representations of the sequence as an array or a linked list, both require (for different reasons) about n2/4 operations to perform the conversion. With n likely to be rather small (especially if generation of all permutations is needed) that is not too much of a problem, but it turns out that both for random and for systematic generation there are simple alternatives that do considerably better. For this reason it does not seem useful, although certainly possible, to employ a special data structure that would allow performing the conversion from Lehmer code to permutation in O(n log n) time. A sequence of swaps (transpositions), that is, a monotone swap chain, can be given, each swap applied (on the left) to the previous chain providing a new permutation, such that all the permutations can be retrieved, each only once . This has an additional structure, generation being in steps: after completely retrieving Sk−1{\displaystyle S_{k-1}}, continue retrieving cosets τiSk−1{\displaystyle \tau _{i}S_{k-1}} of Sk−1{\displaystyle S_{k-1}} in Sk{\displaystyle S_{k}}, by appropriately choosing the swaps τi{\displaystyle \tau _{i}}. Natural choice for the swaps τi{\displaystyle \tau _{i}} is (pik){\displaystyle (p_{i}k)}, with 1≤pi<k{\displaystyle 1\leq p_{i}<k} and 1≤i<k{\displaystyle 1\leq i<k}. To go further, it is useful to note that, since each Sk{\displaystyle S_{k}} is given as a sequence, there is a last element σk∈Sk{\displaystyle \sigma _{k}\in S_{k}}. Then, two arbitrary elements of π′,π″∈Sk−Sk−1{\displaystyle \pi ',\pi ''\in S_{k}-S_{k-1}} are given by π′=ω′(pjk)σk−1⋯σk−1(pik)σk−1⋯σk−1(p1k)σk−1{\displaystyle \pi '=\omega '(p_{j}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{i}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{1}k)\sigma _{k-1}} and π″=ω″(pik)σk−1⋯σk−1(p1k)σk−1{\displaystyle \pi ''=\omega ''(p_{i}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{1}k)\sigma _{k-1}}, where ω′,ω″∈Sk−1{\displaystyle \omega ',\omega ''\in S_{k-1}}; for π′=π″{\displaystyle \pi '=\pi ''} it is necessary and sufficient that (pjk)σk−1(pj−1k)σk−1⋯σk−1(pi+1k)=ω∈Sk−1{\displaystyle (p_{j}k)\sigma _{k-1}(p_{j-1}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{i+1}k)=\omega \in S_{k-1}}. As ω∈Sk{\displaystyle \omega \in S_{k}}, one needs ω(k)=k{\displaystyle \omega (k)=k}, that is, (pjk)σk−1(pj−1k)σk−1⋯σk−1(pi+2k)σk−1(pi+1k)k=k{\displaystyle (p_{j}k)\sigma _{k-1}(p_{j-1}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{i+2}k)\sigma _{k-1}(p_{i+1}k)k=k}. Concluding, elements π=ωσ(pik)σk−1(pi−1k)σk−1⋯σk−1(p1k)σk−1∈Sk−Sk−1{\displaystyle \pi =\omega \sigma (p_{i}k)\sigma _{k-1}(p_{i-1}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{1}k)\sigma _{k-1}\in S_{k}-S_{k-1}} are all distinct if and only if for any j>i{\displaystyle j>i}, (σk−1)j−ipi≠pj{\displaystyle (\sigma _{k-1})^{j-i}p_{i}\neq p_{j}} (no repeat condition). In particular, for all generated permutations to be distinct it is not necessary for the pi{\displaystyle p_{i}} values to be distinct. In the process, one gets that σk=σk−1(pk−1k)σk−1(pk−2k)σk−1⋯σk−1(p1k)σk−1{\displaystyle \sigma _{k}=\sigma _{k-1}(p_{k-1}k)\sigma _{k-1}(p_{k-2}k)\sigma _{k-1}\cdots \sigma _{k-1}(p_{1}k)\sigma _{k-1}} and this provides the recursion procedure. Obviuosly, for σ2=(12){\displaystyle \sigma _{2}=(12)} there is only one possibility and for σ3{\displaystyle \sigma _{3}} there are only two possibilities: either σ3=σ2(13)σ2(13)σ2=(13){\displaystyle \sigma _{3}=\sigma _{2}(13)\sigma _{2}(13)\sigma _{2}=(13)}, or σ3′=σ2(23)σ2(23)σ2=(23){\displaystyle \sigma _{3}'=\sigma _{2}(23)\sigma _{2}(23)\sigma _{2}=(23)}; if σ3=(13){\displaystyle \sigma _{3}=(13)}, from the 33{\displaystyle 3^{3}} available triplets only 6 satisfy the required no repeat condition to build σ4{\displaystyle \sigma _{4}}. After choosing one of the 6, one can go further to higher k{\displaystyle k} finding the "last" permutation σk{\displaystyle \sigma _{k}}, then choosing the appropriate pi{\displaystyle p_{i}}'s and so on. Note that if σk−1{\displaystyle \sigma _{k-1}} has only one cycle of maximum size, then all pi{\displaystyle p_{i}}'s could be taken equal; pi{\displaystyle p_{i}}'s cannot be equal otherwise. One does not need to examine and understand all the possibilities for pi{\displaystyle p_{i}} multiplets; finding one is enough for the purpose and that is not difficult. Because multiplying by swap permutation takes short computing time and every new generated permutation requires only one such swap multiplication, this generation procedure is quite efficient. The last permutation in each Sk{\displaystyle S_{k}} is automatically obtained while generating, such that the most computing time one needs is to find the cycle presentation of the last permutation (but only once per each k{\displaystyle k}). After having the cycles, choosing appropriate pi{\displaystyle p_{i}}'s is almost straightforward. Also note that computing the last permutation can be realized in fewer steps than expected as it can be done in blocks of subgroups rather than piece by piece; this could be useful sometimes to go directly to certain permutation in shorter time. For example, computing the last permutation in S20{\displaystyle S_{20}} can be done in abuout 20 iterations, although S20{\displaystyle S_{20}} has about 264{\displaystyle 2^{64}} elements. Above generation algorithm depends on the sequences {pi(k)}i{\displaystyle \{p_{i}^{(k)}\}_{i}} having the no repeat property above with respect to the last permutations {σk}{\displaystyle \{\sigma _{k}\}} they induce. At each step in the generation process a number can be associated via the factorial number system and this (order) correspondence between numbers and permutations is not the same with the Lehmer code (connected with the alphabetical order of permutations instead). For generating random permutations of a given sequence of n values, it makes no difference whether one applies a randomly selected permutation of n to the sequence, or chooses a random element from the set of distinct (multiset) permutations of the sequence. This is because, even though in case of repeated values there can be many distinct permutations of n that result in the same permuted sequence, the number of such permutations is the same for each possible result. Unlike for systematic generation, which becomes unfeasible for large n due to the growth of the number n!, there is no reason to assume that n will be small for random generation. The basic idea to generate a random permutation is to generate at random one of the n! sequences of integers d1,d2,...,dn satisfying 0 ≤ di < i (since d1 is always zero it may be omitted) and to convert it to a permutation through a bijective correspondence. For the latter correspondence one could interpret the (reverse) sequence as a Lehmer code, and this gives a generation method first published in 1938 by Ronald Fisher and Frank Yates. While at the time computer implementation was not an issue, this method suffers from the difficulty sketched above to convert from Lehmer code to permutation efficiently. This can be remedied by using a different bijective correspondence: after using di to select an element among i remaining elements of the sequence (for decreasing values of i), rather than removing the element and compacting the sequence by shifting down further elements one place, one swaps the element with the final remaining element. Thus the elements remaining for selection form a consecutive range at each point in time, even though they may not occur in the same order as they did in the original sequence. The mapping from sequence of integers to permutations is somewhat complicated, but it can be seen to produce each permutation in exactly one way, by an immediate induction. When the selected element happens to be the final remaining element, the swap operation can be omitted. This does not occur sufficiently often to warrant testing for the condition, but the final element must be included among the candidates of the selection, to guarantee that all permutations can be generated. The resulting algorithm for generating a random permutation of a[0], a[1], ..., a[n − 1] can be described as follows in pseudocode: for i from n downto 2 do di ← random element of { 0, ..., i − 1 } swap a[di] and a[i − 1] This can be combined with the initialization of the array a[i] = i as follows for i from 0 to n−1 do di+1 ← random element of { 0, ..., i } a[i] ← a[di+1] a[di+1] ← i If di+1 = i, the first assignment will copy an uninitialized value, but the second will overwrite it with the correct value i. However, Fisher-Yates is not the fastest algorithm for generating a permutation, because Fisher-Yates is essentially a sequential algorithm and "divide and conquer" procedures can achieve the same result in parallel. There are many ways to systematically generate all permutations of a given sequence. One classic, simple, and flexible algorithm is based upon finding the next permutation in lexicographic ordering, if it exists. It can handle repeated values, for which case it generates each distinct multiset permutation once. Even for ordinary permutations it is significantly more efficient than generating values for the Lehmer code in lexicographic order (possibly using the factorial number system) and converting those to permutations. It begins by sorting the sequence in (weakly) increasing order (which gives its lexicographically minimal permutation), and then repeats advancing to the next permutation as long as one is found. The method goes back to Narayana Pandita in 14th century India, and has been rediscovered frequently. The following algorithm generates the next permutation lexicographically after a given permutation. It changes the given permutation in-place. Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation. Find the largest index l greater than k such that a[k] < a[l]. Swap the value of a[k] with that of a[l]. Reverse the sequence from a[k + 1] up to and including the final element a[n]. For example, given the sequence [1, 2, 3, 4] (which is in increasing order), and given that the index is zero-based, the steps are as follows: Index k = 2, because 3 is placed at an index that satisfies condition of being the largest index that is still less than a[k + 1] which is 4. Index l = 3, because 4 is the only value in the sequence that is greater than 3 in order to satisfy the condition a[k] < a[l]. The values of a[2] and a[3] are swapped to form the new sequence [1, 2, 4, 3]. The sequence after k-index a[2] to the final element is reversed. Because only one value lies after this index (the 3), the sequence remains unchanged in this instance. Thus the lexicographic successor of the initial state is permuted: [1, 2, 4, 3]. Following this algorithm, the next lexicographic permutation will be [1, 3, 2, 4], and the 24th permutation will be [4, 3, 2, 1] at which point a[k] < a[k + 1] does not exist, indicating that this is the last permutation. This method uses about 3 comparisons and 1.5 swaps per permutation, amortized over the whole sequence, not counting the initial sort. An alternative to the above algorithm, the Steinhaus–Johnson–Trotter algorithm, generates an ordering on all the permutations of a given sequence with the property that any two consecutive permutations in its output differ by swapping two adjacent values. This ordering on the permutations was known to 17th-century English bell ringers, among whom it was known as "plain changes". One advantage of this method is that the small amount of change from one permutation to the next allows the method to be implemented in constant time per permutation. The same can also easily generate the subset of even permutations, again in constant time per permutation, by skipping every other output permutation. An alternative to Steinhaus–Johnson–Trotter is Heap's algorithm, said by Robert Sedgewick in 1977 to be the fastest algorithm of generating permutations in applications. The following figure shows the output of all three aforementioned algorithms for generating all permutations of length n=4{\displaystyle n=4}, and of six additional algorithms described in the literature. Lexicographic ordering; Steinhaus–Johnson–Trotter algorithm; Heap's algorithm; Ehrlich's star-transposition algorithm: in each step, the first entry of the permutation is exchanged with a later entry; Zaks' prefix reversal algorithm: in each step, a prefix of the current permutation is reversed to obtain the next permutation; Sawada-Williams' algorithm: each permutation differs from the previous one either by a cyclic left-shift by one position, or an exchange of the first two entries; Corbett's algorithm: each permutation differs from the previous one by a cyclic left-shift of some prefix by one position; Single-track ordering: each column is a cyclic shift of the other columns; Single-track Gray code: each column is a cyclic shift of the other columns, plus any two consecutive permutations differ only in one or two transpositions. Permutations are used in the interleaver component of the error detection and correction algorithms, such as turbo codes, for example 3GPP Long Term Evolution mobile telecommunication standard uses these ideas (see 3GPP technical specification 36.212). Such applications raise the question of fast generation of permutations satisfying certain desirable properties. One of the methods is based on the permutation polynomials. Also as a base for optimal hashing in Unique Permutation Hashing. Mathematics portal Alternating permutation Convolution Cyclic order Even and odd permutations Josephus permutation Levi-Civita symbol List of permutation topics Major index Permutation category Permutation group Permutation pattern Permutation representation (symmetric group) Probability Rencontres numbers Sorting network Substitution cipher Superpattern Superpermutation Twelvefold way Weak order of permutations 1 is frequently used to represent the identity element in a non-commutative group The order is often implicitly understood. A set of integers is naturally written from smallest to largest; a set of letters is written in lexicographic order. For other sets, a natural order needs to be specified explicitly. More precisely, variations without repetition. The term is still common in other languages and appears in modern English most often in translation. The natural order in this example is the order of the letters in the original word. In older texts circular permutation was sometimes used as a synonym for cyclic permutation, but this is no longer done. See Carmichael (1956, p. 7) Webster (1969) McCoy (1968, p. 152) Nering (1970, p. 86) Heath, Thomas Little (1981). A History of Greek Mathematics. New York: Dover Publications. ISBN 0-486-24073-8. OCLC 7703465. Broemeling, Lyle D. (1 November 2011). "An Account of Early Statistical Inference in Arab Cryptology". The American Statistician. 65 (4): 255–257. doi:10.1198/tas.2011.10191. S2CID 123537702. Biggs, N. L. (1979). "The Roots of Combinatorics". Historia Math. 6 (2): 109–136. doi:10.1016/0315-0860(79)90074-0. Stedman 1677, p. 4. Stedman 1677, p. 5. Stedman 1677, pp. 6–7. Stedman 1677, p. 8. Stedman 1677, pp. 13–18. Rejewski, Marian (1980). "An application of the theory of permutations in breaking the Enigma cipher". Applicationes Mathematicae. 16 (4): 543–559. doi:10.4064/am-16-4-543-559. ISSN 1233-7234. Cash, David (2019). "CMSC 28400 Introduction to Cryptography Autumn 2019 - Notes #2: Permutations and Enigma" (PDF). Scheinerman, Edward A. (March 5, 2012). "Chapter 5: Functions". Mathematics: A Discrete Introduction (3rd ed.). Cengage Learning. p. 188. ISBN 978-0840049421. Archived from the original on February 5, 2020. Retrieved February 5, 2020. It is customary to use lowercase Greek letters (especially π, σ, and τ) to stand for permutations. Rotman 2002, p. 41 Bogart 1990, p. 487 Cameron 1994, p. 29, footnote 3. Cauchy, A. L. (January 1815). "Mémoire Sur le Nombre des Valeurs qu'une Fonction peut acquérir, lorsqu'on y permute de toutes les manières possibles les quantités qu'elle renferme" [Memoir on the number of values which a function can acquire when one permutes within it, in all possible ways, the variables which it contains]. Journal de l'École polytechnique (in French). 10: 1–28. See p. 4. English translation Wussing, Hans (2007), The Genesis of the Abstract Group Concept: A Contribution to the History of the Origin of Abstract Group Theory, Courier Dover Publications, p. 94, ISBN 9780486458687, Cauchy used his permutation notation—in which the arrangements are written one below the other and both are enclosed in parentheses—for the first time in 1815. Bogart 1990, p. 17 Gerstein 1987, p. 217 Aigner, Martin (2007). A Course in Enumeration. Springer GTM 238. pp. 24–25. ISBN 978-3-540-39035-0. Hall 1959, p. 54 Bona 2012, p.87 [The book has a typo/error here, as it gives (45) instead of (54).] Stanley, Richard P. (2012). Enumerative Combinatorics: Volume I, Second Edition. Cambridge University Press. p. 30, Prop 1.3.1. ISBN 978-1-107-01542-5. Kitaev, Sergey (2011). Patterns in Permutations and Words. Springer Science & Business Media. p. 119. ISBN 978-3-642-17333-2. Biggs, Norman L.; White, A. T. (1979). Permutation groups and combinatorial structures. Cambridge University Press. ISBN 978-0-521-22287-7. Dixon, John D.; Mortimer, Brian (1996). Permutation Groups. Springer. ISBN 978-0-387-94599-6. Cameron, Peter J. (1999). Permutation groups. Cambridge University Press. ISBN 978-0-521-65302-2. Jerrum, M. (1986). "A compact representation of permutation groups". J. Algorithms. 7 (1): 60–78. doi:10.1016/0196-6774(86)90038-6. S2CID 18896625. "Combinations and Permutations". www.mathsisfun.com. Retrieved 2020-09-10. Weisstein, Eric W. "Permutation". mathworld.wolfram.com. Retrieved 2020-09-10. Uspensky 1937, p. 18 Charalambides, Ch A. (2002). Enumerative Combinatorics. CRC Press. p. 42. ISBN 978-1-58488-290-9. Brualdi 2010, p. 46, Theorem 2.4.2 Brualdi 2010, p. 47 Brualdi 2010, p. 39 Bona 2012, pp. 97–103. Sagan, Bruce (2001), The Symmetric Group (2 ed.), Springer, p. 3 Humphreys 1996, p. 84. Hall 1959, p. 60 Bóna 2004, p. 4f. Bona 2012, pp. 4–5. Bona 2012, p. 25. Bona 2012, pp. 109–110. Slocum, Jerry; Weisstein, Eric W. (1999). "15 – puzzle". MathWorld. Wolfram Research, Inc. Retrieved October 4, 2014. Bóna 2004, p. 43. Bóna 2004, pp. 43ff. Knuth 1973, p. 12. H. A. Rothe, Sammlung combinatorisch-analytischer Abhandlungen 2 (Leipzig, 1800), 263–305. Cited in Knuth 1973, p. 14 Popp, O.T. (2002). Quickly Handling Big Permutations. priv. comm. Fisher, R.A.; Yates, F. (1948) [1938]. Statistical tables for biological, agricultural and medical research (3rd ed.). London: Oliver & Boyd. pp. 26–27. OCLC 14222135. Bacher, A.; Bodini, O.; Hwang, H.K.; Tsai, T.H. (2017). "Generating Random Permutations by Coin Tossing: Classical Algorithms, New Analysis, and Modern Implementation" (ACM Trans. Algorithms 13(2): 24:1–24:43 ed.). pp. 24–43. Sedgewick, R (1977). "Permutation generation methods" (PDF). Computing Surveys. 9 (2): 137–164. doi:10.1145/356689.356692. S2CID 12139332. Archived (PDF) from the original on 2008-02-21. Knuth 2005, pp. 1–26. "std::next_permutation". cppreference.com. 4 December 2017. Retrieved 31 March 2018. Heap, B. R. (1963). "Permutations by Interchanges". The Computer Journal. 6 (3): 293–298. doi:10.1093/comjnl/6.3.293. Mütze, Torsten; Sawada, Joe; Williams, Aaron. "Generate permutations". Combinatorial Object Server. Retrieved May 29, 2019. Zaks, S. (1984). "A new algorithm for generation of permutations". BIT Numerical Mathematics. 24 (2): 196–204. doi:10.1007/BF01937486. S2CID 30234652. Sawada, Joe; Williams, Aaron (2018). "A Hamilton path for the sigma-tau problem". Proceedings of the 29th Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2018. New Orleans, Louisiana: Society for Industrial and Applied Mathematics (SIAM). pp. 568–575. doi:10.1137/1.9781611975031.37. Corbett, P. F. (1992). "Rotator graphs: An efficient topology for point-to-point multiprocessor networks". IEEE Transactions on Parallel and Distributed Systems. 3 (5): 622–626. doi:10.1109/71.159045. Arndt, Jörg (2011). Matters Computational. Ideas, Algorithms, Source Code. Springer. doi:10.1007/978-3-642-14764-7. ISBN 978-3-642-14763-0. "3GPP TS 36.212". Dolev, Shlomi; Lahiani, Limor; Haviv, Yinnon (2013). "Unique permutation hashing". Theoretical Computer Science. 475: 59–65. doi:10.1016/j.tcs.2012.12.047. Bogart, Kenneth P. (1990), Introductory Combinatorics (2nd ed.), Harcourt Brace Jovanovich, ISBN 978-0-15-541576-8 Bóna, Miklós (2004), Combinatorics of Permutations, Chapman Hall-CRC, ISBN 978-1-58488-434-7 Bona, Miklos (2012), Combinatorics of Permutations (2nd ed.), CRC Press, ISBN 978-1-4398-5051-0 Brualdi, Richard A. (2010), Introductory Combinatorics (5th ed.), Prentice-Hall, ISBN 978-0-13-602040-0 Cameron, Peter J. (1994), Combinatorics: Topics, Techniques, Algorithms, Cambridge University Press, ISBN 978-0-521-45761-3 Carmichael, Robert D. (1956) [1937], Introduction to the theory of Groups of Finite Order, Dover, ISBN 978-0-486-60300-1 Fraleigh, John B. (1976), A First Course In Abstract Algebra (2nd ed.), Reading: Addison-Wesley, ISBN 0-201-01984-1 Gerstein, Larry J. (1987), Discrete Mathematics and Algebraic Structures, W.H. Freeman and Co., ISBN 978-0-7167-1804-8 Hall, Marshall Jr. (1959), The Theory of Groups, MacMillan Humphreys, J. F. (1996), A course in group theory, Oxford University Press, ISBN 978-0-19-853459-4 Knuth, Donald (1973), Sorting and Searching, The Art of Computer Programming, vol. 3 This book mentions the Lehmer code (without using that name) as a variant C1,...,Cn of inversion tables in exercise 5.1.1–7 (p. 19), together with two other variants. Knuth, Donald (2005), Generating All Tuples and Permutations, The Art of Computer Programming, vol. 4, Addison–Wesley, ISBN 978-0-201-85393-3 Fascicle 2, first printing. McCoy, Neal H. (1968), Introduction To Modern Algebra, Revised Edition, Boston: Allyn and Bacon, LCCN 68015225 Nering, Evar D. (1970), Linear Algebra and Matrix Theory (2nd ed.), New York: Wiley, LCCN 76091646 Rotman, Joseph J. (2002), Advanced Modern Algebra, Prentice-Hall, ISBN 978-0-13-087868-7 Stedman, Fabian (1677), Campanalogia, London The publisher is given as "W.S." who may have been William Smith, possibly acting as agent for the Society of College Youths, to which society the "Dedicatory" is addressed. In quotations the original long "S" has been replaced by a modern short "s". Uspensky, James (1937), Introduction to Mathematical Probability, McGraw-Hill Webster's Seventh New Collegiate Dictionary, Springfield: G. & C. Merriam Company, 1969 Biggs, Norman L. (2002), Discrete Mathematics (2nd ed.), Oxford University Press, ISBN 978-0-19-850717-8 Foata, Dominique; Schutzenberger, Marcel-Paul (1970), Théorie Géométrique des Polynômes Eulériens, Lecture Notes in Mathematics, vol. 138, Berlin, Heidelberg: Springer-Verlag, ISBN 978-3-540-04927-2. The link is to a freely available retyped (LaTeX'ed) and revised version of the text originally published by Springer-Verlag. Knuth, Donald (1998), Sorting and Searching, The Art of Computer Programming, vol. 3 (Second ed.), Addison–Wesley, ISBN 978-0-201-89685-5. Section 5.1: Combinatorial Properties of Permutations, pp. 11–72. Sedgewick, Robert (1977). "Permutation generation methods". ACM Computing Surveys. 9 (2): 137–164. doi:10.1145/356689.356692. S2CID 12139332. Masato, Kobayashi (2011). "Enumeration of bigrassmannian permutations below a permutation in Bruhat order". Order. 1: 131–137. Wikimedia Commons has media related to Permutations. Wikiversity has learning resources about Permutation notation "Permutation", Encyclopedia of Mathematics, EMS Press, 2001 [1994]
MATLAB (an abbreviation of "MATrix LABoratory") is a proprietary multi-paradigm programming language and numeric computing environment developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages. Although MATLAB is intended primarily for numeric computing, an optional toolbox uses the MuPAD symbolic engine allowing access to symbolic computing abilities. An additional package, Simulink, adds graphical multi-domain simulation and model-based design for dynamic and embedded systems. As of 2020[update], MATLAB has more than four million users worldwide. They come from various backgrounds of engineering, science, and economics. As of 2017[update], more than 5000 global colleges and universities use MATLAB to support instruction and research. MATLAB was invented by mathematician and computer programmer Cleve Moler. The idea for MATLAB was based on his 1960s PhD thesis. Moler became a math professor at the University of New Mexico and started developing MATLAB for his students as a hobby. He developed MATLAB's initial linear algebra programming in 1967 with his one-time thesis advisor, George Forsythe. This was followed by Fortran code for linear equations in 1971. Before version 1.0, MATLAB "was not a programming language; it was a simple interactive matrix calculator. There were no programs, no toolboxes, no graphics. And no ODEs or FFTs." The first early version of MATLAB was completed in the late 1970s. The software was disclosed to the public for the first time in February 1979 at the Naval Postgraduate School in California. Early versions of MATLAB were simple matrix calculators with 71 pre-built functions. At the time, MATLAB was distributed for free to universities. Moler would leave copies at universities he visited and the software developed a strong following in the math departments of university campuses.: 5  In the 1980s, Cleve Moler met John N. Little. They decided to reprogram MATLAB in C and market it for the IBM desktops that were replacing mainframe computers at the time. John Little and programmer Steve Bangert re-programmed MATLAB in C, created the MATLAB programming language, and developed features for toolboxes. Since 1993 an open source alternative, GNU Octave (mostly compatible with matlab) and scilab (similar to matlab) have been available. MATLAB was first released as a commercial product in 1984 at the Automatic Control Conference in Las Vegas. MathWorks, Inc. was founded to develop the software and the MATLAB programming language was released. The first MATLAB sale was the following year, when Nick Trefethen from the Massachusetts Institute of Technology bought ten copies. By the end of the 1980s, several hundred copies of MATLAB had been sold to universities for student use. The software was popularized largely thanks to toolboxes created by experts in various fields for performing specialized mathematical tasks. Many of the toolboxes were developed as a result of Stanford students that used MATLAB in academia, then brought the software with them to the private sector. Over time, MATLAB was re-written for early operating systems created by Digital Equipment Corporation, VAX, Sun Microsystems, and for Unix PCs. Version 3 was released in 1987. The first MATLAB compiler was developed by Stephen C. Johnson in the 1990s. In 2000, MathWorks added a Fortran-based library for linear algebra in MATLAB 6, replacing the software's original LINPACK and EISPACK subroutines that were in C. MATLAB's Parallel Computing Toolbox was released at the 2004 Supercomputing Conference and support for graphics processing units (GPUs) was added to it in 2010. Some especially large changes to the software were made with version 8 in 2012. The user interface was reworked[citation needed] and Simulink's functionality was expanded. By 2016, MATLAB had introduced several technical and user interface improvements, including the MATLAB Live Editor notebook, and other features. The MATLAB application is built around the MATLAB programming language. Common usage of the MATLAB application involves using the "Command Window" as an interactive mathematical shell or executing text files containing MATLAB code. An example of a "Hello, world!" program exists in MATLAB. disp('Hello, world!') It displays like so: Hello, world! Variables are defined using the assignment operator, =. MATLAB is a weakly typed programming language because types are implicitly converted. It is an inferred typed language because variables can be assigned without declaring their type, except if they are to be treated as symbolic objects, and that their type can change. Values can come from constants, from computation involving values of other variables, or from the output of a function. For example: >> x = 17 x = 17 >> x = 'hat' x = hat >> x = [3*4, pi/2] x = 12.0000 1.5708 >> y = 3*sin(x) y = -1.6097 3.0000 A simple array is defined using the colon syntax: initial:increment:terminator. For instance: >> array = 1:2:9 array = 1 3 5 7 9 defines a variable named array (or assigns a new value to an existing variable with the name array) which is an array consisting of the values 1, 3, 5, 7, and 9. That is, the array starts at 1 (the initial value), increments with each step from the previous value by 2 (the increment value), and stops once it reaches (or is about to exceed) 9 (the terminator value). The increment value can actually be left out of this syntax (along with one of the colons), to use a default value of 1. >> ari = 1:5 ari = 1 2 3 4 5 assigns to the variable named ari an array with the values 1, 2, 3, 4, and 5, since the default value of 1 is used as the increment. Indexing is one-based, which is the usual convention for matrices in mathematics, unlike zero-based indexing commonly used in other programming languages such as C, C++, and Java. Matrices can be defined by separating the elements of a row with blank space or comma and using a semicolon to separate the rows. The list of elements should be surrounded by square brackets []. Parentheses () are used to access elements and subarrays (they are also used to denote a function argument list). >> A = [16, 3, 2, 13 ; 5, 10, 11, 8 ; 9, 6, 7, 12 ; 4, 15, 14, 1] A = 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 >> A(2,3) ans = 11 Sets of indices can be specified by expressions such as 2:4, which evaluates to [2, 3, 4]. For example, a submatrix taken from rows 2 through 4 and columns 3 through 4 can be written as: >> A(2:4,3:4) ans = 11 8 7 12 14 1 A square identity matrix of size n can be generated using the function eye, and matrices of any size with zeros or ones can be generated with the functions zeros and ones, respectively. >> eye(3,3) ans = 1 0 0 0 1 0 0 0 1 >> zeros(2,3) ans = 0 0 0 0 0 0 >> ones(2,3) ans = 1 1 1 1 1 1 Transposing a vector or a matrix is done either by the function transpose or by adding dot-prime after the matrix (without the dot, prime will perform conjugate transpose for complex arrays): >> A = [1 ; 2], B = A.', C = transpose(A) A = 1 2 B = 1 2 C = 1 2 >> D = [0, 3 ; 1, 5], D.' D = 0 3 1 5 ans = 0 1 3 5 Most functions accept arrays as input and operate element-wise on each element. For example, mod(2*J,n) will multiply every element in J by 2, and then reduce each element modulo n. MATLAB does include standard for and while loops, but (as in other similar applications such as APL and R), using the vectorized notation is encouraged and is often faster to execute. The following code, excerpted from the function magic.m, creates a magic square M for odd values of n (MATLAB function meshgrid is used here to generate square matrices I and J containing 1:n{\displaystyle 1:n}): [J,I] = meshgrid(1:n); A = mod(I + J - (n + 3) / 2, n); B = mod(I + 2 * J - 2, n); M = n * A + B + 1; MATLAB supports structure data types. Since all variables in MATLAB are arrays, a more adequate name is "structure array", where each element of the array has the same field names. In addition, MATLAB supports dynamic field names (field look-ups by name, field manipulations, etc.). When creating a MATLAB function, the name of the file should match the name of the first function in the file. Valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores. Variables and functions are case sensitive. rgbImage = imread('ecg.png'); grayImage = rgb2gray(rgbImage); % for non-indexed images level = graythresh(grayImage); % threshold for converting image to binary, binaryImage = im2bw(grayImage, level); % Extract the individual red, green, and blue color channels. redChannel = rgbImage(:, :, 1); greenChannel = rgbImage(:, :, 2); blueChannel = rgbImage(:, :, 3); % Make the black parts pure red. redChannel(~binaryImage) = 255; greenChannel(~binaryImage) = 0; blueChannel(~binaryImage) = 0; % Now recombine to form the output image. rgbImageOut = cat(3, redChannel, greenChannel, blueChannel); imshow(rgbImageOut); MATLAB supports elements of lambda calculus by introducing function handles, or function references, which are implemented either in .m files or anonymous/nested functions. MATLAB supports object-oriented programming including classes, inheritance, virtual dispatch, packages, pass-by-value semantics, and pass-by-reference semantics. However, the syntax and calling conventions are significantly different from other languages. MATLAB has value classes and reference classes, depending on whether the class has handle as a super-class (for reference classes) or not (for value classes). Method call behavior is different between value and reference classes. For example, a call to a method: object.method(); can alter any member of object only if object is an instance of a reference class, otherwise value class methods must return a new instance if it needs to modify the object. An example of a simple class is provided below: classdef Hello methods function greet(obj) disp('Hello!') end end end When put into a file named hello.m, this can be executed with the following commands: >> x = Hello(); >> x.greet(); Hello! MATLAB has tightly integrated graph-plotting features. For example, the function plot can be used to produce a graph from two vectors x and y. The code: x = 0:pi/100:2*pi; y = sin(x); plot(x,y) produces the following figure of the sine function: MATLAB supports three-dimensional graphics as well: MATLAB supports developing graphical user interface (GUI) applications. UIs can be generated either programmatically or using visual design environments such as GUIDE and App Designer. MATLAB can call functions and subroutines written in the programming languages C or Fortran. A wrapper function is created allowing MATLAB data types to be passed and returned. MEX files (MATLAB executables) are the dynamically loadable object files created by compiling such functions. Since 2014 increasing two-way interfacing with Python was being added. Libraries written in Perl, Java, ActiveX or .NET can be directly called from MATLAB, and many MATLAB libraries (for example XML or SQL support) are implemented as wrappers around Java or ActiveX libraries. Calling MATLAB from Java is more complicated, but can be done with a MATLAB toolbox which is sold separately by MathWorks, or using an undocumented mechanism called JMI (Java-to-MATLAB Interface), (which should not be confused with the unrelated Java Metadata Interface that is also called JMI). Official MATLAB API for Java was added in 2016. As alternatives to the MuPAD based Symbolic Math Toolbox available from MathWorks, MATLAB can be connected to Maple or Mathematica. Libraries also exist to import and export MathML. In 2020, MATLAB withdrew services from two Chinese universities as a result of US sanctions. The universities said this will be responded to by increased use of open-source alternatives and by developing domestic alternatives. MATLAB is updated twice per year.: 517  In addition to new features and other improvements, each release has new bug fixes and smaller changes. The number (or release number) is the version reported by Concurrent License Manager program FLEXlm. For a complete list of changes of both MATLAB and official toolboxes, consult the MATLAB release notes. Comparison of numerical-analysis software List of numerical-analysis software "Protect Your Source Code". MathWorks. Retrieved November 1, 2019. "MEX Platform Compatibility". MathWorks. Retrieved November 1, 2019. "MAT-File Versions". MathWorks. Retrieved November 1, 2019. "Save Figure to Reopen in MATLAB Later". MathWorks. Retrieved November 1, 2019. "Live Code File Format (.mlx)". MathWorks. Retrieved November 1, 2019. "MATLAB App Designer". MathWorks. Retrieved November 1, 2019. "Toolbox Distribution". MathWorks. Retrieved November 1, 2019. "MATLAB App Installer File". MathWorks. Retrieved November 1, 2019. "Support Package Installation". MathWorks. Retrieved November 1, 2019. "An interview with CLEVE MOLER Conducted by Thomas Haigh On 8 and 9 March, 2004 Santa Barbara, California" (PDF). Computer History Museum. Archived from the original (PDF) on December 27, 2014. Retrieved December 6, 2016. So APL, Speakeasy, LINPACK, EISPACK, and PL0 were the predecessors to MATLAB. Bezanson, Jeff; Karpinski, Stefan; Shah, Viral; Edelman, Alan (February 14, 2012). "Why We Created Julia". Julia Language. Retrieved December 1, 2016. Eaton, John W. (May 21, 2001). "Octave: Past, Present, and Future" (PDF). Texas-Wisconsin Modeling and Control Consortium. Archived from the original (PDF) on August 9, 2017. Retrieved December 1, 2016. "History". Scilab. Archived from the original on December 1, 2016. Retrieved December 1, 2016. S.M. Rump: INTLAB – INTerval LABoratory. In Tibor Csendes, editor, Developments in Reliable Computing, pages 77–104. Kluwer Academic Publishers, Dordrecht, 1999. Moore, R. E., Kearfott, R. B., & Cloud, M. J. (2009). Introduction to Interval Analysis. Society for Industrial and Applied Mathematics. Rump, S. M. (2010). Verification methods: Rigorous results using floating-point arithmetic. Acta Numerica, 19, 287–449. Hargreaves, G. I. (2002). Interval analysis in MATLAB. Numerical Algorithms, (2009.1). "The L-Shaped Membrane". MathWorks. 2003. Retrieved February 7, 2014. "System Requirements and Platform Availability". MathWorks. Retrieved August 14, 2013. "Platform Road Map for MATLAB and Simulink Product Families". de.mathworks.com. Retrieved December 22, 2021. "Matrices and Arrays - MATLAB & Simulink". www.mathworks.com. Retrieved May 21, 2022. The MathWorks (February 2020). "Company Overview" (PDF). "Current number of matlab users worldwide". Mathworks. November 9, 2017. Retrieved April 26, 2023. Chonacky, N.; Winch, D. (2005). "Reviews of Maple, Mathematica, and Matlab: Coming Soon to a Publication Near You". Computing in Science & Engineering. 7 (2). Institute of Electrical and Electronics Engineers (IEEE): 9–10. Bibcode:2005CSE.....7b...9C. doi:10.1109/mcse.2005.39. ISSN 1521-9615. S2CID 29660034. Haigh, Thomas. "Cleve Moler: Mathematical Software Pioneer and Creator of Matlab" (PDF). IEEE Annals of the History of Computing. IEEE Computer Society. "A Brief History of MATLAB". www.mathworks.com. Retrieved September 4, 2021. Moler, Cleve; Little, Jack (June 12, 2020). "A history of MATLAB". Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–67. doi:10.1145/3386331. ISSN 2475-1421. Xue, D.; Press, T.U. (2020). MATLAB Programming: Mathematical Problem Solutions. De Gruyter STEM. De Gruyter. p. 21. ISBN 978-3-11-066370-9. Retrieved September 16, 2020. Press, CRC (2008). Solving Applied Mathematical Problems with MATLAB. CRC Press. p. 6. ISBN 978-1-4200-8251-7. Retrieved September 16, 2020. Woodford, C.; Phillips, C. (2011). Numerical Methods with Worked Examples: Matlab Edition. SpringerLink : Bücher. Springer Netherlands. p. 1. ISBN 978-94-007-1366-6. Retrieved September 16, 2020. Tranquillo, J.V. (2011). MATLAB for Engineering and the Life Sciences. Synthesis digital library of engineering and computer science. Morgan & Claypool Publishers. ISBN 978-1-60845-710-6. Retrieved September 17, 2020. LoTurco, Lori (January 28, 2020). "Accelerating the pace of engineering". MIT News. Massachusetts Institute of Technology. Retrieved September 16, 2020. Gatto, Marino; Rizzoli, Andrea (1993). "Review of MATLAB, Version 4.0". Natural Resource Modeling. 7 (1). Wiley: 85–88. Bibcode:1993NRM.....7...85G. doi:10.1111/j.1939-7445.1993.tb00141.x. ISSN 0890-8575. Cho, M.J.; Martinez, W.L. (2014). Statistics in MATLAB: A Primer. Chapman & Hall/CRC Computer Science & Data Analysis. CRC Press. ISBN 978-1-4665-9657-3. Retrieved September 17, 2020. Xue, D.; Chen, Y. (2013). System Simulation Techniques with MATLAB and Simulink. No Longer used. Wiley. p. 17. ISBN 978-1-118-69437-4. Retrieved October 15, 2020. "MATLAB Documentation". MathWorks. Retrieved August 14, 2013. "Comparing MATLAB with Other OO Languages". MATLAB. MathWorks. Retrieved August 14, 2013. "Create Symbolic Variables and Expressions". Symbolic Math Toolbox. MathWorks. Retrieved August 14, 2013. "Matrix Indexing". MathWorks. Retrieved August 14, 2013. "Structures". MathWorks. Retrieved August 14, 2013. "Generate Field Names from Variables". MathWorks. Retrieved August 14, 2013. "Case and Space Sensitivity". MathWorks. Retrieved November 1, 2019. "Function Handles". MathWorks. Retrieved August 14, 2013. "Anonymous Functions". MathWorks. Retrieved August 14, 2013. "Nested Functions". MathWorks. "Object-Oriented Programming". MathWorks. Retrieved August 14, 2013. "Comparing Handle and Value Classes". MathWorks. "MATLAB GUI". MathWorks. April 30, 2011. Retrieved August 14, 2013. "Create a Simple GUIDE GUI". MathWorks. Retrieved August 14, 2014. "MATLAB App Designer". MathWorks. Retrieved November 1, 2019. "Application Programming Interfaces to MATLAB". MathWorks. Archived from the original on September 15, 2017. Retrieved August 14, 2013. "Create MEX-Files". MathWorks. Archived from the original on March 3, 2014. Retrieved August 14, 2013. Spielman, Dan (February 10, 2004). "Connecting C and Matlab". Yale University, Computer Science Department. Retrieved May 20, 2008. "MATLAB Engine for Python". MathWorks. Retrieved June 13, 2015. "Call Python Libraries". MathWorks. Retrieved June 13, 2015. "External Programming Language Interfaces". MathWorks. Archived from the original on March 11, 2014. Retrieved August 14, 2013. "Call Perl script using appropriate operating system executable". MathWorks. Retrieved November 7, 2013. "MATLAB Builder JA". MathWorks. Retrieved June 7, 2010. Altman, Yair (April 14, 2010). "Java-to-Matlab Interface". Undocumented Matlab. Archived from the original on September 5, 2015. Retrieved June 7, 2010. Kaplan, Joshua. "matlabcontrol JMI". "MATLAB Engine API for Java". MathWorks. Retrieved September 15, 2016. Germundsson, Roger (September 30, 1998). "MaMa: Calling MATLAB from Mathematica with MathLink". Wolfram Research. Wolfram Library Archive. rsmenon; szhorvat (2013). "MATLink: Communicate with MATLAB from Mathematica". Retrieved August 14, 2013. Weitzel, Michael (September 1, 2006). "MathML import/export". MathWorks - File Exchange. Archived from the original on February 25, 2011. Retrieved August 14, 2013. "US military ban locks two Chinese universities out of popular software". South China Morning Post. June 12, 2020. Retrieved November 6, 2020. Bober, W. (2013). Introduction to Numerical and Analytical Methods with MATLAB for Engineers and Scientists. CRC Press. p. 517. ISBN 978-1-4665-7609-4. Retrieved October 15, 2020. Altman, Y.M. (2014). Accelerating MATLAB Performance: 1001 tips to speed up MATLAB programs. Taylor & Francis. p. 215. ISBN 978-1-4822-1129-0. Retrieved October 15, 2020. Moler, Cleve (January 2006). "The Growth of MATLAB and The MathWorks over Two Decades". News & Notes Newsletter. MathWorks. Retrieved August 14, 2013. "MATLAB System Requirements - Release 13". MathWorks. Retrieved October 6, 2015. "Dynamic Function Creation with Anonymous and Nested Functions". MathWorks. Retrieved January 15, 2016. "Integer and Single-Precision Math in MATLAB 7". MathWorks. Retrieved March 22, 2023. MATLAB Parallel Computing Toolbox User's Guide (PDF) "Memory Mapping". MathWorks. Retrieved January 22, 2014. "MATLAB bsxfun". MathWorks. Retrieved January 22, 2014. "Do MATLAB versions prior to R2007a run under Windows Vista?". MathWorks. September 3, 2010. Retrieved February 8, 2011. "OOP Compatibility with Previous Versions". MathWorks. Retrieved March 11, 2013. "Packages Create Namespaces". MathWorks. Retrieved January 22, 2014. "Map Containers". MathWorks. Retrieved January 22, 2014. "Creating and Controlling a Random Number Stream". MathWorks. Retrieved January 22, 2014. "New MATLAB External Interfacing Features in R2009a". MathWorks. Retrieved January 22, 2014. "Ignore Function Outputs". MathWorks. Retrieved January 22, 2014. "Ignore Function Inputs". MathWorks. Retrieved January 22, 2014. "Working with Enumerations". MathWorks. Retrieved January 22, 2014. "MathWorks Announces Release 2010B Of The MATLAB And Simulink Product Families – EEJournal". EEJournal – Electronic Engineering Journal. September 3, 2010. Retrieved November 24, 2020. "What's New in Release 2010b". MathWorks. Archived from the original on November 25, 2015. Retrieved January 22, 2014. "New RNG Function for Controlling Random Number Generation in Release 2011a". MathWorks. Retrieved January 22, 2014. "MATLAB rng". MathWorks. Retrieved January 22, 2014. "Replace Discouraged Syntaxes of rand and randn". MathWorks. Retrieved January 22, 2014. "MATLAB matfile". MathWorks. Retrieved January 22, 2014. "MATLAB max workers". Retrieved January 22, 2014. MathWorks Support Team (June 4, 2015). "Is MATLAB supported on 32-bit Linux?". Versions of MATLAB prior to R2012a are fully supported on 32-bit Linux. After R2012a, MATLAB is no longer supported on 32-bit Linux. Shure, Loren (September 2012). "The MATLAB R2012b Desktop – Part 1: Introduction to the Toolstrip". "MATLAB Apps". MathWorks. Retrieved August 14, 2013. "MATLAB Unit Testing Framework". MathWorks. Retrieved August 14, 2013. "MathWorks Announces Release 2013b of the MATLAB and Simulink Product Families". MathWorks. September 2013. "R2013b Release Notes". MathWorks. Retrieved September 17, 2018. "MATLAB Tables". MathWorks. Retrieved September 14, 2013. "MathWorks Announces Release 2014a of the MATLAB and Simulink Product Families". MathWorks. Retrieved March 11, 2014. "Graphics Changes in R2014b". MathWorks. Retrieved October 3, 2014. "uitab: Create tabbed panel". MathWorks. Retrieved October 3, 2014. "Create and Share Toolboxes". MathWorks. Retrieved October 3, 2014. "Dates and Time". MathWorks. Retrieved October 3, 2014. "Source Control Integration". MathWorks. Retrieved October 3, 2014. "MATLAB MapReduce and Hadoop". MathWorks. Archived from the original on October 4, 2014. Retrieved October 3, 2014. "Call Python Libraries". MathWorks. Retrieved October 3, 2014. "MATLAB Engine for Python". MathWorks. Retrieved October 3, 2014. "MATLAB Execution Engine". MathWorks. Retrieved September 15, 2016. "Graph and Network Algorithms". MathWorks. Retrieved September 15, 2016. "Install MinGW-w64 Compiler". MathWorks. Retrieved September 15, 2016. "What Is a Live Script?". MathWorks. Archived from the original on February 25, 2018. Retrieved September 15, 2016. "MATLAB App Designer". MathWorks. Retrieved September 15, 2016. "Add Functions to Scripts". MathWorks. Retrieved September 15, 2016. "Tall Arrays". MathWorks. Retrieved September 15, 2016. "Create String Arrays". MathWorks. Retrieved September 15, 2016. "JSON Format - MATLAB & Simulink". mathworks.com. Retrieved August 20, 2017. "MATLAB Online". MathWorks. Retrieved April 10, 2017. "Validate Property Values". MathWorks. Retrieved April 10, 2017. "Mocking Framework". MathWorks. Retrieved April 10, 2017. "Create Heatmap from Tabular Data". MathWorks. Retrieved April 10, 2017. "MATLAB Engine API for C++". MathWorks. "MATLAB Data API". MathWorks. Morris, Kevin (March 27, 2018). "Deep Learning with MATLAB". Electronic Engineering Journal. Retrieved November 23, 2020. "MathWorks Announces Release 2018a of the MATLAB and Simulink Product Families". MathWorks. Retrieved April 5, 2018. "Create Live Functions". MathWorks. "Web Apps". MathWorks. "Customize Code Suggestions and Completions". MathWorks. "C++ MEX Applications". MathWorks. "MATLAB Support for Interleaved Complex API in C MEX Functions". MathWorks. "Work with Remote Data". MathWorks. Michel, Stefanie (October 15, 2018). "Mathworks erweitert Deep-Learning-Funktionen im neuen Release". MM MaschinenMarkt (in German). Retrieved November 23, 2020. "MATLAB Speaks C++". MathWorks. July 11, 2019. "Out-of-Process Execution of C++ MEX Functions". MathWorks. "MathWorks announces release 2019b of MATLAB and Simulink". Evaluation Engineering. Retrieved November 23, 2020. "Add Interactive Tasks to a Live Script". MathWorks. "Hexadecimal and Binary Values". MathWorks. "Indexing into Function Call Results". MathWorks. "Function Argument Validation". MathWorks. "Bluetooth Low Energy Communication Overview". MathWorks. "Out-of-Process Execution of Python Functionality". MathWorks. Hruska, Joel (March 31, 2020). "Crippled No Longer: Matlab Now Runs on AMD CPUs at Full Speed - ExtremeTech". Extremetech. Retrieved October 29, 2020. "MathWorks Delivers Additional AI Capabilities with Release 2020a of MATLAB and Simulink". HPCwire. May 8, 2020. Retrieved November 23, 2020. "Build Pattern Expressions". MathWorks. "Bluetooth Communication". MathWorks. "UI Component Development Overview". MathWorks. Manners, David (September 24, 2020). "MathWorks updates Simulink and MATLAB families". Electronics Weekly. Retrieved November 23, 2020. "Name-Value in Function Calls". MathWorks. "Class Diagram Viewer". MathWorks. "Create Simple Live Editor Task". MathWorks. "Map Data with Dictionaries". MathWorks. "Create and Run Tasks Using Build Tool". MathWorks. "Call .NET from MATLAB". MathWorks. "Call MATLAB from .NET". MathWorks. "MATLAB Release Notes". MathWorks. Retrieved January 25, 2014. Gilat, Amos (2004). MATLAB: An Introduction with Applications 2nd Edition. John Wiley & Sons. ISBN 978-0-471-69420-5. Quarteroni, Alfio; Saleri, Fausto (2006). Scientific Computing with MATLAB and Octave. Springer. ISBN 978-3-540-32612-0. Ferreira, A.J.M. (2009). MATLAB Codes for Finite Element Analysis. Springer. ISBN 978-1-4020-9199-5. Lynch, Stephen (2004). Dynamical Systems with Applications using MATLAB. Birkhäuser. ISBN 978-0-8176-4321-8. MATLAB at Wikipedia's sister projects Media from Commons Textbooks from Wikibooks Resources from Wikiversity Official website MATLAB at Curlie
Secure Reliable Transport (SRT) is an open source video transport protocol that utilises the UDP transport protocol. The SRT Protocol specification is available as an Internet Draft from the IETF. SRT provides connection and control, reliable transmission similar to TCP; however, it does so at the application layer, using UDP protocol as an underlying transport layer. It supports packet recovery while maintaining low latency (default: 120 ms). SRT also supports encryption using AES. The protocol was derived from the UDT project, which was designed for fast file transmission. It provided the reliability mechanism by utilising similar methods for connection, sequence numbers, acknowledgements and re-transmission of lost packets. It utilises selective and immediate (NAK-based) re-transmission. SRT added several features on top of that in order to support live streaming mode: Controlled latency, with source time transmission (timestamp-based packet delivery) Relaxed sender speed control Conditional "too late" packet dropping (prevents head-of-line blocking caused by a lost packet that wasn't recovered on time) Eager packet re-transmission (periodic NAK-report) SRT packets are created at the application layer and handed to the transport layer for delivery. Each unit of SRT media or control data created by an application begins with the SRT packet header. The fields in the header are as follows: Packet Sequence Number (31 bits) PP (2 bits): Packet Position Flag O (1 bit): Order Flag KK (2 bits): Key-based Encryption Flag R (1 bit): Retransmitted Packet Flag Message Number (26 bits) Data (variable length) The fields in the header are as follows: Control Type (15 bits): Control Packet Type Subtype (16 bits) Type-specific Information (32 bits) Control Information Field (variable length) Secure Reliable Transport is an open source video transport protocol developed originally by Haivision. According to SRT Alliance, an organisation that promotes the technology, it optimises streaming performance. This helps minimise effects of jitter and bandwidth changes, while error-correction mechanisms help minimise packet loss. SRT supports end-to-end encryption with AES. When performing retransmissions, SRT only attempts to retransmit packets for a limited amount of time based on the latency as configured by the application. According to Marc Cymontkowski, the architect of SRT, in addition to sending MPEG transport streams over the public internet, it is also being used for IoT connectivity, metadata exchange, as a communication protocol, as well as for uncompressed data delivery. The reference implementation of the protocol was originally published under the Lesser General Public License version 2.1, but was relicensed under the Mozilla Public License on 22 March 2018. SRT is supported in the free software multimedia frameworks GStreamer, FFmpeg, OBS Studio and in VLC free software media player. The UDP-based Data Transfer Protocol (UDT) project has been a base for the SRT project. The SRT C API is largely based in design on the UDT API SRT was designed for low-latency live video transmission. Haivision released the SRT protocol and reference implementation as open source at the 2017 NAB Show. In March 2020, an individual Internet-Draft, draft-sharabayko-mops-srt, was submitted for consideration to the Media OPerationS (MOPS) working group of the Internet Engineering Task Force. SRT Alliance is an organisation whose members develop, use and promote the Secure Reliable Transport protocol and software based on it. The founding members of the alliance are Haivision and Wowza Streaming Engine. There's currently one available implementation, which is the open-source SRT library. The C language API is mainly based on the previous UDT API, with further changes as new features are added. The API is very similar to the one of TCP. SRT offers actually three working modes, of which the first two were derived from UDT: File-stream mode: like TCP File-message mode: similar to SCTP protocol – sending blocks of data with clearly defined boundaries Live mode: the data should be sent in small packets (usually up to 1316 bytes, if the transmitted stream is MPEG-TS) with already appropriate time intervals between them. The same single packets with the same time intervals between them are then delivered at the receiver side. The SRT library also offers these features: Encryption using a pre-shared key. Encryption support was originally provided by OpenSSL, now also alternatively, Nettle (GNU TLS) or mbedTLS can be used. SRT Access Control (aka "StreamID") can be used by applications to identify resources and use user-password access method while using the same service port number for multiple purposes. The optional Forward Error Correction mechanism. Further and more detailed documentation can be found in the Source code documentation. Reliable Internet Stream Transport, intended to fill a gap in the market for professional protocols as opposed to the 'prosumer' SRT. Bits are ordered most significant to least significant; bit offset 0 is the most significant bit of the first octet. Octets are transmitted in network order. Bit transmission order is medium dependent. Sharabayko, M.P; Sharabayko, M.A (2021). The SRT Protocol. IETF. I-D draft-sharabayko-srt-01. Retrieved 20 October 2023. "UDT: Breaking the Data Transfer Bottleneck". udt.sourceforge.io. Retrieved 2020-08-27. Haivision (26 September 2021). "Secure, Reliable, Transport". GitHub. Olivier Crête (16 February 2018). "SRT in GStreamer". "It glues everything together: an interview with Marc Cymontkowski, evangelist of SRT". Medialooks Blog. 5 November 2019. Michael Larabel (24 April 2017). "SRT Video Transport Protocol Open-Sourced". Phoronix. Roman rndi (22 March 2018). "Change License to MPLv2.0 · Haivision/srt@a75d4c4". GitHub. Olivier Crête (June 2018). "Secure Video Comes of Age". Linux Format magazine. No. 237. Marc Cymontkowski. "Why We Created SRT and the Difference Between SRT and UDT". "Haivision srt API docs" "Microsoft Joins SRT Open Source Streaming Project". The Broadcast Bridge. 17 September 2018. "SRT Access Control Guidelines". GitHub. 7 November 2019. "5 Reasons You Should Pick RIST over SRT". RIST Forum. 27 May 2020. Retrieved 2021-12-04. Official website
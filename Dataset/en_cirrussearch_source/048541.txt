Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety—meaning that all references point to valid memory—without a garbage collector. To simultaneously enforce memory safety and prevent data races, its "borrow checker" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming. Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel. Rust has been noted for its rapid adoption, and has been studied in programming language theory research. Rust grew out of a personal project begun in 2006 by Mozilla Research employee Graydon Hoare. Mozilla began sponsoring the project in 2009 as a part of the ongoing development of an experimental browser engine called Servo, which was officially announced by Mozilla in 2010. Rust's memory and ownership system was influenced by region-based memory management in languages such as Cyclone and ML Kit. Around the same time, work shifted from the initial compiler written in OCaml to a self-hosting compiler based on LLVM written in Rust. The new Rust compiler successfully compiled itself in 2011.[better source needed] In the fall of 2011, the Rust logo was developed based on a bicycle chainring. Rust's type system underwent significant changes between versions 0.2, 0.3, and 0.4. In version 0.2, which was released in March 2012, classes were introduced for the first time. Four months later, version 0.3 added destructors and polymorphism, through the use of interfaces. In October 2012, version 0.4 was released, which added traits as a means of inheritance. Interfaces were combined with traits and removed as a separate feature; and classes were replaced by a combination of implementations and structured types. Through the early 2010s, memory management through the ownership system was gradually consolidated to prevent memory bugs. By 2013, Rust's garbage collector was removed, with the ownership rules in place. In January 2014, the editor-in-chief of Dr. Dobb's Journal, Andrew Binstock, commented on Rust's chances of becoming a competitor to C++, along with D, Go, and Nim (then Nimrod). According to Binstock, while Rust was "widely viewed as a remarkably elegant language", adoption slowed because it radically changed from version to version. The first stable release, Rust 1.0, was announced on May 15, 2015. The development of the Servo browser engine continued alongside Rust's own growth. In September 2017, Firefox 57 was released as the first version that incorporated components from Servo, in a project named "Firefox Quantum". In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide, as part of a corporate restructuring caused by the COVID-19 pandemic. The team behind Servo was disbanded. The event raised concerns about the future of Rust, as some members of the team were active contributors to Rust. In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway. The first goal of the foundation would be to take ownership of all trademarks and domain names, and take financial responsibility for their costs. On February 8, 2021, the formation of the Rust Foundation was announced by its five founding companies (AWS, Huawei, Google, Microsoft, and Mozilla). In a blog post published on April 6, 2021, Google announced support for Rust within the Android Open Source Project as an alternative to C/C++. On November 22, 2021, the Moderation Team, which was responsible for enforcing community standards and the Code of Conduct, announced their resignation "in protest of the Core Team placing themselves unaccountable to anyone but themselves". In May 2022, the Rust Core Team, other lead programmers, and certain members of the Rust Foundation board implemented governance reforms in response to the incident. The Rust Foundation posted a draft for a new trademark policy on April 6, 2023, revising its rules on how the Rust logo and name can be used, which resulted in negative reactions from Rust users and contributors. Rust's syntax is similar to that of C and C++, although many of its features were influenced by functional programming languages. Hoare described Rust as targeted at "frustrated C++ developers" and emphasized features such as safety, control of memory layout, and concurrency. Safety in Rust includes the guarantees of memory safety, type safety, and lack of data races. Below is a "Hello, World!" program in Rust. The fn keyword denotes a function, and the println! macro prints the message to standard output. Statements in Rust are separated by semicolons. fn main() { println!("Hello, World!"); } In Rust, blocks of code are delimited by curly brackets, and control flow is implemented by keywords including if, else, while, and for. Pattern matching can be done using the match keyword. In the examples below, explanations are given in comments, which start with //. fn main() { // Defining a mutable variable with 'let mut' // Using the macro vec! to create a vector let mut values = vec![1, 2, 3, 4]; for value in &values { println!("value = {}", value); } if values.len() > 5 { println!("List is longer than five items"); } // Pattern matching match values.len() { 0 => println!("Empty"), 1 => println!("One value"), // pattern matching can use ranges of integers 2..=10 => println!("Between two and ten values"), 11 => println!("Eleven values"), // A `_` pattern is called a "wildcard", it matches any value _ => println!("Many values"), }; // while loop with predicate and pattern matching using let while let Some(value) = values.pop() { println!("value = {value}"); // using curly brackets to format a local variable } } Rust is expression-oriented, with nearly every part of a function body being an expression, including control-flow operators. The ordinary if expression is used instead of C's ternary conditional. With returns being implicit, a function does not need to end with a return expression; if the semicolon is omitted, the value of the last expression in the function is used as the return value, as seen in the following recursive implementation of the factorial function: fn factorial(i: u64) -> u64 { if i == 0 { 1 } else { i * factorial(i - 1) } } The following iterative implementation uses the ..= operator to create an inclusive range: fn factorial(i: u64) -> u64 { (2..=i).product() } In Rust, anonymous functions are called closures. They are defined using the following syntax: |<parameter-name>: <type>| -> <return-type> { <body> }; For example: let f = |x: i32| -> i32 { x * 2 }; With type inference, however, the compiler is able to infer the type of each parameter and the return type, so the above form can be written as: let f = |x| { x * 2 }; With closures with a single expression (i.e. a body with one line) and implicit return type, the curly braces may be omitted: let f = |x| x * 2; Closures with no input parameter are written like so: let f = || println!("Hello, world!"); Closures may be passed as input parameters of functions that expect a function pointer: // A function which takes a function pointer as an argument and calls it with // the value `5`. fn apply(f: fn(i32) -> i32) -> i32 { // No semicolon, to indicate an implicit return f(5) } fn main() { // Defining the closure let f = |x| x * 2; println!("{}", apply(f)); // 10 println!("{}", f(5)); // 10 } However, one may need complex rules to describe how values in the body of the closure are captured. They are implemented using the Fn, FnMut, and FnOnce traits: Fn: the closure captures by reference (&T). They are used for functions that can still be called if they only have reference access (with &) to their environment. FnMut: the closure captures by mutable reference (&mut T). They are used for functions that can be called if they have mutable reference access (with &mut) to their environment. FnOnce: the closure captures by value (T). They are used for functions that are only called once. With these traits, the compiler will capture variables in the least restrictive manner possible. They help govern how values are moved around between scopes, which is largely important since Rust follows a lifetime construct to ensure values are "borrowed" and moved in a predictable and explicit manner. The following demonstrates how one may pass a closure as an input parameter using the Fn trait: // A function that takes a value of type F (which is defined as // a generic type that implements the `Fn` trait, e.g. a closure) // and calls it with the value `5`. fn apply_by_ref<F>(f: F) -> i32 where F: Fn(i32) -> i32 { f(5) } fn main() { let f = |x| { println!("I got the value: {}", x); x * 2 }; // Applies the function before printing its return value println!("5 * 2 = {}", apply_by_ref(f)); } // ~~ Program output ~~ // I got the value: 5 // 5 * 2 = 10 The previous function definition can also be shortened for convenience as follows: fn apply_by_ref(f: impl Fn(i32) -> i32) -> i32 { f(5) } Rust is strongly typed and statically typed. The types of all variables must be known at compilation time; assigning a value of a particular type to a differently typed variable causes a compilation error. Variables are declared with the keyword let, and type inference is used to determine their type. Variables assigned multiple times must be marked with the keyword mut (short for mutable). The default integer type is i32, and the default floating point type is f64. If the type of a literal number is not explicitly provided, either it is inferred from the context or the default type is used. Option values are handled using syntactic sugar, such as the if let construction, to access the inner value (in this case, a string): fn main() { let name1: Option<&str> = None; // In this case, nothing will be printed out if let Some(name) = name1 { println!("{name}"); } let name2: Option<&str> = Some("Matthew"); // In this case, the word "Matthew" will be printed out if let Some(name) = name2 { println!("{name}"); } } Rust does not use null pointers to indicate a lack of data, as doing so can lead to null dereferencing. Accordingly, the basic & and &mut references are guaranteed to not be null. Rust instead uses Option for this purpose: Some(T) indicates that a value is present, and None is analogous to the null pointer. Option implements a "null pointer optimization", avoiding any spatial overhead for types that cannot have a null value (references or the NonZero types, for example). Unlike references, the raw pointer types *const and *mut may be null; however, it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block. Unlike dereferencing, the creation of raw pointers is allowed inside of safe Rust code. User-defined types are created with the struct or enum keywords. The struct keyword is used to denote a record type that groups multiple related values. enums can take on different variants at runtime, with its capabilities similar to algebraic data types found in functional programming languages. Both structs and enums can contain fields with different types. Alternative names for the same type can be defined with the type keyword. The impl keyword can define methods for a user-defined type (data and functions are defined separately). Implementations fulfill a role similar to that of classes within other languages. Rust provides no implicit type conversion (coercion) between primitive types. But, explicit type conversion (casting) can be performed using the as keyword. let x = 1000; println!("1000 as a u16 is: {}", x as u16); Rust's ownership system consists of rules that ensure memory safety without using a garbage collector. At compile time, each value must be attached to a variable called the owner of that value, and every value must have exactly one owner. Values are moved between different owners through assignment or passing a value as a function parameter. Values can also be borrowed, meaning they are temporarily passed to a different function before being returned to the owner. With these rules, Rust can prevent the creation and use of dangling pointers: fn print_string(s: String) { println!("{}", s); } fn main() { let s = String::from("Hello, World"); print_string(s); // s consumed by print_string // s has been moved, so cannot be used any more // another print_string(s); would result in a compile error } Because of these ownership rules, Rust types are known as linear or affine types, meaning each value can be used exactly once. This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and deallocation. When a value goes out of scope, it is dropped by running its destructor. The destructor may be programmatically defined through implementing the Drop trait. This helps manage resources such as file handles, network sockets, and locks, since when objects are dropped, the resources associated with them are closed or released automatically. Lifetimes are usually an implicit part of all reference types in Rust. Each lifetime encompasses a set of locations in the code for which a variable is valid. For example, a reference to a local variable has a lifetime corresponding to the block it is defined in: fn main() { let x = 5; // ------------------+- Lifetime 'b // | let r = &x; // -+-- Lifetime 'a | // | | println!("r: {}", r); // | | // | | // -+ | } // ------------------+ The borrow checker in the Rust compiler uses lifetimes to ensure that the values a reference points to remain valid. In the example above, storing a reference to variable x to r is valid, as variable x has a longer lifetime ('b) than variable r ('a). However, when x has a shorter lifetime, the borrow checker would reject the program: fn main() { let r; // ------------------+- Lifetime 'a // | { // | let x = 5; // -+-- Lifetime 'b | r = x; // | | } // | | // | println!("r: {}", r); // | } // ------------------+ Since the lifetime of the referenced variable ('b) is shorter than the lifetime of the variable holding the reference ('a), the borrow checker errors, preventing x from being used from outside its scope. Rust defines the relationship between the lifetimes of the objects created and used by functions, using lifetime parameters, as a signature feature. The example below parses some configuration options from a string and creates a struct containing the options. The struct only contains references to the data; so, for the struct to remain valid, the data referred to by the struct must be valid as well. The function signature for parse_config specifies this relationship explicitly. In this example, the explicit lifetimes are unnecessary in newer Rust versions, due to lifetime elision, which is an algorithm that automatically assigns lifetimes to functions if they are trivial. use std::collections::HashMap; // This struct has one lifetime parameter, 'src. The name is only used within the struct's definition. #[derive(Debug)] struct Config<'src> { hostname: &'src str, username: &'src str, } // This function also has a lifetime parameter, 'cfg. 'cfg is attached to the "config" parameter, which // establishes that the data in "config" lives at least as long as the 'cfg lifetime. // The returned struct also uses 'cfg for its lifetime, so it can live at most as long as 'cfg. fn parse_config<'cfg>(config: &'cfg str) -> Config<'cfg> { let key_values: HashMap<_, _> = config .lines() .filter(|line| !line.starts_with('#')) .filter_map(|line| line.split_once('=')) .map(|(key, value)| (key.trim(), value.trim())) .collect(); Config { hostname: key_values["hostname"], username: key_values["username"], } } fn main() { let config = parse_config( r#"hostname = foobar username=barfoo"#, ); println!("Parsed config: {:#?}", config); } Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races. Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already initialized. Unsafe code can subvert some of these restrictions, using the unsafe keyword. Unsafe code may also be used for low-level functionality, such as volatile memory access, architecture-specific intrinsics, type punning, and inline assembly. Rust does not use garbage collection. Memory and other resources are instead managed through the "resource acquisition is initialization" convention, with optional reference counting. Rust provides deterministic management of resources, with very low overhead. Values are allocated on the stack by default, and all dynamic allocations must be explicit. The built-in reference types using the & symbol do not involve run-time reference counting. The safety and validity of the underlying pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior. Rust's type system separates shared, immutable references of the form &T from unique, mutable references of the form &mut T. A mutable reference can be coerced to an immutable reference, but not vice versa. Rust's more advanced features include the use of generic functions. A generic function is given generic parameters, which allow the same function to be applied to different variable types. This capability reduces duplicate code and is known as parametric polymorphism. The following program calculates the sum of two things, for which addition is implemented using a generic function: use std::ops::Add; // sum is a generic function with one type parameter, T fn sum<T>(num1: T, num2: T) -> T where T: Add<Output = T>, // T must implement the Add trait where addition returns another T { num1 + num2 // num1 + num2 is syntactic sugar for num1.add(num2) provided by the Add trait } fn main() { let result1 = sum(10, 20); println!("Sum is: {}", result1); // Sum is: 30 let result2 = sum(10.23, 20.45); println!("Sum is: {}", result2); // Sum is: 30.68 } At compile time, polymorphic functions like sum are instantiated with the specific types the code requires; in this case, sum of integers and sum of floats. Generics can be used in functions to allow implementing a behavior for different types without repeating the same code. Generic functions can be written in relation to other generics, without knowing the actual type. Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language, to define shared behavior between different types. For example, the Add trait can be implemented for floats and integers, which can be added; and the Display or Debug traits can be implemented for any type that can be converted to a string. Traits can be used to provide a set of common behavior for different types without knowing the actual type. This facility is known as ad hoc polymorphism. Generic functions can constrain the generic type to implement a particular trait or traits; for example, an add_one function might require the type to implement Add. This means that a generic function can be type-checked as soon as it is defined. The implementation of generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Type erasure is also available via the keyword dyn (short for dynamic). Because monomorphization duplicates the code for each type used, it can result in more optimized code for specific-use cases, but compile time and size of the output binary are also increased. In addition to defining methods for a user-defined type, the impl keyword can be used to implement a trait for a type. Traits can provide additional derived methods when implemented. For example, the trait Iterator requires that the next method be defined for the type. Once the next method is defined, the trait can provide common functional helper methods over the iterator, such as map or filter. Rust traits are implemented using static dispatch, meaning that the type of all values is known at compile time; however, Rust also uses a feature known as trait objects to accomplish dynamic dispatch (also known as duck typing). Dynamically dispatched trait objects are declared using the syntax dyn Tr where Tr is a trait. Trait objects are dynamically sized, therefore they must be put behind a pointer, such as Box. The following example creates a list of objects where each object can be printed out using the Display trait: use std::fmt::Display; let v: Vec<Box<dyn Display>> = vec![ Box::new(3), Box::new(5.0), Box::new("hi"), ]; for x in v { println!("{x}"); } If an element in the list does not implement the Display trait, it will cause a compile-time error. For loops in Rust work in a functional style as operations over an iterator type. For example, in the loop for x in 0..100 { f(x); } 0..100 is a value of type Range which implements the Iterator trait; the code applies the function f to each element returned by the iterator. Iterators can be combined with functions over iterators like map, filter, and sum. For example, the following adds up all numbers between 1 and 100 that are multiples of 3: (1..=100).filter(|&x| x % 3 == 0).sum() It is possible to extend the Rust language using macros. A declarative macro (also called a "macro by example") is a macro that uses pattern matching to determine its expansion. Procedural macros are Rust functions that run and modify the compiler's input token stream, before any other components are compiled. They are generally more flexible than declarative macros, but are more difficult to maintain due to their complexity. Procedural macros come in three flavors: Function-like macros custom!(...) Derive macros #[derive(CustomDerive)] Attribute macros #[custom_attribute] The println! macro is an example of a function-like macro. Theserde_derive macro provides a commonly used library for generating code for reading and writing data in many formats, such as JSON. Attribute macros are commonly used for language bindings, such as the extendr library for Rust bindings to R. The following code shows the use of the Serialize, Deserialize, and Debug-derived procedural macros to implement JSON reading and writing, as well as the ability to format a structure for debugging. use serde_json::{Serialize, Deserialize}; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point { x: 1, y: 2 }; let serialized = serde_json::to_string(&point).unwrap(); println!("serialized = {}", serialized); let deserialized: Point = serde_json::from_str(&serialized).unwrap(); println!("deserialized = {:?}", deserialized); } Rust does not support variadic arguments in functions. Instead, it uses macros. macro_rules! calculate { // The pattern for a single `eval` (eval $e:expr) => {{ { let val: usize = $e; // Force types to be integers println!("{} = {}", stringify!{$e}, val); } }}; // Decompose multiple `eval`s recursively (eval $e:expr, $(eval $es:expr),+) => {{ calculate! { eval $e } calculate! { $(eval $es),+ } }}; } fn main() { calculate! { // Look ma! Variadic `calculate!`! eval 1 + 2, eval 3 + 4, eval (2 * 3) + 1 } } Rust is able to interact with C's variadic system via a c_variadic feature switch. As with other C interfaces, the system is considered unsafe to Rust. Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. As of 2023, an external library called CXX exists for calling to or from C++. Rust and C differ in how they lay out structs in memory, so Rust structs may be given a #[repr(C)] attribute, forcing the same layout as the equivalent C struct. The Rust ecosystem includes its compiler, its standard library, and additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project. The Rust compiler is named rustc, and translates Rust code into a low level language called LLVM intermediate representation (LLVM IR). LLVM is then invoked as a subcomponent to translate IR code into machine code. A linker is then used to combine multiple crates together as a single executable or binary file. Other than LLVM, the compiler also supports using alternative backends such as GCC and Cranelift for code generation. The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation times. The Rust standard library defines and implements many widely used custom data types, including core data structures such as Vec, Option, and HashMap, as well as smart pointer types. Rust also provides a way to exclude most of the standard library using the attribute #![no_std]; this enables applications, such as embedded devices, which want to remove dependency code or provide their own core data structures. Internally, the standard library is divided into three parts, core, alloc, and std, where std and alloc are excluded by #![no_std]. Cargo is Rust's build system and package manager. It downloads, compiles, distributes, and uploads packages—called crates—that are maintained in an official registry. It also acts as a front-end for Clippy and other Rust components. By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories and crates in the local filesystem, and other external sources can also be specified as dependencies. Rustfmt is a code formatter for Rust. It formats whitespace and indentation to produce code in accordance with a common style, unless otherwise specified. It can be invoked as a standalone program, or from a Rust project through Cargo. Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. As of 2024[update], it has more than 700 rules. Following Rust 1.0, new features are developed in nightly versions which are released daily. During each six-week release cycle, changes to nightly versions are released to beta, while changes from the previous beta version are released to a new stable version. Every two or three years, a new "edition" is produced. Editions are released to allow making limited breaking changes, such as promoting await to a keyword to support async/await features. Crates targeting different editions can interoperate with each other, so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions. Migration to a new edition can be assisted with automated tooling. The most popular language server for Rust is Rust Analyzer, which officially replaced the original language server, RLS, in July 2022. Rust Analyzer provides IDEs and text editors with information about a Rust project; basic features including autocompletion, and the display of compilation errors while editing. In general, Rust's memory safety guarantees do not impose a runtime overhead. A notable exception is array indexing which is checked at runtime, though this often does not impact performance. Since it does not perform garbage collection, Rust is often faster than other memory-safe languages. Rust provides two "modes": safe and unsafe. Safe mode is the "normal" one, in which most Rust is written. In unsafe mode, the developer is responsible for the code's memory safety, which is useful for cases where the compiler is too restrictive. Many of Rust's features are so-called zero-cost abstractions, meaning they are optimized away at compile time and incur no runtime penalty. The ownership and borrowing system permits zero-copy implementations for some performance-sensitive tasks, such as parsing. Static dispatch is used by default to eliminate method calls, with the exception of methods called on dynamic trait objects. The compiler also uses inline expansion to eliminate function calls and statically-dispatched method invocations. Since Rust utilizes LLVM, any performance improvements in LLVM also carry over to Rust. Unlike C and C++, Rust allows for reordering struct and enum elements to reduce the sizes of structures in memory, for better memory alignment, and to improve cache access efficiency. Rust has been used in software across different domains. Rust was initially funded by Mozilla as part of developing Servo, an experimental parallel browser engine, in collaboration with Samsung. Components from the Servo engine were later incorporated in the Gecko browser engine underlying Firefox. In January 2023, Google (Alphabet) announced support for third party Rust libraries in Chromium and consequently in the ChromeOS code base. Rust is used in several backend software projects of large web services. OpenDNS, a DNS resolution service owned by Cisco, uses Rust internally. Amazon Web Services began developing projects in Rust as early as 2017, including Firecracker, a virtualization solution; Bottlerocket, a Linux distribution and containerization solution; and Tokio, an asynchronous networking stack. Microsoft Azure IoT Edge, a platform used to run Azure services on IoT devices, has components implemented in Rust. Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes. Cloudflare, a company providing content delivery network services uses Rust for its firewall pattern matching engine and the Pingora web server. In operating systems, Rust support has been added to Linux and Android. Microsoft is rewriting parts of Windows in Rust. The r9 project aims to re-implement Plan 9 from Bell Labs in Rust. Rust has been used in the development of new operating systems such as Redox, a "Unix-like" operating system and microkernel, Theseus, an experimental operating system with modular state management, and most of Fuchsia. Rust is also used for command-line tools and operating system components, including stratisd, a file system manager and COSMIC, a desktop environment by System76. In web development, the npm package manager started using Rust in production in 2019. Deno, a secure runtime for JavaScript and TypeScript, is built with V8, Rust, and Tokio. Other notable adoptions in this space include Ruffle, an open-source SWF emulator, and Polkadot, an open source blockchain and cryptocurrency platform. Discord, an instant messaging social platform uses Rust for portions of its backend, as well as client-side video encoding. In 2021, Dropbox announced their use of Rust for a screen, video, and image capturing service. Facebook (Meta) used Rust for Mononoke, a server for the Mercurial version control system. In the 2023 Stack Overflow Developer Survey, 13% of respondents had recently done extensive development in Rust. The survey also named Rust the "most loved programming language" every year from 2016 to 2023 (inclusive), based on the number of developers interested in continuing to work in the same language. In 2023, Rust was the 6th "most wanted technology", with 31% of developers not currently working in Rust expressing an interest in doing so. The Rust Foundation is a non-profit membership organization incorporated in United States, with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets. It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla). The foundation's board is chaired by Shane Miller. Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul. Prior to this, Ashley Williams was interim executive director. The Rust project is composed of teams that are responsible for different subareas of the development. The compiler team develops, manages, and optimizes compiler internals; and the language team designs new language features and helps implement them. The Rust project website lists 9 top-level teams as of January 2024[update]. Representatives among teams form the Leadership council, which oversees the Rust project as a whole. Comparison of programming languages History of programming languages List of programming languages List of programming languages by type Including build tools, host tools, and standard library support for x86-64, ARM, MIPS, RISC-V, WebAssembly, i686, AArch64, PowerPC, and s390x. Including Windows, Linux, macOS, FreeBSD, NetBSD, and Illumos. Host build tools on Android, iOS, Haiku, Redox, and Fuchsia are not officially shipped; these operating systems are supported as targets. Third-party dependencies, e.g., LLVM or MSVC, are subject to their own licenses. This literal uses an explicit suffix, which is not needed when type can be inferred from the context Interpreted as i32 by default, or inferred from the context Type inferred from the context On Unix systems, this is often UTF-8 strings without an internal 0 byte. On Windows, this is UTF-16 strings without an internal 0 byte. Unlike these, str and String are always valid UTF-8 and can contain internal zeros. That is, among respondents who have done "extensive development work [with Rust] in over the past year" (13.05%), Rust had the largest percentage who also expressed interest to "work in [Rust] over the next year" (84.66%). Gjengset, Jon (2021). Rust for Rustaceans (1st ed.). No Starch Press. ISBN 9781718501850. OCLC 1277511986. Klabnik, Steve; Nichols, Carol (2019-08-12). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBN 978-1-7185-0044-0. Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021). Programming Rust: Fast, Safe Systems Development (2nd ed.). O'Reilly Media. ISBN 978-1-4920-5254-8. OCLC 1289839504. McNamara, Tim (2021). Rust in Action. Manning Publications. ISBN 978-1-6172-9455-6. OCLC 1153044639. Klabnik, Steve; Nichols, Carol (2023). The Rust programming language (2nd ed.). No Starch Press. ISBN 978-1-7185-0310-6. OCLC 1363816350. "Announcing Rust 1.77.1". 2024-03-28. Retrieved 2024-03-28. "Platform Support". The rustc book. Retrieved 2022-06-27. "The Rust Programming Language". The Rust Programming Language. 2022-10-19. "Rust Legal Policies". Rust-lang.org. Archived from the original on 2018-04-04. Retrieved 2018-04-03. "Influences - The Rust Reference". The Rust Reference. Archived from the original on 2023-11-26. Retrieved 2023-12-31. "Uniqueness Types". Rust Blog. Retrieved 2016-10-08. Those of you familiar with the Elm style may recognize that the updated --explain messages draw heavy inspiration from the Elm approach. "Uniqueness Types". Idris 1.3.3 documentation. Retrieved 2022-07-14. They are inspired by ... ownership types and borrowed pointers in the Rust programming language. "Microsoft opens up Rust-inspired Project Verona programming language on GitHub". ZDNet. Archived from the original on 2020-01-17. Retrieved 2020-01-17. Jaloyan, Georges-Axel (2017-10-19). "Safe Pointers in SPARK 2014". arXiv:1710.07047 [cs.PL]. Lattner, Chris. "Chris Lattner's Homepage". Nondot.org. Archived from the original on 2018-12-25. Retrieved 2019-05-14. "V documentation (Introduction)". GitHub. Retrieved 2023-11-04. Yegulalp, Serdar (2016-08-29). "New challenger joins Rust to topple C language". InfoWorld. Retrieved 2022-10-19. Eshwarla, Prabhu (2020-12-24). Practical System Programming for Rust Developers: Build fast and secure software for Linux/Unix systems with the help of practical examples. Packt Publishing Ltd. ISBN 978-1-80056-201-1. Blandy, Jim; Orendorff, Jason (2017-11-21). Programming Rust: Fast, Safe Systems Development. O'Reilly Media, Inc. ISBN 978-1-4919-2725-0. Blanco-Cuaresma, Sergi; Bolmont, Emeline (2017-05-30). "What can the programming language Rust do for astrophysics?". Proceedings of the International Astronomical Union. 12 (S325): 341–344. arXiv:1702.02951. Bibcode:2017IAUS..325..341B. doi:10.1017/S1743921316013168. ISSN 1743-9213. S2CID 7857871. Perkel, Jeffrey M. (2020-12-01). "Why scientists are turning to Rust". Nature. 588 (7836): 185–186. Bibcode:2020Natur.588..185P. doi:10.1038/d41586-020-03382-2. PMID 33262490. S2CID 227251258. Archived from the original on 2022-05-06. Retrieved 2022-05-15. "Computer Scientist proves safety claims of the programming language Rust". EurekAlert!. Archived from the original on 2022-02-24. Retrieved 2022-05-15. Jung, Ralf; Jourdan, Jacques-Henri; Krebbers, Robbert; Dreyer, Derek (2017-12-27). "RustBelt: securing the foundations of the Rust programming language". Proceedings of the ACM on Programming Languages. 2 (POPL): 66:1–66:34. doi:10.1145/3158154. hdl:21.11116/0000-0003-34C6-3. S2CID 215791659. Archived from the original on 2022-06-11. Retrieved 2022-05-15. Jung, Ralf (2020). Understanding and evolving the Rust programming language (PhD thesis). Saarland University. doi:10.22028/D291-31946. Archived from the original on 2022-03-08. Retrieved 2022-05-15. Thompson, Clive (2023-02-14). "How Rust went from a side project to the world's most-loved programming language". MIT Technology Review. Retrieved 2023-02-23. Avram, Abel (2012-08-03). "Interview on Rust, a Systems Programming Language Developed by Mozilla". InfoQ. Archived from the original on 2013-07-24. Retrieved 2013-08-17. Asay, Matt (2021-04-12). "Rust, not Firefox, is Mozilla's greatest industry contribution". TechRepublic. Retrieved 2022-07-07. Hoare, Graydon (2010-07-07). Project Servo (PDF). Mozilla Annual Summit 2010. Whistler, Canada. Archived (PDF) from the original on 2017-07-11. Retrieved 2017-02-22. "Rust logo". bugzilla.mozilla.org. Retrieved 2024-02-02. Hoare, Graydon (2012-03-29). "[rust-dev] Rust 0.2 released". mail.mozilla.org. Retrieved 2022-06-12. Hoare, Graydon (2012-07-12). "[rust-dev] Rust 0.3 released". mail.mozilla.org. Archived from the original on 2022-08-24. Retrieved 2022-06-12. Hoare, Graydon (2012-10-15). "[rust-dev] Rust 0.4 released". mail.mozilla.org. Archived from the original on 2021-10-31. Retrieved 2021-10-31. Binstock, Andrew (2014-01-07). "The Rise And Fall of Languages in 2013". Dr. Dobb's Journal. Archived from the original on 2016-08-07. Retrieved 2022-11-20. "Version History". GitHub. Archived from the original on 2015-05-15. Retrieved 2017-01-01. The Rust Core Team (2015-05-15). "Announcing Rust 1.0". Rust Blog. Archived from the original on 2015-05-15. Retrieved 2015-12-11. Lardinois, Frederic (2017-09-29). "It's time to give Firefox another chance". TechCrunch. Retrieved 2023-08-15. Cimpanu, Catalin (2020-08-11). "Mozilla lays off 250 employees while it refocuses on commercial products". ZDNet. Archived from the original on 2022-03-18. Retrieved 2020-12-02. Cooper, Daniel (2020-08-11). "Mozilla lays off 250 employees due to the pandemic". Engadget. Archived from the original on 2020-12-13. Retrieved 2020-12-02. Tung, Liam. "Programming language Rust: Mozilla job cuts have hit us badly but here's how we'll survive". ZDNet. Archived from the original on 2022-04-21. Retrieved 2022-04-21. "Laying the foundation for Rust's future". Rust Blog. 2020-08-18. Archived from the original on 2020-12-02. Retrieved 2020-12-02. "Hello World!". Rust Foundation. 2020-02-08. Archived from the original on 2022-04-19. Retrieved 2022-06-04. "Mozilla Welcomes the Rust Foundation". Mozilla Blog. 2021-02-09. Archived from the original on 2021-02-08. Retrieved 2021-02-09. Amadeo, Ron (2021-04-07). "Google is now writing low-level Android code in Rust". Ars Technica. Archived from the original on 2021-04-08. Retrieved 2021-04-08. Anderson, Tim (2021-11-23). "Entire Rust moderation team resigns". The Register. Retrieved 2022-08-04. "Governance Update". Inside Rust Blog. Retrieved 2022-10-27. Claburn, Thomas (2023-04-17). "Rust Foundation apologizes for trademark policy confusion". The Register. Retrieved 2023-05-07. Proven, Liam (2019-11-27). "Rebecca Rumbul named new CEO of The Rust Foundation". The Register. Retrieved 2022-07-14. Both are curly bracket languages, with C-like syntax that makes them unintimidating for C programmers. Brandon Vigliarolo (2021-02-10). "The Rust programming language now has its own independent foundation". TechRepublic. Retrieved 2022-07-14. Klabnik & Nichols 2019, p. 263. Klabnik & Nichols 2019, pp. 5–6. Klabnik & Nichols 2019, pp. 49–57. Klabnik & Nichols 2019, pp. 104–109. Klabnik & Nichols 2019, p. 49. Klabnik & Nichols 2019, pp. 50–53. Tyson, Matthew (2022-03-03). "Rust programming for Java developers". InfoWorld. Retrieved 2022-07-14. "Closures - Rust By Example". doc.rust-lang.org. "As input parameters - Rust By Example". doc.rust-lang.org. "Lifetimes - Rust By Example". doc.rust-lang.org. Klabnik & Nichols 2019, pp. 24. Klabnik & Nichols 2019, pp. 32–33. Klabnik & Nichols 2019, pp. 36–38. Klabnik & Nichols 2019, pp. 39–40. "str – Rust". doc.rust-lang.org. Retrieved 2023-06-23. "slice – Rust". doc.rust-lang.org. Retrieved 2023-06-23. "Tuples". Rust By Example. Retrieved 2023-10-01. "std::boxed – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "OsStr in std::ffi – Rust". doc.rust-lang.org. Retrieved 2023-10-02. "OsString in std::ffi – Rust". doc.rust-lang.org. Retrieved 2023-10-02. "Path in std::path – Rust". doc.rust-lang.org. Retrieved 2023-10-02. "PathBuf in std::path – Rust". doc.rust-lang.org. Retrieved 2023-10-02. "std::boxed – Rust". doc.rust-lang.org. Retrieved 2023-06-23. "Rc in std::rc – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "Arc in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "Cell in std::cell – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "Mutex in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "RwLock in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "Condvar in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "Duration in std::time – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "HashMap in std::collections – Rust". doc.rust-lang.org. Retrieved 2023-06-24. "BTreeMap in std::collections – Rust". doc.rust-lang.org. Retrieved 2023-06-24. McNamara 2021. Klabnik & Nichols 2019, pp. 101–104. "std::option - Rust". doc.rust-lang.org. Retrieved 2023-11-12. Klabnik & Nichols 2019, pp. 418–427. Klabnik & Nichols 2019, p. 83. Klabnik & Nichols 2019, p. 97. Klabnik & Nichols 2019, pp. 98–101. Klabnik & Nichols 2019, pp. 438–440. Klabnik & Nichols 2019, pp. 93. "Casting - Rust By Example". doc.rust-lang.org. Klabnik & Nichols 2019, pp. 59–61. Klabnik & Nichols 2019, pp. 63–68. Klabnik & Nichols 2019, pp. 74–75. Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). "System Programming in Rust". Proceedings of the 16th Workshop on Hot Topics in Operating Systems. HotOS '17. New York, NY, US: Association for Computing Machinery. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Archived from the original on 2022-06-11. Retrieved 2022-06-01. Klabnik & Nichols 2023, pp. 327–30. Klabnik & Nichols 2019, p. 194. Klabnik & Nichols 2019, pp. 75, 134. Shamrell-Harrington, Nell. "The Rust Borrow Checker – a Deep Dive". InfoQ. Retrieved 2022-06-25. Klabnik & Nichols 2019, pp. 194–195. Klabnik & Nichols 2019, pp. 192–204. Klabnik & Nichols 2019, pp. 201–203. Rosenblatt, Seth (2013-04-03). "Samsung joins Mozilla's quest for Rust". CNET. Archived from the original on 2013-04-04. Retrieved 2013-04-05. Brown, Neil (2013-04-17). "A taste of Rust". Archived from the original on 2013-04-26. Retrieved 2013-04-25. "Races – The Rustonomicon". doc.rust-lang.org. Archived from the original on 2017-07-10. Retrieved 2017-07-03. "The Rust Language FAQ". static.rust-lang.org. 2015. Archived from the original on 2015-04-20. Retrieved 2017-04-24. McNamara 2021, p. 139, 376–379, 395. "RAII – Rust By Example". doc.rust-lang.org. Archived from the original on 2019-04-21. Retrieved 2020-11-22. "Abstraction without overhead: traits in Rust". Rust Blog. Archived from the original on 2021-09-23. Retrieved 2021-10-19. "Box, stack and heap". Rust By Example. Retrieved 2022-06-13. Klabnik & Nichols 2019, pp. 70–75. Klabnik & Nichols 2019, p. 323. Klabnik & Nichols 2019, pp. 171–172. Klabnik & Nichols 2019, pp. 171–172, 205. Klabnik & Nichols 2019, pp. 181, 182. Gjengset 2021, p. 25. Klabnik & Nichols 2019, pp. 182–184. Klabnik & Nichols 2019, pp. 281–283. "Using Trait Objects That Allow for Values of Different Types – The Rust Programming Language". doc.rust-lang.org. Retrieved 2022-07-11. Klabnik & Nichols 2019, pp. 441–442. Klabnik & Nichols 2019, pp. 379–380. "Macros By Example". The Rust Reference. Retrieved 2023-04-21. Klabnik & Nichols 2019, pp. 446–448. "Procedural Macros". The Rust Programming Language Reference. Archived from the original on 2020-11-07. Retrieved 2021-03-23. Klabnik & Nichols 2019, pp. 449–455. "Serde Derive". Serde Derive documentation. Archived from the original on 2021-04-17. Retrieved 2021-03-23. "extendr_api – Rust". Extendr Api Documentation. Archived from the original on 2021-05-25. Retrieved 2021-03-23. "Variadics". Rust By Example. "2137-variadic". The Rust RFC Book. "Safe Interoperability between Rust and C++ with CXX". InfoQ. 2020-12-06. Archived from the original on 2021-01-22. Retrieved 2021-01-03. "Type layout – The Rust Reference". doc.rust-lang.org. Retrieved 2022-07-15. Blandy, Orendorff & Tindall 2021, pp. 6–8. McNamara 2021, pp. 411–412. "Overview of the compiler". Rust Compiler Development Guide. Retrieved 2023-06-02. "Code Generation - Rust Compiler Development Guide". rustc-dev-guide.rust-lang.org. Retrieved 2024-03-03. "rust-lang/rustc_codegen_gcc". GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. "rust-lang/rustc_codegen_cranelift". GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. Gjengset 2021, p. 213-215. Simone, Sergio De (2019-04-18). "Rust 1.34 Introduces Alternative Registries for Non-Public Crates". InfoQ. Retrieved 2022-07-14. Klabnik & Nichols 2019, pp. 511–512. Clippy, The Rust Programming Language, 2023-11-30, retrieved 2023-11-30 "Clippy Lints". The Rust Programming Language. Retrieved 2023-11-30. Klabnik & Nichols 2019, Appendix G – How Rust is Made and "Nightly Rust" Blandy, Orendorff & Tindall 2021, pp. 176–177. Anderson, Tim (2022-07-05). "Rust team releases 1.62, sets end date for deprecated language server". DEVCLASS. Retrieved 2022-07-14. Klabnik & Nichols 2023, p. 623. McNamara 2021, p. 11. Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-15). "Safer at any speed: automatic context-aware safety enhancement for Rust". Proceedings of the ACM on Programming Languages. 5 (OOPSLA). Section 2. doi:10.1145/3485480. S2CID 238212612. p. 5: We observe a large variance in the overheads of checked indexing: 23.6% of benchmarks do report significant performance hits from checked indexing, but 64.5% report little-to-no impact and, surprisingly, 11.8% report improved performance ... Ultimately, while unchecked indexing can improve performance, most of the time it does not. Anderson, Tim. "Can Rust save the planet? Why, and why not". The Register. Retrieved 2022-07-11. Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). "System Programming in Rust". Proceedings of the 16th Workshop on Hot Topics in Operating Systems. Whistler BC Canada: ACM. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Yegulalp, Serdar (2021-10-06). "What is the Rust language? Safe, fast, and easy software development". InfoWorld. Retrieved 2022-06-25. Wróbel, Krzysztof (2022-04-11). "Rust projects – why large IT companies use Rust?". Archived from the original on 2022-12-27. McNamara 2021, p. 19, 27. Couprie, Geoffroy (2015). "Nom, A Byte oriented, streaming, Zero copy, Parser Combinators Library in Rust". 2015 IEEE Security and Privacy Workshops. pp. 142–148. doi:10.1109/SPW.2015.31. ISBN 978-1-4799-9933-0. S2CID 16608844. McNamara 2021, p. 20. "Code generation – The Rust Reference". doc.rust-lang.org. Retrieved 2022-10-09. "How Fast Is Rust?". The Rust Programming Language FAQ. Archived from the original on 2020-10-28. Retrieved 2019-04-11. Farshin, Alireza; Barbette, Tom; Roozbeh, Amir; Maguire Jr, Gerald Q.; Kostić, Dejan (2021). "PacketMill: Toward per-Core 100-GBPS networking". Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems. pp. 1–17. doi:10.1145/3445814.3446724. ISBN 9781450383172. S2CID 231949599. Retrieved 2022-07-12. ... While some compilers (e.g., Rust) support structure reordering [82], C & C++ compilers are forbidden to reorder data structures (e.g., struct or class) [74] ... "Type layout". The Rust Reference. Retrieved 2022-07-14. Lardinois, Frederic (2015-04-03). "Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors". TechCrunch. Archived from the original on 2016-09-10. Retrieved 2017-06-25. Keizer, Gregg (2016-10-31). "Mozilla plans to rejuvenate Firefox in 2017". Computerworld. Retrieved 2023-05-13. "Supporting the Use of Rust in the Chromium Project". Google Online Security Blog. Retrieved 2023-11-12. Shankland, Stephen (2016-07-12). "Firefox will get overhaul in bid to get you interested again". CNET. Retrieved 2022-07-14. Security Research Team (2013-10-04). "ZeroMQ: Helping us Block Malicious Domains in Real Time". Cisco Umbrella. Retrieved 2023-05-13. "How our AWS Rust team will contribute to Rust's future successes". Amazon Web Services. 2021-03-03. Archived from the original on 2022-01-02. Retrieved 2022-01-02. "Firecracker – Lightweight Virtualization for Serverless Computing". Amazon Web Services. 2018-11-26. Archived from the original on 2021-12-08. Retrieved 2022-01-02. "Announcing the General Availability of Bottlerocket, an open source Linux distribution built to run containers". Amazon Web Services. 2020-08-31. Archived from the original on 2022-01-02. Retrieved 2022-01-02. "Why AWS loves Rust, and how we'd like to help". Amazon Web Services. 2020-11-24. Archived from the original on 2020-12-03. Retrieved 2022-04-21. Nichols, Shaun (2018-06-27). "Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge". The Register. Archived from the original on 2019-09-27. Retrieved 2019-09-27. Tung, Liam. "Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app". ZDNet. Archived from the original on 2022-04-21. Retrieved 2022-04-21. "How we made Firewall Rules". The Cloudflare Blog. 2019-03-04. Retrieved 2022-06-11. "Enjoy a slice of QUIC, and Rust!". The Cloudflare Blog. 2019-01-22. Retrieved 2022-06-11. Anderson, Tim (2021-12-07). "Rusty Linux kernel draws closer with new patch". The Register. Retrieved 2022-07-14. "A first look at Rust in the 6.1 kernel [LWN.net]". lwn.net. Retrieved 2023-11-11. "Rust in the Android platform". Google Online Security Blog. Archived from the original on 2022-04-03. Retrieved 2022-04-21. Amadeo, Ron (2021-04-07). "Google is now writing low-level Android code in Rust". Ars Technica. Archived from the original on 2021-04-08. Retrieved 2022-04-21. Claburn, Thomas (2023-04-27). "Microsoft is rewriting core Windows libraries in Rust". The Register. Retrieved 2023-05-13. Proven, Liam. "Small but mighty, 9Front's 'Humanbiologics' is here for the truly curious". The Register. The Register. Retrieved 2024-03-07. Yegulalp, Serdar. "Rust's Redox OS could show Linux a few new tricks". InfoWorld. Archived from the original on 2016-03-21. Retrieved 2016-03-21. Anderson, Tim (2021-01-14). "Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems". The Register. Retrieved 2022-07-14. Boos, Kevin; Liyanage, Namitha; Ijaz, Ramla; Zhong, Lin (2020). Theseus: an Experiment in Operating System Structure and State Management. pp. 1–19. ISBN 978-1-939133-19-9. Zhang, HanDong (Alex) (2023-01-31). "2022 Review | The adoption of Rust in Business". Rust Magazine. Retrieved 2023-02-07. Sei, Mark (2018-10-10). "Fedora 29 new features: Startis now officially in Fedora". Marksei, Weekly sysadmin pills. Archived from the original on 2019-04-13. Retrieved 2019-05-13. Proven, Liam (2022-07-12). "Oracle Linux 9 released, with some interesting additions". The Register. Retrieved 2022-07-14. Patel, Pratham (2022-01-14). "I Tried System76's New Rust-based COSMIC Desktop!". It's FOSS News – Development Updates. It's FOSS News. Retrieved 2023-01-10. "Pop!_OS by System76". pop.system76.com. System76, Inc. Retrieved 2023-01-10. Simone, Sergio De. "NPM Adopted Rust to Remove Performance Bottlenecks". InfoQ. Retrieved 2023-11-20. Lyu, Shing (2020), Lyu, Shing (ed.), "Welcome to the World of Rust", Practical Rust Projects: Building Game, Physical Computing, and Machine Learning Applications, Berkeley, CA: Apress, pp. 1–8, doi:10.1007/978-1-4842-5599-5_1, ISBN 978-1-4842-5599-5, retrieved 2023-11-29 Lyu, Shing (2021), Lyu, Shing (ed.), "Rust in the Web World", Practical Rust Web Projects: Building Cloud and Web-Based Applications, Berkeley, CA: Apress, pp. 1–7, doi:10.1007/978-1-4842-6589-5_1, ISBN 978-1-4842-6589-5, retrieved 2023-11-29 Hu, Vivian (2020-06-12). "Deno Is Ready for Production". InfoQ. Retrieved 2022-07-14. Abrams, Lawrence (2021-02-06). "This Flash Player emulator lets you securely play your old games". BleepingComputer. Retrieved 2021-12-25. Kharif, Olga (2020-10-17). "Ethereum Blockchain Killer Goes By Unassuming Name of Polkadot". Bloomberg L.P. Retrieved 2021-07-14. Howarth, Jesse (2020-02-04). "Why Discord is switching from Go to Rust". Archived from the original on 2020-06-30. Retrieved 2020-04-14. The Dropbox Capture Team. "Why we built a custom Rust library for Capture". Dropbox.Tech. Archived from the original on 2022-04-06. Retrieved 2022-04-21. "A brief history of Rust at Facebook". Engineering at Meta. 2021-04-29. Archived from the original on 2022-01-19. Retrieved 2022-04-21. "Stack Overflow Developer Survey 2023". Stack Overflow. Retrieved 2023-06-25. Claburn, Thomas (2022-06-23). "Linus Torvalds says Rust is coming to the Linux kernel". The Register. Retrieved 2022-07-15. Klabnik & Nichols 2019, p. 4. "Getting Started". rust-lang.org. Archived from the original on 2020-11-01. Retrieved 2020-10-11. Tung, Liam (2021-02-08). "The Rust programming language just took a huge step forwards". ZDNet. Retrieved 2022-07-14. Krill, Paul. "Rust language moves to independent foundation". InfoWorld. Archived from the original on 2021-04-10. Retrieved 2021-04-10. Vaughan-Nichols, Steven J. (2021-04-09). "AWS's Shane Miller to head the newly created Rust Foundation". ZDNet. Archived from the original on 2021-04-10. Retrieved 2021-04-10. Vaughan-Nichols, Steven J. (2021-11-17). "Rust Foundation appoints Rebecca Rumbul as executive director". ZDNet. Archived from the original on 2021-11-18. Retrieved 2021-11-18. "The Rust programming language now has its own independent foundation". TechRepublic. 2021-02-10. Archived from the original on 2021-11-18. Retrieved 2021-11-18. "Governance". The Rust Programming Language. Archived from the original on 2022-05-10. Retrieved 2022-05-07. "Introducing the Rust Leadership Council". Rust Blog. Retrieved 2024-01-12. Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021-07-06). Programming Rust: Fast, Safe Systems Development. O'Reilly Media. ISBN 978-1-4920-5259-3. Rust at Wikipedia's sister projects Media from Commons Resources from Wikiversity Data from Wikidata Official website Portal:  Computer programming
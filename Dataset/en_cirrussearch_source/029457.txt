AngularJS is a discontinued free and open-source JavaScript-based web framework for developing single-page applications. It was maintained mainly by Google and a community of individuals and corporations. It aimed to simplify both the development and the testing of such applications by providing a framework for client-side model–view–controller (MVC) and model–view–viewmodel (MVVM) architectures, along with components commonly used in web applications and progressive web applications. AngularJS was used as the frontend of the MEAN stack, that consisted of MongoDB database, Express.js web application server framework, AngularJS itself (or Angular), and Node.js server runtime environment. As of January 1, 2022, Google no longer updates AngularJS to fix security, browser compatibility, or jQuery issues. The Angular team recommends upgrading to Angular (v2+) as the best path forward, but they also provided some other options. The AngularJS framework worked by first reading the HyperText Markup Language (HTML) page, which had additional custom HTML attributes embedded into it. Angular interpreted those attributes as directives to bind input or output parts of the page to a model that is represented by standard JavaScript variables. The values of those JavaScript variables could be manually set within the code or retrieved from static or dynamic JSON resources. AngularJS was built on the belief that declarative programming should be used to create user interfaces and connect software components, while imperative programming was better suited to defining an application's business logic. The framework adapted and extended traditional HTML to present dynamic content through two-way data-binding that allowed for the automatic synchronization of models and views. As a result, AngularJS de-emphasized explicit Document Object Model (DOM) manipulation with the goal of improving testability and performance. AngularJS's design goals included: to decouple DOM manipulation from application logic. The difficulty of this is dramatically affected by the way the code is structured. to decouple the client side of an application from the server-side. This allows development work to progress in parallel and allows for reuse of both sides. to provide structure for the journey of building an application: from designing the UI, through writing the business logic, to testing. AngularJS implemented the MVC pattern to separate presentation, data, and logic components. Using dependency injection, Angular brought traditionally server-side services, such as view-dependent controllers, to client-side web applications. Consequently, much of the burden on the server could be reduced. AngularJS used the term "scope" in a manner akin to the fundamentals of computer science. Scope in computer science describes when in the program a particular binding is valid. The ECMA-262 specification defines scope as: a lexical environment in which a Function object is executed in client-side web scripts; akin to how scope is defined in lambda calculus. As a part of the "MVC" architecture, the scope forms the "Model", and all variables defined in the scope can be accessed by the "View" as well as the "Controller". The scope behaves as a glue and binds the "View" and the "Controller". The task performed by the AngularJS bootstrapper occurred in three phases after the DOM has been loaded: Creation of a new Injector Compilation of the directives that decorate the DOM Linking of all directives to scope AngularJS directives allowed the developer to specify custom and reusable HTML-like elements and attributes that define data bindings and the behavior of presentation components. Some of the most commonly used directives were: ng-animate A module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives. Since ng-* attributes are not valid in HTML specifications, data-ng-* can also be used as a prefix. For example, both ng-app and data-ng-app are valid in AngularJS. ng-app Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior. ng-aria A module for accessibility support of common ARIA attributes. ng-bind Sets the text of a DOM element to the value of an expression. For example, <span ng-bind="name"></span> displays the value of ‘name’ inside the span element. Any change to the variable ‘name’ in the application's scope reflect instantly in the DOM. ng-class Conditionally apply a class, depending on the value of a Boolean expression. ng-controller Specifies a JavaScript controller class that evaluates HTML expressions. ng-if Basic if statement directive that instantiates the following element if the conditions are true. When the condition is false, the element is removed from the DOM. When true, a clone of the compiled element is re-inserted. ng-init Called once when the element is initialized. ng-model Similar to ng-bind, but establishes a two-way data binding between the view and the scope. ng-model-options Provides tuning for how model updates are done. ng-repeat Instantiate an element once per item from a collection. ng-show & ng-hide Conditionally show or hide an element, depending on the value of a Boolean expression. Show and hide is achieved by setting the CSS display style. ng-switch Conditionally instantiate one template from a set of choices, depending on the value of a selection expression. ng-view The base directive responsible for handling routes that resolve JSON before rendering templates driven by specified controllers. AngularJS two-way data binding had its most notable feature, largely relieving the server backend of templating responsibilities. Instead, templates were rendered in plain HTML according to data contained in a scope defined in the model. The $scope service in Angular detected changes to the model section and modified HTML expressions in the view via a controller. Likewise, any alterations to the view were reflected in the model. This circumvented the need to actively manipulate the DOM and encouraged bootstrapping and rapid prototyping of web applications. AngularJS detected changes in models by comparing the current values with values stored earlier in a process of dirty-checking, unlike Ember.js and Backbone.js that triggered listeners when the model values are changed. $watch is an angular method used for dirty checking. Any variable or expression assigned in $scope automatically sets up a $watchExpression in angular. So assigning a variable to $scope or using directives like ng-if, ng-show, ng-repeat etc. all create watches in angular scope automatically. Angular maintains a simple array of $$watchers in the $scope objects Different ways of defining a watcher in AngularJS. explicitly $watch an attribute on $scope. $scope.$watch('person.username', validateUnique); place an interpolation in your template (a watcher will be created for you on the current $scope). ask a directive such as ng-model to define the watcher for you. <input ng-model="person.username" /> $digest is angular method that is invoked internally by angularjs in frequent intervals. In $digest method, angular iterates over all $watches in its scope/child scopes. $apply is an angular method that internally invokes $digest. This method is used when you want to tell angular manually start dirty checking (execute all $watches) $destroy is both a method and event in angularjs. $destroy() method, removes a scope and all its children from dirty checking. $destroy event is called by angular whenever a $scope or $controller is destroyed. AngularJS was originally developed in 2009 by Miško Hevery at Brat Tech LLC as the software behind an online JSON storage service, that would have been priced by the megabyte, for easy-to-make applications for the enterprise. This venture was located at the web domain "GetAngular.com", and had a few subscribers, before the two decided to abandon the business idea and release Angular as an open-source library. The 1.6 release added many of the concepts of Angular to AngularJS, including the concept of a component-based application architecture. This release among others removed the Sandbox, which many developers believed provided additional security, despite numerous vulnerabilities that had been discovered that bypassed the sandbox. The current (as of November 2023) stable release of AngularJS is 1.8.3 In January 2018, a schedule was announced for phasing-out AngularJS: after releasing 1.7.0, the active development on AngularJS would continue until June 30, 2018. Afterwards, 1.7 was supported until December 31, 2021 as long-term support. Versions 1.3 and later of AngularJS did not support Internet Explorer 8 or earlier. While AngularJS 1.2 supported IE8, its team does not. Subsequent versions of AngularJS are simply called Angular. Angular is an incompatible TypeScript-based rewrite of AngularJS. Angular 4 was announced on 13 December 2016, skipping 3 to avoid a confusion due to the misalignment of the router package's version which was already distributed as v3.3.0. AngularDart works on Dart, which is an object-oriented, class defined, single inheritance programming language using C style syntax, that is different from Angular JS (which uses JavaScript) and Angular 2/ Angular 4 (which uses TypeScript). Angular 4 released in March 2017, with the framework's version aligned with the version number of the router it used. Angular 5 was released on November 1, 2017. Key improvements in Angular 5 include support for progressive Web apps, a build optimizer and improvements related to Material Design. Angular 6 was released on 3 May 2018, Angular 7 was released on 18 October 2018, and Angular 8 was released on May 28, 2019. Angular follows Semantic Versioning standards, with each major version number indicating potentially breaking changes. Angular has pledged to provide 6 months of active support for each major version followed by 12 months of long-term support. Major releases are bi-yearly with 1 to 3 minor releases for every major release. A normal Angular application executes in the browser, while Angular Universal generates static application pages on the server through server-side rendering (SSR). AngularJS Material was a UI component library that implemented Material Design in AngularJS. The library provided a set of reusable, well-tested, and accessible UI components. In January 2022, the library was closed, as announced on their official website. The AngularJS Material library is a mature and stable product that is ready for production use and works only with AngularJS 1.x. The Angular Material library is available in the angular/material2 GitHub repository. In July 2012, the Angular team built an extension for the Google Chrome browser called Batarang, that improved the debugging experience for web applications built with Angular. The extension aimed to allow for easy detection of performance bottlenecks and offered a GUI for debugging applications. For a time during late 2014 and early 2015, the extension was not compatible with recent releases (after v1.2.x) of Angular. The last update made to this extension was on April 4, 2017. AngularJS set out the paradigm of a digest cycle. This cycle could be considered a loop, during which AngularJS checked if there were any changes to all the variables watched by all the $scopes. If $scope.myVar is defined in a controller and this variable was marked for watching, Angular would monitor the changes on myVar in each loop iteration. This approach potentially led to slow rendering when AngularJS checked on too many variables in the $scope every cycle. Miško Hevery suggested keeping fewer than 2000 watchers on any page. Free and open-source software portal React.js Vue.js Polymer (library) Comparison of JavaScript frameworks "Releases · angular/angular.js". GitHub. Retrieved April 9, 2021. "Release 1.8.3". 7 April 2022. Retrieved 29 July 2022. "AngularJS". docs.angularjs.org. Retrieved 2021-05-14. "AngularJS". docs.angularjs.org. Retrieved April 9, 2021. Darwin, Pete Bacon (27 July 2020). "Stable AngularJS and Long Term Support". Angular Blog. Retrieved April 9, 2021. Techson, Mark (February 2, 2021). "Finding a Path Forward with AngularJs". Medium. Retrieved April 9, 2021. "What Is Angular?". Retrieved 12 February 2013. "AngularJS". docs.angularjs.org. Retrieved April 9, 2021. "Annotated ECMAScript 5.1, Section 10.2 Lexical Environments". Retrieved 2015-01-03. Barendregt, Henk; Barendsen, Erik (March 2000), Introduction to Lambda Calculus (PDF) "Writing Directives". angularjs.org. November 28, 2012. Retrieved 2013-07-21. "AngularJS". docs.angularjs.org. Retrieved April 9, 2021. "5 Awesome AngularJS Features". Retrieved 13 February 2013. Hevery, Misko. "Databinding in angularjs". Retrieved 2014-03-09. "Hello World, <angular/> is here". Retrieved 2014-10-12. "GetAngular". Angular / BRAT Tech. LLC. Archived from the original on 2010-04-13. Retrieved 2014-10-12. "AngularJS: Developer Guide for v1.5.8: Components". Retrieved 2017-09-26. "angular.js". GitHub. Retrieved 2017-09-26. "Release v1.8.3 · angular/angular.js". GitHub. Retrieved November 29, 2023. "Internet Explorer Compatibility". Angular JS 1.7.7 Developer Guide. Retrieved 12 Feb 2019. AngularJS 1.3 has dropped support for IE8. Read more about it on our blog. AngularJS 1.2 will continue to support IE8, but the core team does not plan to spend time addressing issues specific to IE8 or earlier. Minar, Igor. "AngularJS 1.3: a new release approaches". AngularJS Blog. Archived from the original on 2014-10-13. Retrieved 2014-10-12. "Introduction to Angular". Retrieved 2021-12-08. "Ok... let me explain: it's going to be Angular 4.0". angularjs.blogspot.kr. Archived from the original on 2016-12-13. Retrieved 2016-12-14. Fluin, Stephen (April 26, 2018). "Version 5.0.0 of Angular Now Available". Medium. Retrieved April 9, 2021. Krill, Paul (September 18, 2017). "AngularJS 5 JavaScript framework delayed". InfoWorld. Retrieved April 9, 2021. Fluin, Stephen (3 May 2018). "Version 6 of Angular Now Available – Angular Blog". Angular Blog. Retrieved 8 June 2018. "Angular versioning and releases". angular.io. Retrieved 8 June 2018. Pieszak, Mark (January 7, 2020). "Angular Universal & Server-side rendering Deep-Dive". Medium. Retrieved April 9, 2021. "angular/material (GitHub)". GitHub. Retrieved 2020-12-24. "AngularJS Material Documentation". Retrieved 2020-12-24. Kotaru, V. Keerti (2016-08-25). Material Design Implementation with AngularJS: UI Component Framework. Apress. p. 4. ISBN 9781484221907. "AngularJS Material". material.angularjs.org. Retrieved 2022-05-04. "angular/angularjs-batarang (GitHub)". GitHub. Retrieved 2014-10-12. Ford, Brian. "Introducing the AngularJS Batarang". AngularJS Blog. Archived from the original on 2014-10-13. Retrieved 2014-10-12. "batarang Chrome extension for AngularJS appears broken". Green, Brad; Seshadri, Shyam (March 22, 2013). AngularJS (1st ed.). O'Reilly Media. p. 150. ISBN 978-1449344856. Kozlowski, Pawel; Darwin, Peter Bacon (August 23, 2013). Mastering Web Application Development with AngularJS (1st ed.). Packt Publishing. p. 372. ISBN 978-1782161820. Ruebbelke, Lukas (January 1, 2015). AngularJS in Action (1st ed.). Manning Publications. p. 325. ISBN 978-1617291333. Wikimedia Commons has media related to AngularJS. Official website
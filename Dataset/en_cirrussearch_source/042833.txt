Django (/ˈdʒæŋɡoʊ/ JANG-goh; sometimes stylized as django) is a free and open-source, Python-based web framework that runs on a web server. It follows the model–template–views (MTV) architectural pattern. It is maintained by the Django Software Foundation (DSF), an independent organization established in the US as a 501(c)(3) non-profit. Django's primary goal is to ease the creation of complex, database-driven websites. The framework emphasizes reusability and "pluggability" of components, less code, low coupling, rapid development, and the principle of don't repeat yourself. Python is used throughout, even for settings, files, and data models. Django also provides an optional administrative create, read, update and delete interface that is generated dynamically through introspection and configured via admin models. Some well-known sites that use Django include Instagram, Mozilla, Disqus, Bitbucket, Nextdoor and Clubhouse. Django was created in the autumn of 2003, when the web programmers at the Lawrence Journal-World newspaper, Adrian Holovaty and Simon Willison, began using Python to build applications. Jacob Kaplan-Moss was hired early in Django's development shortly before Simon Willison's internship ended. It was released publicly under a BSD license in July 2005. The framework was named after guitarist Django Reinhardt. Adrian Holovaty is a Romani jazz guitar player inspired in part by Reinhardt's music. In June 2008, it was announced that a newly formed Django Software Foundation (DSF) would maintain Django in the future. Despite having its own nomenclature, such as naming the callable objects generating the HTTP responses "views", the core Django framework can be seen as an MVC architecture. It consists of an object-relational mapper (ORM) that mediates between data models (defined as Python classes) and a relational database ("Model"), a system for processing HTTP requests with a web templating system ("View"), and a regular-expression-based URL dispatcher ("Controller"). Also included in the core framework are: a lightweight and standalone web server for development and testing a form serialization and validation system that can translate between HTML forms and values suitable for storage in the database a template system that utilizes the concept of inheritance borrowed from object-oriented programming a caching framework that can use any of several cache methods support for middleware classes that can intervene at various stages of request processing and carry out custom functions an internal dispatcher system that allows components of an application to communicate events to each other via pre-defined signals an internationalization system, including translations of Django's own components into a variety of languages a serialization system that can produce and read XML and/or JSON representations of Django model instances a system for extending the capabilities of the template engine an interface to Python's built-in unit test framework The main Django distribution also bundles a number of applications in its "contrib" package, including: an extensible authentication system the dynamic administrative interface tools for generating RSS and Atom syndication feeds a "Sites" framework that allows one Django installation to run multiple websites, each with their own content and applications tools for generating Google Sitemaps built-in mitigation for cross-site request forgery, cross-site scripting, SQL injection, password cracking and other typical web attacks, most of them turned on by default a framework for creating GIS applications Django's configuration system allows third party code to be plugged into a regular project, provided that it follows the reusable app conventions. More than 5000 packages are available to extend the framework's original behavior, providing solutions to issues the original tool didn't tackle: registration, search, API provision and consumption, CMS, etc. This extensibility is, however, mitigated by internal components' dependencies. While the Django philosophy implies loose coupling, the template filters and tags assume one engine implementation, and both the auth and admin bundled applications require the use of the internal ORM. None of these filters or bundled apps are mandatory to run a Django project, but reusable apps tend to depend on them, encouraging developers to keep using the official stack in order to benefit fully from the apps ecosystem. Django can be run in conjunction with Apache, Nginx using WSGI, Gunicorn, or Cherokee using flup (a Python module). Django also includes the ability to launch a FastCGI server, enabling use behind any web server which supports FastCGI, such as Lighttpd or Hiawatha. It is also possible to use other WSGI-compliant web servers. Django officially supports five database backends: PostgreSQL, MySQL, MariaDB, SQLite, and Oracle. Microsoft SQL Server can be used with django-mssql while similarly external backends exist for IBM Db2, SQL Anywhere and Firebird. There is a fork named django-nonrel, which supports NoSQL databases, such as MongoDB and Google App Engine's Datastore. Django may also be run in conjunction with Python on any Java EE application server such as GlassFish or JBoss. In this case django-jython must be installed in order to provide JDBC drivers for database connectivity, which also can provide functionality to compile Django in to a .war suitable for deployment. The Django team will occasionally designate certain releases to be "long-term support" (LTS) releases. LTS releases will get security and data loss fixes applied for a guaranteed period of time, typically 3+ years, regardless of the pace of releases afterwards. There is a semiannual conference for Django developers and users, named "DjangoCon", that has been held since September 2008. DjangoCon is held annually in Europe, in May or June; while another is held in the United States in August or September, in various cities. The 2012 DjangoCon took place in Washington, D.C., from 3 to 8 September. 2013 DjangoCon was held in Chicago at the Hyatt Regency Hotel and the post-conference Sprints were hosted at Digital Bootcamp, computer training center. The 2014 DjangoCon US returned to Portland, OR from 30 August to 6 September. The 2015 DjangoCon US was held in Austin, TX from 6 to 11 September at the AT&T Executive Center. The 2016 DjangoCon US was held in Philadelphia, PA at The Wharton School of the University of Pennsylvania from 17 to 22 July. The 2017 DjangoCon US was held in Spokane, WA; in 2018 DjangoCon US was held in San Diego, CA. DjangoCon US 2019 was held again in San Diego, CA from Sept 22–27. DjangoCon 2021 took place virtually and in 2022, DjangoCon US returned to San Diego from October 16th to the 21st. Django mini-conferences are usually held every year as part of the Australian Python Conference 'PyCon AU'. Previously, these mini-conferences have been held in: Hobart, Australia, in July 2013, Brisbane, Australia, in August 2014 and 2015, Melbourne, Australia in August 2016 and 2017, and Sydney, Australia, in August 2018 and 2019. Django has spawned user groups and meetups around the world, the most notable group is the Django Girls organization, which began in Poland but now has had events in 91 countries. Programmers have ported Django's template engine design from Python to other languages, providing decent cross-platform support. Some of these options are more direct ports; others, though inspired by Django and retaining its concepts, take the liberty to deviate from Django's design: Liquid for Ruby Template::Swig for Perl Twig for PHP and JavaScript Jinja for Python ErlyDTL for Erlang Django as a framework is capable of building a complete CMS, however there are dedicated CMS projects which are built upon and extend the Django framework. Below is a list of a few of the more popular Django-based CMSs: Django CMS Wagtail Mezzanine Free and open-source software portal FastAPI Flask Jam.py Pylons project Web2py Tornado Ruby on Rails Comparison of web frameworks "django/README". GitHub. Retrieved 8 September 2020. "Django FAQ". Retrieved 27 March 2019. "5.0.3". 4 March 2024. Retrieved 5 March 2024. "Django Download". Retrieved 7 August 2020. "django/LICENSE". GitHub. Retrieved 8 September 2020. "FAQ: General - Django documentation - Django". Retrieved 30 April 2016. "FAQ: General - Django documentation - Django". Retrieved 30 April 2016. Adrian Holovaty, Jacob Kaplan-Moss; et al. The Django Book. Archived from the original on 2 September 2016. Retrieved 3 September 2013. Django follows this MVC pattern closely enough that it can be called an MVC framework "Design Philosophies". Django. Retrieved 18 March 2018. "What Powers Instagram: Hundreds of Instances, Dozens of Technologies". Instagram Engineering. "Python". Mozilla Developer Network. Archived from the original on 8 February 2012. Retrieved 30 April 2016. Robenolt, Matt. "Scaling Django to 8 Billion Page Views". blog.disqus.com. "DjangoSuccessStoryBitbucket – Django". Archived from the original on 20 April 2016. Retrieved 30 April 2016. "The anti-Facebook: one in four American neighborhoods are now using this private social network". The Verge. 18 August 2014. Retrieved 16 June 2016. Demi, Luke (15 August 2021). "Reining in the thundering herd ⛈ Getting to 80% CPU utilization with Django". Clubhouse Blog. Retrieved 16 August 2021. Willison, Simon. "What is the history of the Django web framework? Why has it been described as "developed in a newsroom"?". Quora. Retrieved 18 October 2019. "Introducing Django". The Django Book. Archived from the original on 29 July 2018. Retrieved 29 July 2018. "Review: Adrian Holovaty's Playful and Precise 'Melodic Guitar Music'". Acoustic Guitar. Archived from the original on 30 December 2023. "Announcing the Django Software Foundation - Weblog - Django". Retrieved 30 April 2016. "Security in Django". Django Project. Retrieved 25 March 2013. Socol, James (2012). "Best Basic Security Practices (Especially with Django)". Retrieved 25 March 2013. "What is a reusable app? — django-reusable-app-docs 0.1.0 documentation". Retrieved 30 April 2016. "Django Packages API packages list". Retrieved 17 April 2023. "Design philosophies - Django documentation - Django". Archived from the original on 4 March 2016. Retrieved 30 April 2016. "Django documentation of deployment". Archived from the original on 11 January 2012. "Cherokee Web Server - Cookbook Setting up Django - Cherokee Documentation". Retrieved 30 April 2016. How to use Django with Apache and mod_wsgi Archived 8 March 2013 at the Wayback Machine. Official Django documentation. "Django documentation". Django documentation. Retrieved 9 June 2023. ibmdb. "GitHub - ibmdb/python-ibmdb: Automatically exported from code.google.com/p/ibm-db". GitHub. Retrieved 30 April 2016. "Google Code Archive - Long-term storage for Google Code Project Hosting". Retrieved 30 April 2016. maxirobaina. "GitHub - maxirobaina/django-firebird: Firebird SQL backend for django". GitHub. Retrieved 30 April 2016. "Django non-rel". Retrieved 30 April 2016. beachmachine. "GitHub - beachmachine/django-jython: Database backends and extensions for Django development on top of Jython". GitHub. Retrieved 30 April 2016. "Django's release process - Django documentation - Django". Retrieved 30 April 2016. "Download Django - Django". www.djangoproject.com. "FAQ: Installation - Django documentation - Django". docs.djangoproject.com. "Introducing Django 0.90". Django weblog. Retrieved 2 February 2013. "Django 0.91 released". Django weblog. Retrieved 2 February 2013. "Introducing Django 0.95". Django weblog. Retrieved 2 February 2013. "Announcing Django 0.96!". Django weblog. Retrieved 2 February 2013. "Django 1.0 released!". Django weblog. Retrieved 2 February 2013. "Django 1.1 released". Django weblog. Retrieved 2 February 2013. "Django 1.2 released". Django weblog. Retrieved 2 February 2013. "Django 1.3 released". Django weblog. Retrieved 2 February 2013. "Django 1.4 released". Django weblog. Retrieved 2 February 2013. "Django 1.5 released" Django weblog. Retrieved 27 February 2013. "Django 1.6 released" Django weblog. Retrieved 6 November 2013. "Django 1.7 released" Django weblog. Retrieved 4 September 2014. "Django 1.8 released" Django weblog. Retrieved 2 April 2015. "Django 1.9 released" Django weblog. Retrieved 1 December 2015. "Django 1.10 released" Django weblog. Retrieved 1 August 2016. "Django 1.11 released" Django weblog. Retrieved 4 April 2017. "Django 2.0 released" Django weblog. Retrieved 3 December 2017. "Django 2.1 released" Django weblog. Retrieved 2 August 2018. Django 2.2 release notes. Retrieved 1 July 2019. Django 3.0 release notes. Retrieved 2 December 2019. Django 3.1 release notes. Retrieved 5 August 2020. "Django 3.2 release notes". 6 April 2021. Retrieved 7 June 2021. "Django 4.0 release notes". 7 December 2021. Retrieved 4 August 2022. "Django 4.1 release notes". 3 August 2022. Retrieved 4 August 2022. "Django 4.2 release notes". Retrieved 4 August 2022. DjangoCon EU series Archived 4 March 2016 at the Wayback Machine, Lanyrd.com DjangoCon US series Archived 2 April 2016 at the Wayback Machine, Lanyrd.com "DjangoCon". DjangoCon. Archived from the original on 5 August 2012. Retrieved 29 July 2012. "DjangoCon". DjangoCon. Retrieved 1 December 2016. "DjangoCon". DjangoCon. "DjangoCon". DjangoCon. DjangoCon AU. Djangocon.com.au. Retrieved on 2019-12-16. "Lawrence-born Django, which revolutionized website construction, celebrating its 10th anniversary". Lawrence Journal-World. 9 July 2015. Retrieved 18 October 2019. "Django Girls - start your journey with programming". Retrieved 21 October 2019. "Django groups". Meetup. Shopify. "– Liquid template language". Liquid template language. "Template::Swig - Perl interface to Django-inspired Swig templating engine. - metacpan.org". metacpan.org. Symfony. "Home - Twig - The flexible, fast, and secure PHP template engine". twig.sensiolabs.org. Archived from the original on 9 July 2017. Retrieved 10 December 2014. "twigjs/twig.js". GitHub. "Welcome - Jinja2 (The Python Template Engine)". jinja.pocoo.org. "erlydtl/erlydtl". GitHub. "django CMS - Enterprise Content Management with Django - django CMS". www.django-cms.org. Retrieved 11 November 2020. Jaiswal, Sanjeev; Kumar, Ratan (22 June 2015), Learning Django Web Development (1st ed.), Packt, p. 405, ISBN 978-1783984404 Ravindrun, Arun (31 March 2015), Django Design Patterns and Best Practices (1st ed.), Packt, p. 180, ISBN 978-1783986644 Osborn, Tracy (May 2015), Hello Web App (1st ed.), Tracy Osborn, p. 142, ISBN 978-0986365911 Bendoraitis, Aidas (October 2014), Web Development with Django Cookbook (1st ed.), Packt, p. 294, ISBN 978-1783286898 Baumgartner, Peter; Malet, Yann (2015), High Performance Django (1st ed.), Lincoln Loop, p. 184, ISBN 978-1508748120 Elman, Julia; Lavin, Mark (2014), Lightweight Django (1st ed.), O'Reilly Media, p. 246, ISBN 978-1491945940 Percival, Harry (2014), Test-Driven Development with Python (1st ed.), O'Reilly Media, p. 480, ISBN 978-1449364823, archived from the original on 16 July 2017, retrieved 26 October 2014 Wikimedia Commons has media related to Django (web framework). Official website
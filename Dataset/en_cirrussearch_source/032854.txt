In computing, a nibble (occasionally nybble, nyble, or nybl to match the spelling of byte) is a four-bit aggregation, or half an octet. It is also known as half-byte or tetrade. In a networking or telecommunication context, the nibble is often called a semi-octet, quadbit, or quartet. A nibble has sixteen (24) possible values. A nibble can be represented by a single hexadecimal digit (0–F) and called a hex digit. A full byte (octet) is represented by two hexadecimal digits (00–FF); therefore, it is common to display a byte of information as two nibbles. Sometimes the set of all 256-byte values is represented as a 16×16 table, which gives easily readable hexadecimal codes for each value. Four-bit computer architectures use groups of four bits as their fundamental unit. Such architectures were used in early microprocessors, pocket calculators and pocket computers. They continue to be used in some microcontrollers. In this context, 4-bit groups were sometimes also called characters rather than nibbles. The term nibble originates from its representing "half a byte", with byte a homophone of the English word bite. In 2014, David B. Benson, a professor emeritus at Washington State University, remembered that he playfully used (and may have possibly coined) the term nibble as "half a byte" and unit of storage required to hold a binary-coded decimal (BCD) digit around 1958, when talking to a programmer of Los Alamos Scientific Laboratory. The alternative spelling nybble reflects the spelling of byte, as noted in editorials of Kilobaud and Byte in the early 1980s. Another early recorded use of the term nybble was in 1977 within the consumer-banking technology group at Citibank. It created a pre-ISO 8583 standard for transactional messages between cash machines and Citibank's data centers that used the basic informational unit 'NABBLE'. The nibble is used to describe the amount of memory used to store a digit of a number stored in packed decimal format (BCD) within an IBM mainframe. This technique is used to make computations faster and debugging easier. An 8-bit byte is split in half and each nibble is used to store one decimal digit. The last (rightmost) nibble of the variable is reserved for the sign. Thus a variable which can store up to nine digits would be "packed" into 5 bytes. Ease of debugging resulted from the numbers being readable in a hex dump where two hex numbers are used to represent the value of a byte, as 16×16 = 28. For example, a five-byte BCD value of 31 41 59 26 5C represents a decimal value of +314159265. Historically, there are cases where nybble was used for a group of bits greater than 4. In the Apple II microcomputer line, much of the disk drive control and group-coded recording was implemented in software. Writing data to a disk was done by converting 256-byte pages into sets of 5-bit (later, 6-bit) nibbles and loading disk data required the reverse. Moreover, 1982 documentation for the Integrated Woz Machine refers consistently to an "8 bit nibble". The term byte once had the same ambiguity and meant a set of bits but not necessarily 8, hence the distinction of bytes and octets or of nibbles and quartets (or quadbits). Today, the terms byte and nibble almost always refer to 8-bit and 4-bit collections respectively and are very rarely used to express any other sizes. A nibble can be represented in binary and hexadecimal as follows: The terms low nibble and high nibble are used to denote the nibbles containing, respectively, the less significant bits and the more significant bits within a byte. In graphical representations of bits within a byte, the leftmost bit could represent the most significant bit (MSB), corresponding to ordinary decimal notation in which the digit at the left of a number is the most significant. In such illustrations the four bits on the left end of the byte form the high nibble, and the remaining four bits form the low nibble. For example, ninety-seven = 9710 = (0110 0001)2 = 61hex the high nibble is 01102 (6hex), and the low nibble is 00012 (1hex). The total value is high-nibble × 1610 + low-nibble (6 × 16 + 1 = 9710). A nibble can be extracted from a byte by doing a bitwise logical AND operation and optionally a bit shift depending on if the high or low nibble is to be extracted. In C: #define HI_NIBBLE(b) (((b) >> 4) & 0x0F) #define LO_NIBBLE(b) ((b) & 0x0F) where b must be a variable or constant of an integral data type, and only the least-significant byte of b is used. For example, HI_NIBBLE(0xAB)==0xA and LO_NIBBLE(0xAB)==0xB. In Common Lisp: (defun hi-nibble (b) (ldb (byte 4 4) b)) (defun lo-nibble (b) (ldb (byte 4 0) b)) Binary numeral system Syllable (computing) Word Raphael, Howard A., ed. (November 1974). "The Functions Of A Computer: Instruction Register And Decoder" (PDF). MCS-40 User's Manual For Logic Designers. Santa Clara, California, USA: Intel Corporation. p. viii. Archived (PDF) from the original on 2020-03-03. Retrieved 2020-03-03. [...] The characteristic eight bit field is sometimes referred to as a byte, a four bit field can be referred to as a nibble. [...] Hall, Douglas V. (1980). Microprocessors and Digital Systems. McGraw-Hill. ISBN 0-07-025571-7. Warren Jr., Henry S. (2013) [2002]. Hacker's Delight (2 ed.). Addison Wesley - Pearson Education, Inc. ISBN 978-0-321-84268-8. 0-321-84268-5. Raymond, Eric S. (1996). The New Hacker's Dictionary. MIT Press. p. 333. ISBN 978-0-262-68092-9. Carr, John W. Introduction to the use of digital computers: Notes from the Summer Conference Held at the Computation Center of the University of North Carolina, Chapel Hill, N.C., August 17-28, 1959. Frontier Research on Digital Computers. Vol. 1. University of North Carolina at Chapel Hill, Computation Center. p. 211. Each of these letters corresponds to one of the integers from zero to fifteen, therefore requiring 4 bits (one "tetrade") in binary representation. Speiser, Ambrosius Paul (1965) [1961]. Digitale Rechenanlagen - Grundlagen / Schaltungstechnik / Arbeitsweise / Betriebssicherheit [Digital computers - Basics / Circuits / Operation / Reliability] (in German) (2 ed.). ETH Zürich, Zürich, Switzerland: Springer-Verlag / IBM. pp. 6, 34, 165, 183, 208, 213, 215. LCCN 65-14624. 0978. Puzman, Josef; Kubin, Boris (2012). Public Data Networks: From Separate PDNs to the ISDN. Springer Science+Business Media. p. 113. ISBN 978-1-4471-1737-7. Horak, Ray (2007). Webster's New World Telecom Dictionary. John Wiley & Sons. p. 402. ISBN 978-0-470-22571-4. Brewster, Ronald L. (1994). Data Communications and Networks, Vol. III. IEE telecommunications series. Vol. 31. Institution of Electrical Engineers. p. 155. ISBN 978-0-85296-804-8. A data symbol represents one quartet (4 bits) of binary data. Courbis, Paul; Lalande, Sébastien (2006-06-27) [1989]. Voyage au centre de la HP28c/s (in French) (2 ed.). Paris, France: Editions de la Règle à Calcul. OCLC 636072913. Archived from the original on 2016-08-06. Retrieved 2015-09-06. [1] [2] [3] [4] [5] [6] Heller, Steve (1997). Introduction to C++. Morgan Kaufmann. p. 27. ISBN 978-0-12-339099-8. Each hex digit (0–f) represents exactly 4 bits. "Terms And Abbreviations" (PDF). MCS-4 Assembly Language Programming Manual - The INTELLEC 4 Microcomputer System Programming Manual (Preliminary ed.). Santa Clara, California, USA: Intel Corporation. December 1973. pp. v, 2-6. MCS-030-1273-1. Archived (PDF) from the original on 2020-03-01. Retrieved 2020-03-02. [...] Bit - The smallest unit of information which can be represented. (A bit may be in one of two states I 0 or 1). [...] Byte - A group of 8 contiguous bits occupying a single memory location. [...] Character - A group of 4 contiguous bits of data. [...] (NB. This Intel 4004 manual uses the term character referring to 4-bit rather than 8-bit data entities. Intel switched to use the more common term nibble for 4-bit entities in their documentation for the succeeding processor 4040 in 1974 already.) Worth, Don D.; Lechner, Pieter M. (May 1982) [1981]. Beneath Apple DOS (4th printing, 1st ed.). Reseda, California, USA: Quality Software. Retrieved 2017-03-21. [7][8][9] Archived 9 March 2016 at the Wayback Machine Worth, Don D.; Lechner, Pieter M. (March 1985) [1984]. Beneath Apple ProDOS - For Users of Apple II Plus, Apple IIe and Apple IIc Computers (PDF) (2nd printing, 1st ed.). Chatsworth, California, USA: Quality Software. ISBN 0-912985-05-4. LCCN 84-61383. Archived (PDF) from the original on 2017-03-21. Retrieved 2017-03-21. [10] Copy II Plus Version 9 - ProDOS/DOS Utilities - Data Recovery, File Management, Protected Software Backup (PDF). 9.0. Central Point Software, Inc. 1989-10-31 [1982]. Archived from the original (PDF) on 2017-05-07. Retrieved 2017-03-21. Apple Computer, Inc. (February 1982) [1978]. Integrated Woz Machine (IWM) Specification (PDF) (19 ed.). DigiBarn Computer Museum. Archived (PDF) from the original on 2016-08-06. Retrieved 2016-08-06. Baccala, Brent (April 1997). "Binary arithmetic". Connected: An Internet Encyclopedia (3rd ed.). Archived from the original on 2016-08-06. Retrieved 2015-07-20. "Apple Assembly Line". May 1981.
SQLite (/ˌɛsˌkjuːˌɛlˈaɪt/, /ˈsiːkwəˌlaɪt/) is a database engine written in the C programming language. It is not a standalone app; rather, it is a library that software developers embed in their apps. As such, it belongs to the family of embedded databases. It is the most widely deployed database engine, as it is used by several of the top web browsers, operating systems, mobile phones, and other embedded systems. Many programming languages have bindings to the SQLite library. It generally follows PostgreSQL syntax, but does not enforce type checking by default. This means that one can, for example, insert a string into a column defined as an integer. D. Richard Hipp designed SQLite in the spring of 2000 while working for General Dynamics on contract with the United States Navy. Hipp was designing software used for a damage-control system aboard guided-missile destroyers; the damage-control system originally used HP-UX with an IBM Informix database back-end. SQLite began as a Tcl extension. In August 2000, version 1.0 of SQLite was released, with storage based on gdbm (GNU Database Manager). In September 2001, SQLite 2.0 replaced gdbm with a custom B-tree implementation, adding transaction capability. In June 2004, SQLite 3.0 added internationalization, manifest typing, and other major improvements, partially funded by America Online. In 2011, Hipp announced his plans to add a NoSQL interface to SQLite, as well as announcing UnQL, a functional superset of SQL designed for document-oriented databases. In 2018, SQLite adopted a Code of Conduct based on the Rule of Saint Benedict which caused some controversy and was later renamed as a Code of Ethics. SQLite is one of four formats recommended for long-term storage of datasets approved for use by the Library of Congress. SQLite was designed to allow the program to be operated without installing a database management system or requiring a database administrator. Unlike client–server database management systems, the SQLite engine has no standalone processes with which the application program communicates. Instead, a linker integrates the SQLite library — statically or dynamically — into an application program which uses SQLite's functionality through simple function calls, reducing latency in database operations; for simple queries with little concurrency, SQLite performance profits from avoiding the overhead of inter-process communication. Due to the serverless design, SQLite applications require less configuration than client–server databases. SQLite is called zero-conf because it does not require service management (such as startup scripts) or access control based on GRANT and passwords. Access control is handled by means of file-system permissions given to the database file itself. Databases in client–server systems use file-system permissions that give access to the database files only to the daemon process, which handles its locks internally, allowing concurrent writes from several processes. SQLite stores the whole database (definitions, tables, indices, and the data itself) as a single cross-platform file on a host machine, allowing several processes or threads to access the same database concurrently. It implements this simple design by locking the database file during writing. Write access may fail with an error code, or it can be retried until a configurable timeout expires. SQLite read operations can be multitasked, though due to the serverless design, writes can only be performed sequentially. This concurrent access restriction does not apply to temporary tables, and it is relaxed in version 3.7 as write-ahead logging (WAL) enables concurrent reads and writes. Since SQLite has to rely on file-system locks, it is not the preferred choice for write-intensive deployments. SQLite uses PostgreSQL as a reference platform. "What would PostgreSQL do" is used to make sense of the SQL standard. One major deviation is that, with the exception of primary keys, SQLite does not enforce type checking; the type of a value is dynamic and not strictly constrained by the schema (although the schema will trigger a conversion when storing, if such a conversion is potentially reversible). SQLite strives to follow Postel's rule. SQLite implements most of the SQL-92 standard for SQL, but lacks some features. For example, it only partially provides triggers and cannot write to views (however, it provides INSTEAD OF triggers that provide this functionality). Its support of ALTER TABLE statements is limited. SQLite uses an unusual type system for an SQL-compatible DBMS: instead of assigning a type to a column as in most SQL database systems, types are assigned to individual values; in language terms it is dynamically typed. Moreover, it is weakly typed in some of the same ways that Perl is: one can insert a string into an integer column (although SQLite will try to convert the string to an integer first, if the column's preferred type is integer). This adds flexibility to columns, especially when bound to a dynamically typed scripting language. However, the technique is not portable to other SQL products. A common criticism is that SQLite's type system lacks the data integrity mechanism provided by statically typed columns, although it can be emulated with constraints like CHECK(typeof(x)='integer'). Strict tables were added in version 3.37.1. Tables normally include a hidden rowid index column, which gives faster access. If a database includes an Integer Primary Key column, SQLite will typically optimize it by treating it as an alias for rowid, causing the contents to be stored as a strictly typed 64-bit signed integer and changing its behavior to be somewhat like an auto-incrementing column. Future[when?] versions of SQLite may include a command to introspect whether a column has behavior like that of rowid to differentiate these columns from weakly typed, non-autoincrementing Integer Primary Keys.[failed verification] Version 3.6.19 released on October 14, 2009 added support for foreign key constraints. Stored procedures are not supported; this is an explicit choice by the developers to favor simplicity, as the typical use case of SQLite is to be embedded inside a host application that can define its own procedures around the database. Full support for Unicode case-conversions can be enabled through an optional extension. SQLite version 3.7.4 first saw the addition of the FTS4 (full-text search) module, which features enhancements over the older FTS3 module. FTS4 allows users to perform full-text searches on documents similar to how search engines search webpages. Version 3.8.2 added support for creating tables without rowid, which may provide space and performance improvements. Common table expressions support was added to SQLite in version 3.8.3. 3.8.11 added a newer search module called FTS5, the more radical (compared to FTS4) changes requiring a bump in version. In 2015, with the json1 extension and new subtype interfaces, SQLite version 3.9 introduced JSON content managing. As of version 3.33.0, the maximum supported database size is 281 TB. SQLite's code is hosted with Fossil, a distributed version control system that uses SQLite as a local cache for its non-relational database format, and SQLite's SQL as an implementation language. SQLite is public domain, but not "open-contribution", with the website stating "the project does not accept patches from people who have not submitted an affidavit dedicating their contribution into the public domain." Instead of a code of conduct, the founders have adopted a code of ethics based on the Rule of St. Benedict. A standalone command-line shell program called sqlite3 is provided in SQLite's distribution. It can be used to create a database, define tables, insert and change rows, run queries and manage an SQLite database file. It also serves as an example for writing applications that use the SQLite library. SQLite uses automated regression testing prior to each release. Over 2 million tests are run as part of a release's verification. Starting with the August 10, 2009 release of SQLite 3.6.17, SQLite releases have 100% branch test coverage, one of the components of code coverage. The tests and test harnesses are partially public-domain and partially proprietary. SQLite is included by default in: Android BlackBerry 10 OS Fedora Linux where it is used by the rpm core package management system FreeBSD where starting with 10-RELEASE version in January 2014, it is used by the core package management system. illumos iOS Mac OS X 10.4 onwards (Apple adopted it as an option in macOS's Core Data API from the original implementation) Maemo MeeGo MorphOS 3.10 onwards NetBSD NixOS where it is used by the Nix core package management system Red Hat Enterprise Linux where it is used in the same way as Fedora, from which Red Hat Enterprise Linux is derived Solaris 10 where the Service Management Facility database is serialized for booting. Symbian OS Tizen webOS Windows 10 onwards ADO.NET adapter, initially developed by Robert Simpson, is maintained jointly with the SQLite developers since April 2010. ODBC driver has been developed and is maintained separately by Christian Werner. Werner's ODBC driver is the recommended connection method for accessing SQLite from OpenOffice.org. COM (ActiveX) wrapper making SQLite accessible on Windows to scripted languages such as JScript and VBScript. This adds SQLite database capabilities to HTML Applications (HTA). The browsers Google Chrome, Opera, Safari and the Android Browser all allow for storing information in, and retrieving it from, an SQLite database within the browser, using the official SQLite Wasm (WebAssembly) build, or using the Web SQL Database technology, although the latter is becoming deprecated (namely superseded by SQLite Wasm or by IndexedDB). Internally, these Chromium based browsers use SQLite databases for storing configuration data like site visit history, cookies, download history etc. Mozilla Firefox and Mozilla Thunderbird store a variety of configuration data (bookmarks, cookies, contacts etc.) in internally managed SQLite databases. Until Firefox version 57 ("Firefox Quantum"), there was a third-party add-on that used the API supporting this functionality to provide a user interface for managing arbitrary SQLite databases. Several third-party add-ons can make use of JavaScript APIs to manage SQLite databases. Symfony Laravel Bugzilla Django's default database management system Drupal Trac Ruby on Rails's default database management system web2py Jam.py Adobe Systems uses SQLite as its file format in Adobe Photoshop Lightroom, a standard database in Adobe AIR, and internally within Adobe Reader. As with much Apple software, Photos uses SQLite internally. Audacity uses SQLite as its file format, as of version 3.0.0. Evernote uses SQLite to store its local database repository in Windows. Skype The Service Management Facility, used for service management within the Solaris and OpenSolaris operating systems Flame (malware) BMW IDrive Sat Nav system TomTom GPS systems, for the NDS map data Proxmox VE - Proxmox Cluster File System (pmxcfs) Free and open-source software portal Comparison of relational database management systems List of relational database management systems MySQL SpatiaLite "SQLite Release 3.45.2 On 2024-03-12". 12 March 2024. Retrieved 13 March 2024. "SQLite Copyright". sqlite.org. Retrieved May 17, 2010. "SQLite database file format media type at IANA". Internet Assigned Numbers Authority. IANA. Retrieved 2019-03-08. "Why SQLite succeeded as a database — Richard Hipp, creator of SQLite". The Changelog. Episode 201. Event occurs at 00:17:25. How do I pronounce the name of the product? I say S-Q-L-ite, like a mineral. D. Richard Hipp (presenter) (May 31, 2006). An Introduction to SQLite (video). Google Inc. Event occurs at 00:01:14. Retrieved March 23, 2010. [...] ess-kju-ellite [...] D. Richard Hipp (presenter) (May 31, 2006). An Introduction to SQLite. Google Inc. Event occurs at 00:48:15. Retrieved March 23, 2010. [...] sequelite [...] "Most Widely Deployed SQL Database Estimates". SQLite.org. Retrieved May 11, 2011. Owens, Michael (2006). "Chapter 4: SQL". In Gilmore, Jason; Thomas, Keir (eds.). The Definitive Guide to SQLite. D. Richard Hipp (foreword), Preston Hagar (technical reviewer). Apress. p. 133. ISBN 978-1-59059-673-9. Retrieved 30 December 2014. "STRICT Tables". Owens, Michael (2006). The Definitive Guide to SQLite. Apress. doi:10.1007/978-1-4302-0172-4_1. ISBN 978-1-59059-673-9. "Well-Known Users Of SQLite". SQLite. Retrieved August 5, 2015. "Interview: Richard Hipp on UnQL, a New Query Language for Document Databases". InfoQ. August 4, 2011. Retrieved October 5, 2011. McCarthy, Kieren. "SQLite creator crucified after code of conduct warns devs to love God, and not kill, commit adultery, steal, curse..." www.theregister.com. Retrieved 2022-11-17. "LoC Recommended Storage Format". www.sqlite.org. Retrieved 2020-04-09. "SQLite, Version 3". www.loc.gov. 2017-03-28. Retrieved 2020-04-09. "Recommended Formats Statement – datasets/databases". Library of Congress. Retrieved 2020-04-09. "SQLite Is A Zero-Configuration Database". SQLite.org. Retrieved August 3, 2015. "Write Ahead Logging in SQLite 3.7". SQLite.org. Retrieved September 3, 2011. WAL provides more concurrency as readers do not block writers and a writer does not block readers. Reading and writing can proceed concurrently. "Appropriate Uses For SQLite". SQLite.org. Retrieved 2015-09-03. "PGCon 2014: Clustering and VODKA". Lwn.net. Retrieved 2017-01-06. "PGCon2014: SQLite: Protégé of PostgreSQL". Pgcon.org. 20 September 2015. Retrieved 2017-01-06. "SQLite: StrictMode". Sqlite.org. Retrieved September 3, 2015. "Release History of SQLite". "SQL As Understood By SQLite". SQLite. Retrieved 21 May 2018. Searching for a record with a specific rowid, or for all records with rowids within a specified range is around twice as fast as a similar search made by specifying any other PRIMARY KEY or indexed value. "SQLite: Check-in [2494132a]". www.sqlite.org. 2017-11-28. Add the "PRAGMA table_ipk(TABLE)" command for evaluation purposes. Karwin, Bill (May 2010). Carter, Jacquelyn (ed.). SQL Antipatterns: Avoiding the Pitfalls of Database Programming. The Pragmatic Bookshelf. p. 70. ISBN 978-1-934356-55-5. Sometimes you're forced to use a database brand that doesn't support foreign key constraints (for example MySQL's MyISAM storage engine or SQLite prior to version 3.6.19). "SQLite Release 3.6.19 On 2009-10-14". sqlite.org. Source: developers' comments on SQLite forum "Case-insensitive matching of Unicode characters does not work". SQLite Frequently Asked Questions. Retrieved 2015-09-03. "SQLite Release 3.7.4 On 2010-12-08". SQLite.org. December 8, 2010. Retrieved September 3, 2015. "SQLite FTS3 and FTS4 Extensions". SQLite.org. Retrieved September 3, 2015. "SQLite Release 3.8.2 On 2013-12-06". SQLite.org. December 6, 2013. Retrieved September 3, 2015. "The WITHOUT ROWID Optimization". SQLite.org. Retrieved September 3, 2015. "SQLite Release 3.8.3 On 2014-02-03". SQLite.org. February 3, 2014. Retrieved September 3, 2015. "The JSON1 Extension". SQLite.org. "Limits In SQLite". SQLite.org. "Thoughts On The Design Of The Fossil DVCS". Fossil-scm.org. July 12, 2017. Retrieved October 14, 2022. "Fossil: Fossil Performance". Fossil-scm.org. August 23, 2009. Retrieved September 12, 2009. "SQLite Copyright". sqlite.org. Retrieved 2024-03-06. "Code Of Ethics". sqlite.org. Retrieved 2024-03-06. "Command Line Shell For SQLite". Sqlite.org. Retrieved October 14, 2022. "How SQLite Is Tested". SQLite.org. Retrieved September 12, 2009. "To use the version of SQLite that is installed with Windows". 20 October 2022. "Home". System.Data.SQLite. 2016-12-30. Retrieved 2017-01-06. "SQLite ODBC Driver". Ch-werner.de. 2016-12-01. Retrieved 2017-01-06. "Using SQLite Database with OpenOffice.org : Version 2.0" (PDF). Documentation.openoffice.org. Retrieved 2017-01-06. "sqlite — Sqlite Wrappers". SQLite.org. February 7, 2009. Retrieved February 7, 2009. "sqlite3 WebAssembly & JavaScript Documentation Index". SQLite. Retrieved 2023-05-08. "Location of Google Chrome history". www.foxtonforensics.com. 2020-10-06. Retrieved 2020-10-06. "SQLite Manager :: Add-ons for Firefox". Addons.mozilla.org. 2015-02-28. Archived from the original on 2017-01-02. Retrieved 2017-01-06. "SQLite Manager – Get this Extension for 🦊 Firefox (en-US)". Addons.mozilla.org. 2018-07-24. Retrieved 2018-10-05. "SQLite Reader – Get this Extension for 🦊 Firefox (en-US)". Addons.mozilla.org. 2018-09-01. Retrieved 2018-10-05. "Using SQL to find my best photo of a pelican according to Apple Photo". Simon Willison’s Weblog. Retrieved May 23, 2020. "Audacity 3.0.0 Released". 17 March 2021. Retrieved March 17, 2021. Hinegardner, Jeremy (August 28, 2007). "Skype client using SQLite?". sqlite-users (Mailing list). Archived from the original on 2007-11-17. Retrieved June 14, 2010. Allen, Grant; Owens, Mike (November 5, 2010). The Definitive Guide to SQLite (2nd ed.). Apress. p. 368. ISBN 978-1-4302-3225-4. Archived from the original on December 30, 2010. Retrieved December 23, 2010. Kreibich, Jay A. (August 17, 2010). Using SQLite (1st ed.). O'Reilly Media. p. 528. ISBN 978-0-596-52118-9. Newman, Chris (November 9, 2004). SQLite (Developer's Library) (1st ed.). Sams. p. 336. ISBN 0-672-32685-X. Wikimedia Commons has media related to SQLite. Official website "The Untold Story of SQLite". CoRecursive. SQLite at Curlie
Vim (/vɪm/ ; vi improved) is a free and open-source, screen-based text editor program. It is an improved clone of Bill Joy's vi. Vim's author, Bram Moolenaar, derived Vim from a port of the Stevie editor for Amiga and released a version to the public in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface. Since its release for the Amiga, cross-platform development has made it available on many other systems. In 2018, it was voted the most popular editor amongst Linux Journal readers; in 2015 the Stack Overflow developer survey found it to be the third most popular text editor, and in 2019 the fifth most popular development environment. Vim's forerunner, Stevie (ST Editor for VI Enthusiasts), was created by Tim Thompson for the Atari ST in 1987 and further developed by Tony Andrews and G.R. (Fred) Walter. It was one of the first popularized clones of Vi, and did not use Vi's source code. The source code for Vi used the Ed text editor developed under AT&T, and therefore Vi could only be used by those with an AT&T source license.[citation needed] Basing Vim on the source code for Stevie meant the program could be distributed without requiring the AT&T source license. Basing his work on Stevie, Bram Moolenaar began working on Vim for the Amiga computer in 1988, with the first public release (Vim v1.14) in 1991.[better source needed] At the time of its first release, the name "Vim" was an acronym for "Vi IMitation", but this changed to "'Vi IMproved" late in 1993. Vim is released under the Vim license, which includes some charityware clauses that encourage users who enjoy the software to consider donating to children in Uganda. The Vim license is compatible with the GNU General Public License through a special clause allowing distribution of modified copies under the GNU GPL version 2.0 or later. Like vi, Vim's interface is not based on menus or icons but on commands given in a text user interface; its GUI mode, gVim, adds menus and toolbars for commonly used commands but the full functionality is still expressed through its command line mode. Vi (and by extension Vim) tends to allow a typist to keep their fingers on the home row, which can be an advantage for a touch typist. Vim has a built-in tutorial for beginners called vimtutor, which is usually installed along with Vim, but is a separate executable and can be run with a shell command. The Vim Users' Manual details Vim's features and can be read from within Vim, or found online. Vim also has a built-in help facility (using the :help command) which allows users to query and navigate through commands and features. Vim features various special memory entries called registers (not to be confused with hardware or processor registers). When cutting, deleting, copying, or pasting text the user can choose to store the manipulated text in a register. There are 36 general-purpose registers associated with letters and numbers ([a-z0-9]) and a range of special ones that either contain special values (current filename, last command, etc.) or serve a special purpose.: 85  Like vi, vim supports multiple editing modes. Depending on the mode, typed characters are interpreted either as sequences of commands or are inserted as text. In Vim there are 14 editing modes, 7 basic modes and 7 variants: Normal mode – used for editor commands. This is generally the default mode and by default hitting ESC returns the editor to this mode. Insert mode – used for typing text in a way similar to most modern editors. In this mode, opened text in buffers can be modified with the text entered from the keyboard.: 12  Visual mode – used to select areas of text. Commands can be run on the selected area – moving, editing, filtering via built-in or external command, etc. Visual linewise, a subtype of visual mode which selects one or more whole lines Visual blockwise, another subtype which selects a rectangular block of text across one or more lines Select mode – similar to visual, but the commands are not interpreted, instead, highlighted text is directly replaced by input from the keyboard; similar to the selection mode used in editors on Microsoft Windows platforms Command-line or Cmdline mode – provides a single line input at the bottom of the Vim window. Commands (beginning with :) and some other keys for specific actions (including pattern search and the filter command) activate this mode. On completion of the command, Vim returns to the previous mode.: 12  Ex mode mode – accepts a sequence of commands. Terminal-Job mode - Interacting with a job in a terminal window. Vim is highly customizable and extensible, making it an attractive tool for users who demand a large amount of control and flexibility over their text editing environment. Text input is facilitated by a variety of features designed to increase keyboard efficiency. Users can execute complex commands with "key bindings," which can be customized and extended. The "recording" feature allows for the creation of macros to automate sequences of keystrokes and call internal or user-defined functions and mappings. Abbreviations, similar to macros and key mappings, facilitate the expansion of short strings of text into longer ones and can also be used to correct mistakes. Vim also features an "easy" mode for users looking for a simpler text editing solution. There are many plugins available that extend or add new functionality to Vim. These plugins are usually written in Vim's internal scripting language, vimscript (also known as VimL), but can be written in other languages as well. There are projects bundling together complex scripts and customizations and aimed at turning Vim into a tool for a specific task or adding a major flavour to its behaviour. Examples include Cream, which makes Vim behave like a click-and-type editor, or VimOutliner, which provides a comfortable outliner for users of Unix-like systems. Vim has a vi compatibility mode, but when that mode is not used, Vim has many enhancements over vi. However even in compatibility mode, Vim is not entirely compatible with vi as defined in the Single Unix Specification and POSIX (e.g., Vim does not support vi's open mode, only visual mode). Vim's developers state that it is "very much compatible with Vi". Some of Vim's enhancements include completion functions, comparison and merging of files (known as vimdiff), a comprehensive integrated help system, extended regular expressions, scripting languages (both native and through alternative scripting interpreters such as Perl, Python, Ruby, Tcl, etc.) including support for plugins, a graphical user interface (gvim), limited integrated development environment-like features, mouse interaction (both with and without the GUI), folding, editing of compressed or archived files in gzip, bzip2, zip, and tar format and files over network protocols such as SSH, FTP, and HTTP, session state preservation, spell checking, split (horizontal and vertical) and tabbed windows, Unicode and other multi-language support, syntax highlighting, trans-session command, search and cursor position histories, multiple level and branching undo/redo history which can persist across editing sessions, and visual mode.[citation needed] While running, Vim saves the user's changes in a swap file with the ".swp" extension. This file can be used to recover after a crash. If a user tries to open a file and a swap file already exists, Vim will warn the user, and if the user proceeds, Vim will use a swap file with the extension ".swo" (or, if there is already more than one swap file, ".swn", ".swm", etc.). The feature can be disabled. Vim script (also called Vimscript or VimL) is the scripting language built into Vim. Based on the ex editor language of the original vi editor, early versions of Vim added commands for control flow and function definitions. Since version 7, Vim script also supports more advanced data types such as lists and dictionaries and a simple form of object-oriented programming. Built-in functions such as map() and filter() allow a basic form of functional programming, and Vim script has lambda since version 8.0. Vim script is mostly written in an imperative programming style. Vim macros can contain a sequence of normal-mode commands, but can also invoke ex commands or functions written in Vim script for more complex tasks. Almost all extensions (called plugins or more commonly scripts) of the core Vim functionality are written in Vim script, but plugins can also utilize other languages like Perl, Python, Lua, Ruby, Tcl, or Racket. These plugins can be installed manually, or through a plugin manager such as Vundle, Pathogen, or Vim-Plug. Vim script files are stored as plain text, similarly to other code, and the filename extension is usually .vim. One notable exception to that is Vim's config file, .vimrc. " This is the Hello World program in Vim script. echo "Hello, world!" " This is a simple while loop in Vim script. let i = 1 while i < 5 echo "count is" i let i += 1 endwhile unlet i While vi was originally available only on Unix operating systems, Vim has been ported to many operating systems including AmigaOS (the initial target platform), Atari MiNT, BeOS, DOS, Windows starting from Windows NT 3.1, OS/2, OS/390, MorphOS, OpenVMS, QNX, RISC OS, Linux, BSD, and Classic Mac OS. Also, Vim is shipped with Apple macOS. Independent ports of Vim are available for Android and iOS. Neovim is a fork of Vim that strives to improve the extensibility and maintainability of Vim. Some features of the fork include built-in Language Server Protocol (LSP) support, support for asynchronous I/O, and support for Lua scripting using luaJIT language interpreter. The project is free software and its source code is available on GitHub. Neovim has the same configuration syntax as Vim prior to vim9script; thus the same configuration file can be used with both editors, although there are minor differences in details of options. If the added features of Neovim are not used, Neovim is compatible with almost all of Vim's features. The Neovim project was started in 2014, after a patch to Vim supporting multi-threading was rejected. Neovim had a successful fundraising in March 2014, supporting at least one full-time developer. Several frontends are under development which make use of Neovim's capabilities. With the 0.5 release of Neovim on 2 July 2021, it gained built-in support for the LSP, Tree-sitter, and more complete Lua support – including the support for configuration scripts written in Lua instead of VimL. Neovim featuring configured statusbar and dark colorscheme. Tweaked v0.9.0-dev version. Free and open-source software portal Computer programming portal Learning the vi and Vim Editors, a tutorial book for vi and vim, published by O'Reilly Media Editor war – the rivalry between users of the Emacs and vi (Vim) text editors List of text editors Comparison of text editors Vimperator LuaJIT is directly listed as a third-party dependency for the program build. "Vim 9.1 is available". 2 January 2024. Retrieved 3 January 2024. "vim/LICENSE". github.com. 20 October 2021. Archived from the original on 16 August 2021. Retrieved 5 July 2021. "Vim License". spdx.org. Archived from the original on 29 July 2021. Retrieved 5 July 2021. "Vim: uganda.txt". vimhelp.org. Archived from the original on 13 January 2019. Retrieved 13 January 2019. Vim documentation: intro Archived 13 January 2019 at the Wayback Machine: "Vim is pronounced as one word, like Jim, not vi-ai-em. It's written with a capital, since it's a name, again like Jim." The original interview: Moolenaar, Bram (18 April 2005). "Rozhovor: Bram Moolenaar" [Interview: Bram Moolenaar]. LinuxEXPRES (Interview) (in Czech). Interviewed by Zapletal, Lukáš. question 2. Archived from the original on 28 December 2023. Retrieved 3 January 2024. Translation: Bram Moolenaar (n.d.). "Interview with Bram Moolenaar, as published in the Czech magazine LinuxEXPRES, English version". Bram Moolenaar's website. Archived from the original on 7 January 2016. McDonnell, Mark (2014). Pro vim. [Berkeley]. ISBN 978-1-4842-0250-0. OCLC 897466496.{{cite book}}: CS1 maint: location missing publisher (link) "Best Editor | Linux Journal". www.linuxjournal.com. Retrieved 20 April 2023. "Stack Overflow Developer Survey 2015 § IV. Text Editor". Stack Overflow. Archived from the original on 4 May 2019. Retrieved 25 July 2016. "Stack Overflow Developer Survey 2019 Results". Stack Overflow § VII. Development Environments. Archived from the original on 7 March 2020. Retrieved 20 July 2019. Thompson, Tim (26 March 2000). "Stevie". Archived from the original on 4 January 2016. Retrieved 27 December 2010. Tim Thompson (28 June 1987). "A mini-vi for the ST". Newsgroup: comp.sys.atari.st. Usenet: 129@glimmer.UUCP. Archived from the original on 9 November 2012. Retrieved 27 December 2010. Tony Andrews (6 June 1988). "v15i037: Stevie, an "aspiring" VI clone for Unix, OS/2, Amiga". Newsgroup: comp.sources.unix. Usenet: 893@fig.bbn.com. Archived from the original on 9 November 2012. Retrieved 27 December 2010. Vim (20 January 2015). "intro.txt". Vim Help. Vim. Archived from the original on 9 July 2016. Retrieved 9 July 2016. "vim(1)". die.net. Vim. 11 April 2006. Archived from the original on 9 July 2016. Retrieved 9 July 2016. Vim is based on Stevie, worked on by: Tim Thompson, Tony Andrews and G.R. (Fred) Walter. Although hardly any of the original code remains. Moolenaar, Bram (10 October 2000). "The continuing story of Vim" (PDF). Archived (PDF) from the original on 18 April 2012. Retrieved 19 September 2011. "The history of Vim – Jovica Ilic". 5 June 2014. Archived from the original on 25 January 2020. Retrieved 25 January 2020. "VILE (Vi Like Emacs) – Frequently Asked Questions (FAQ)". Archived from the original on 31 August 2019. Retrieved 7 September 2019. Moolenaar, Bram (15 January 2002). "Vim, an open-source text editor". Archived from the original on 7 August 2011. Retrieved 24 October 2005. "Textfiles.com". Archived from the original on 16 July 2011. Retrieved 2 October 2009. "Filewatcher". Archived from the original on July 11, 2011. Retrieved February 26, 2011. "Official Vim Manual, Version 4 summary". 12 March 2004. Archived from the original on 18 August 2008. Retrieved 6 August 2008. "Official Vim Manual, Version 5 summary". 17 January 2004. Archived from the original on 21 August 2008. Retrieved 6 August 2008. "Official Vim Manual, Version 6 summary". 12 March 2004. Archived from the original on 11 June 2008. Retrieved 6 August 2008. "Vim Reference Manual, Version 7". 17 July 2016. Archived from the original on 13 January 2019. Retrieved 13 January 2019. "Google Groups". groups.google.com. Archived from the original on 6 November 2012. Retrieved 11 August 2008. Google Discussiegroepen Archived 22 January 2011 at the Portuguese Web Archive. Groups.google.com. Retrieved on 2013-12-09. Bram Moolenaar. "Vim 8.0 released!". Archived from the original on 22 January 2011. Retrieved 12 September 2016. Bram Moolenaar. "Vim 8.1 is released!". Archived from the original on 17 May 2018. Retrieved 18 May 2018. Bram Moolenaar. "Vim 8.2 is released!". Archived from the original on 12 December 2019. Retrieved 13 December 2019. Bram Moolenaar. "Vim 9.0 is released!". Archived from the original on 2 July 2022. Retrieved 30 June 2022. Christian Brabandt. "Vim 9.1 is released!". Archived from the original on 2 January 2024. Retrieved 4 January 2024. Lamb, Linda; Robbins, Arnold (1998). Learning the Vi Editor. O'Reilly Media, Inc. p. 305. ISBN 9781565924260. Moolenaar, Bram (3 November 2010). "Vim documentation: usr_01". Archived from the original on 29 July 2020. Retrieved 28 August 2019. Vim help files Archived 13 January 2019 at the Wayback Machine at vimhelp.org Oualline, Steve (April 2001). Vi IMproved (VIM) (PDF). New Riders Publishers. ISBN 0-7357-1001-5. Archived (PDF) from the original on 19 November 2021. Retrieved 11 October 2021. Moolenaar, Bram. "Vim: intro.txt". vimhelp.org. Retrieved 1 September 2023. "CS107 The Vim Editor". web.stanford.edu. Archived from the original on 27 January 2023. Retrieved 27 January 2023. Melendez, Steven (28 October 2014). "Why Vim, An '80s Text Editor, Is Still The UI Of Choice For Power Users". FastCompany. Archived from the original on 6 May 2019. Retrieved 5 May 2019. "Tips: Making Vim easy". Linux.com. 10 April 2007. Archived from the original on 6 May 2019. Retrieved 6 May 2019. "Vim documentation: usr_41". vimhelp.org. Archived from the original on 13 January 2019. Retrieved 13 January 2019. Vim help system (type ":help" within Vim) The Open Group (2008), "vi — screen-oriented (visual) display editor", Single Unix Specification, Version 4 (IEEE Std 1003.1–2008), archived from the original on 22 January 2011, retrieved 27 December 2010 Peppe; Benji; Campbell, Charles (2 January 2004). "Vim FAQ". Archived from the original on 13 January 2019. Retrieved 27 December 2010. (question 1.3) "Vim documentation: recover". vimdoc.sourceforge.net. Archived from the original on 13 December 2020. Retrieved 17 December 2020. "How to handle swapfiles in Vim". cs.longwood.edu. Archived from the original on 7 May 2021. Retrieved 17 December 2020. "'swapfile' option". vimhelp.org. 10 October 2020. Archived from the original on 14 December 2020. Retrieved 18 December 2020. Klein, Benjamin. "The VimL Primer: Edit Like a Pro with Vim Plugins and Scripts by Benjamin Klein | The Pragmatic Bookshelf". Archived from the original on 25 January 2020. Retrieved 25 January 2020. "Vim documentation: usr_41". vimhelp.org. Archived from the original on 13 January 2019. Retrieved 13 January 2019. Verdoolaege, Sven; Gerassimof, Matt. "Vim documentation: if_perl". Archived from the original on 8 February 2012. Retrieved 27 August 2019. Moore, Paul. "Vim documentation: if_pyth". Archived from the original on 22 August 2012. Retrieved 27 August 2019. Carvalho, Luis. "Vim documentation: if_lua". Archived from the original on 30 March 2012. Retrieved 27 August 2019. Maeda, Shugo. "Vim documentation: if_ruby". Archived from the original on 14 February 2012. Retrieved 27 August 2019. Wilken, Ingo. "Vim documentation: if_tcl". Archived from the original on 24 August 2012. Retrieved 27 August 2019. Khorev, Sergey. "Vim documentation: if_mzsch". Archived from the original on 14 April 2012. Retrieved 27 August 2019. ":help sys-file-list" "Vim Online: Downloads". Archived from the original on 8 January 2007. Retrieved 7 January 2007. "Mac OS X Manual Page For vim(1)". developer.apple.com. Apple Inc. Archived from the original on 9 June 2012. Retrieved 12 January 2010. "VimTouch, the development has stalled on this app". GitHub. Archived from the original on 29 December 2015. Retrieved 9 August 2015. "DroidVim, under active development". GitHub. Archived from the original on 27 June 2018. Retrieved 5 March 2017. "Vim – Applidium, mobile agency in Paris". Archived from the original on 20 January 2012. Retrieved 11 August 2015. "Nvim 0.9.5". 30 December 2023. Retrieved 3 January 2024. "Neovim: vim, out of the box". Archived from the original on 16 May 2022. Retrieved 18 February 2016. "Neovim Vision". Archived from the original on 26 April 2022. Retrieved 18 February 2016. "Nvim documentation: vim_diff". Archived from the original on 25 August 2019. Retrieved 2 October 2019. "GitHub – neovim/neovim: Vim-fork focused on extensibility and usability". GitHub. 29 August 2019. Archived from the original on 10 February 2016. Retrieved 18 February 2016. "Switching to NeoVim". 31 March 2015. Archived from the original on 16 February 2016. Retrieved 18 February 2016. "How to start using Neovim instead of Vim". Archived from the original on 4 June 2017. Retrieved 18 February 2016. Eddie Kovsky (1 February 2017). "Vim's 25th anniversary and the release of Vim 8 [LWN.net]". lwn.net. Retrieved 13 June 2023. "Vimcasts.org blog post". Archived from the original on 17 August 2021. Retrieved 18 February 2016. "Neovim". Bountysource. 23 March 2014. Archived from the original on 5 January 2021. Retrieved 20 March 2021. "NyaoVim frontend". GitHub. 29 August 2019. Archived from the original on 30 April 2022. Retrieved 18 February 2016. "Mac OS X frontend". GitHub. 29 August 2019. Archived from the original on 17 April 2022. Retrieved 18 February 2016. "Neovim-Qt frontend". GitHub. 21 July 2020. Archived from the original on 16 September 2019. Retrieved 17 July 2019. Ayooluwa Isaiah (3 August 2021). "New features in Neovim 0.5 [LWN.net]". lwn.net. Retrieved 13 June 2023. The Wikibook Learning the vi Editor has a page on the topic of: Vim Wikimedia Commons has media related to Vim. Official website TechTalk by Bram Moolenaar held on 25th Anniversary of first vim release on YouTube
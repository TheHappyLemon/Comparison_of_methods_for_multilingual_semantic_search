jQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animations, and Ajax. It is free, open-source software using the permissive MIT License. As of August 2022[update], jQuery is used by 77% of the 10 million most popular websites. Web analysis indicates that it is the most widely deployed JavaScript library by a large margin, having at least three to four times more usage than any other JavaScript library. jQuery's syntax is designed to make it easier to navigate a document, select DOM elements, create animations, handle events, and develop Ajax applications. jQuery also provides capabilities for developers to create plug-ins on top of the JavaScript library. This enables developers to create abstractions for low-level interaction and animation, advanced effects and high-level, theme-able widgets. The modular approach to the jQuery library allows the creation of powerful dynamic web pages and Web applications. The set of jQuery core features—DOM element selections, traversal, and manipulation—enabled by its selector engine (named "Sizzle" from v1.3), created a new "programming style", fusing algorithms and DOM data structures. This style influenced the architecture of other JavaScript frameworks like YUI v3 and Dojo, later stimulating the creation of the standard Selectors API. Microsoft and Nokia bundle jQuery on their platforms. Microsoft includes it with Visual Studio for use within Microsoft's ASP.NET AJAX and ASP.NET MVC frameworks while Nokia has integrated it into the Web Run-Time widget development platform. jQuery, at its core, is a Document Object Model (DOM) manipulation library. The DOM is a tree-structure representation of all the elements of a Web page. jQuery simplifies the syntax for finding, selecting, and manipulating these DOM elements. For example, jQuery can be used for finding an element in the document with a certain property (e.g. all elements with the h1 tag), changing one or more of its attributes (e.g. color, visibility), or making it respond to an event (e.g. a mouse click). jQuery also provides a paradigm for event handling that goes beyond basic DOM element selection and manipulation. The event assignment and the event callback function definition are done in a single step in a single location in the code. jQuery also aims to incorporate other highly used JavaScript functionality (e.g. fade ins and fade outs when hiding elements, animations by manipulating CSS properties). The principles of developing with jQuery are: Separation of JavaScript and HTML: The jQuery library provides simple syntax for adding event handlers to the DOM using JavaScript, rather than adding HTML event attributes to call JavaScript functions. Thus, it encourages developers to completely separate JavaScript code from HTML markup. Brevity and clarity: jQuery promotes brevity and clarity with features like "chainable" functions and shorthand function names. Elimination of cross-browser incompatibilities: The JavaScript engines of different browsers differ slightly so JavaScript code that works for one browser may not work for another. Like other JavaScript toolkits, jQuery handles all these cross-browser inconsistencies and provides a consistent interface that works across different browsers. Extensibility: New events, elements, and methods can be easily added and then reused as a plugin. jQuery was originally created in January 2006 at BarCamp NYC by John Resig, influenced by Dean Edwards' earlier cssQuery library. It is currently maintained by a team of developers led by Timmy Willison (with the jQuery selector engine, Sizzle, being led by Richard Gibson). jQuery was originally licensed under the CC BY-SA 2.5, and relicensed to the MIT License in 2006. At the end of 2006, it was dual-licensed under GPL and MIT licenses. As this led to some confusion, in 2012 the GPL was dropped and is now only licensed under the MIT license. In 2015, jQuery was used on 62.7% of the top 1 million websites (according to BuiltWith), and 17% of all Internet websites. In 2017, jQuery was used on 69.2% of the top 1 million websites (according to Libscore). In 2018, jQuery was used on 78% of the top 1 million websites. In 2019, jQuery was used on 80% of the top 1 million websites (according to BuiltWith), and 74.1% of the top 10 million (per W3Techs). As of Apr 2021, jQuery is used by 77.8% of the top 10 million websites (according to W3Techs). jQuery includes the following features: DOM element selections using the multi-browser open source selector engine Sizzle, a spin-off of the jQuery project DOM manipulation based on CSS selectors that uses elements' names and attributes, such as id and class, as criteria to select nodes in the DOM Events Effects and animations Ajax Deferred and Promise objects to control asynchronous processing JSON parsing Extensibility through plug-ins Utilities, such as feature detection Compatibility methods that are natively available in modern browsers, but need fallbacks for old browsers, such as jQuery.inArray() and jQuery.each(). Cross-browser support jQuery 3.0 and newer supports "current−1 versions" (meaning the current stable version of the browser and the version that preceded it) of Firefox (and ESR), Chrome, Safari, and Edge as well as Internet Explorer 9 and newer. On mobile it supports iOS 7 and newer, and Android 4.0 and newer. The jQuery library is typically distributed as a single JavaScript file that defines all its interfaces, including DOM, Events, and Ajax functions. It can be included within a Web page by linking to a local copy or by linking to one of the many copies available from public servers. jQuery has a content delivery network (CDN) hosted by MaxCDN. Google in Google Hosted Libraries service and Microsoft host the library as well. Example of linking a copy of the library locally (from the same server that hosts the Web page): <script src="jquery-3.5.1.min.js"></script> Example of linking a copy of the library from jQuery's public CDN: <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script> jQuery provides two kinds of functions, static utility functions and jQuery object methods. Each has its own usage style. Both are accessed through jQuery's main identifier: jQuery. This identifier has an alias named $. All functions can be accessed through either of these two names. The jQuery function is a factory for creating a jQuery object that represents one or more DOM nodes. jQuery objects have methods to manipulate these nodes. These methods (sometimes called commands), are chainable as each method also returns a jQuery object. Access to and manipulation of multiple DOM nodes in jQuery typically begins with calling the $ function with a CSS selector string. This returns a jQuery object referencing all the matching elements in the HTML page. $("div.test"), for example, returns a jQuery object with all the div elements that have the class test. This node set can be manipulated by calling methods on the returned jQuery object. These are utility functions and do not directly act upon a jQuery object. They are accessed as static methods on the jQuery or $ identifier. For example, $.ajax() is a static method. jQuery provides a $.noConflict() function, which relinquishes control of the $ name. This is useful if jQuery is used on a Web page also linking another library that demands the $ symbol as its identifier. In no-conflict mode, developers can use jQuery as a replacement for $ without losing functionality. Typically, jQuery is used by putting initialization code and event handling functions in $(handler). This is triggered by jQuery when the browser has finished constructing the DOM for the current Web page. $(function () { // This anonymous function is called when the page has completed loading. // Here, one can place code to create jQuery objects, handle events, etc. }); or $(fn); // The function named fn, defined elsewhere, is called when the page has loaded. Historically, $(document).ready(callback) has been the de facto idiom for running code after the DOM is ready. However, since jQuery 3.0, developers are encouraged to use the much shorter $(handler) signature instead. jQuery object methods typically also return a jQuery object, which enables the use of method chains: $('div.test') .on('click', handleTestClick) .addClass('foo'); This line finds all div elements with class attribute test , then registers an event handler on each element for the "click" event, then adds the class attribute foo to each element. Certain jQuery object methods retrieve specific values (instead of modifying a state). An example of this is the val() method, which returns the current value of a text input element. In these cases, a statement such as $('#user-email').val() cannot be used for chaining as the return value does not reference a jQuery object. Besides accessing existing DOM nodes through jQuery, it is also possible to create new DOM nodes, if the string passed as the argument to $() factory looks like HTML. For example, the below code finds an HTML select element, and creates a new option element with the value VAG and the label Volkswagen, which is then appended to the select menu: $('select#car-brands') .append($('<option>') .prop(value,"VAG") .text('Volkswagen') ); It is possible to make Ajax requests (with cross-browser support) with $.ajax() to load and manipulate remote data. $.ajax({ type: 'POST', url: '/process/submit.php', data: { name : 'John', location : 'Boston', }, }).then(function(msg) { alert('Data Saved: ' + msg); }).catch(function(xmlHttpRequest, statusText, errorThrown) { alert( 'Your form submission failed.\n\n' + 'XML Http Request: ' + JSON.stringify(xmlHttpRequest) + ',\nStatus Text: ' + statusText + ',\nError Thrown: ' + errorThrown); }); This example posts the data name=John and location=Boston to /process/submit.php on the server. When this request finishes the success function is called to alert the user. If the request fails it will alert the user to the failure, the status of the request, and the specific error. The above example uses the .then() and .catch() methods to register callbacks that run when the response has completed. These promise callbacks must be used due to the asynchronous nature of Ajax requests. jQuery's architecture allows developers to create plug-in code to extend its function. There are thousands of jQuery plug-ins available on the Web that cover a range of functions, such as Ajax helpers, Web services, datagrids, dynamic lists, XML and XSLT tools, drag and drop, events, cookie handling, and modal windows. An important source of jQuery plug-ins is the plugins sub-domain of the jQuery Project website. The plugins in this subdomain, however, were accidentally deleted in December 2011 in an attempt to rid the site of spam. The new site is a GitHub-hosted repository, which required developers to resubmit their plugins and to conform to new submission requirements. jQuery provides a "Learning Center" that can help users understand JavaScript and get started developing jQuery plugins. QUnit is a test automation framework used to test the jQuery project. The jQuery team developed it as an in-house unit testing library. The jQuery team uses it to test its code and plugins, but it can test any generic JavaScript code, including server-side JavaScript code. As of 2011[update], the jQuery Testing Team uses QUnit with TestSwarm to test each jQuery codebase release. Simplifying tasks such as HTML document traversal, animation, and event handling, the stalwart jQuery JavaScript library changed the face of web development. As of May 2019[update], jQuery is still being used in 74 percent of known websites, according to web technology surveyor W3Techs. Nevertheless, the jQuery library, which debuted in August 2006, is now being viewed by some developers as an older technology whose time has passed. Alternatives to jQuery have emerged in recent years, such as the Cash library or even just modern, vanilla JavaScript, now that web browsers all handle JavaScript the same way and jQuery is no longer needed to solve compatibility issues. Arguments on Reddit and videos on YouTube make the case that jQuery has become obsolete, or at least is not as essential as it once was. — Paul Krill, InfoWorld (2019) As cross-browser compatibility is no longer as much of an issue, most of jQuery can nowadays be replaced with modern web standards, without losing much convenience. Partly due to this, GitHub removed jQuery from its pages in 2018. Free and open-source software portal Comparison of JavaScript-based web frameworks jQuery Mobile jQuery UI Web framework JavaScript library https://blog.jquery.com/2023/08/28/jquery-3-7-1-released-reliable-table-row-dimensions/ "Open-source Libraries and File Sizes - PageCDN". pagecdn.com. Retrieved July 21, 2020. "jQuery: The write less, do more, JavaScript library". The jQuery Project. Retrieved April 29, 2010. "jQuery Project License". jQuery Foundation. Retrieved March 11, 2017. "Usage of JavaScript libraries for websites". W3Techs. Archived from the original on November 15, 2019. Retrieved November 15, 2019. jQuery (74.1%) is 3.7 times more popular than Bootstrap (19.9%). "Libscore". Archived from the original on February 19, 2017. Retrieved February 11, 2017. Top scripts are 1. jQuery (692,981 sites); 2. jQuery UI (193,680 sites); 3. Facebook SDK (175,369 sites); 4. Twitter Bootstrap JS (158,288 sites); 5. Modernizr (155,503 sites). "Selectors API Level 1, W3C Recommendation" (21 February 2013). This standard turned what was jQuery "helper methods" into JavaScript-native ones, and the wide use of jQuery stimulated the fast adoption of querySelector/querySelectorAll into main Web browsers. Resig, John (September 28, 2008). "jQuery, Microsoft, and Nokia". jQuery Blog. jQuery. Retrieved January 29, 2009. Guthrie, Scott (September 28, 2008). "jQuery and Microsoft". ScottGu's Blog. Retrieved April 15, 2019. "Guarana UI: A jQuery Based UI Library for Nokia WRT". Forum Nokia. Archived from the original on August 16, 2011. Retrieved March 30, 2010. York, Richard (2009). Beginning JavaScript and CSS Development with jQuery. Wiley. p. 28. ISBN 978-0-470-22779-4. Resig, John (October 31, 2007). "History of jQuery". Retrieved April 15, 2019. "The jQuery Team". jquery.com. JS Foundation. Retrieved May 22, 2019. Team: Timmy Willison (jQuery Core Lead), Richard Gibson (Sizzle Lead, jQuery Core). jquery-under-the-mit-license on jquery.org (2006) license on jquery.org (archived 2010) "jQuery Licensing Changes". jQuery Blog. September 10, 2012. "Handling 15,000 requests per second: The Growth Behind jQuery". www.maxcdn.com. MaxCDN. June 20, 2015. Retrieved July 2, 2018. "jQuery Usage Statistics (Dec 2019)". trends.builtwith.com. December 31, 2019. Archived from the original on February 21, 2020. Retrieved February 21, 2020. "Usage Statistics and Market Share of JavaScript Libraries (February 2020)". W3Techs. February 21, 2020. Archived from the original on February 21, 2020. Retrieved February 21, 2020. Resig, John (January 14, 2009). "jQuery 1.3 and the jQuery Foundation". jQuery Blog. Retrieved May 4, 2009. Browser Support | jQuery jquery.org, jQuery Foundation -. "jQuery CDN". "Google Libraries API - Developer's Guide". Retrieved March 11, 2012. "Microsoft Ajax Content Delivery Network". ASP.net. Microsoft Corporation. Retrieved April 15, 2019. js.foundation, JS Foundation -. "jQuery() | jQuery API Documentation". api.jquery.com. Retrieved July 2, 2018. "jQuery.noConflict() jQuery API Documentation". jquery.org, jQuery Foundation -. "jQuery Core 3.0 Upgrade Guide - jQuery". "Plugins". The jQuery Project. Retrieved April 15, 2019. "What Is Happening To The jQuery Plugins Site?". jQuery Blog. Retrieved April 22, 2015. "jquery/plugins.jquery.com". GitHub. Retrieved April 22, 2015. "jQuery Learning Center". jQuery Foundation. Retrieved July 2, 2014. "jQuery 1.6.4 Released". jQuery Blog. September 12, 2011. "jQuery 1.7.2 Released". jQuery Blog. March 21, 2012. "jQuery 1.8.3 Released". jQuery Blog. November 13, 2012. "jQuery 1.9.1 Released". jQuery Blog. February 4, 2013. "jQuery 1.10.2 and 2.0.3 Released". jQuery Blog. July 3, 2013. "jQuery 1.11.3 and 2.1.4 Released – iOS Fail-Safe Edition". jQuery Blog. April 28, 2015. "jQuery 1.12.4 and 2.2.4 Released". jQuery Blog. May 20, 2016. Chesters, James (June 15, 2016). "Long-awaited jQuery 3.0 Brings Slim Build". infoq.com. Retrieved January 28, 2017. "jQuery 3.2.0 Is Out!". jQuery Blog. March 16, 2017. Retrieved March 12, 2018. "jQuery 3.3.0 – A fragrant bouquet of deprecations and…is that a new feature?". jQuery Blog. January 19, 2018. Retrieved April 15, 2019. "jQuery 3.3.1 – fixed dependencies in release tag". jQuery Blog. January 20, 2018. Retrieved April 15, 2019. "jQuery 3.4.0 Released". jQuery Blog. April 10, 2018. Retrieved April 15, 2019. "jQuery 3.4.1: triggering focus events in IE and finding root elements in iOS 10". jQuery Blog. jQuery Foundation. "jQuery 3.5.0 Released!". jQuery Blog. April 10, 2020. Retrieved April 11, 2020. "jQuery 3.5.1 Released: Fixing a Regression". jQuery Blog. jQuery Foundation. jquery.org, jQuery Foundation-. "jQuery 3.6.0 Released! | Official jQuery Blog". Retrieved March 27, 2021. "jQuery 3.6.4 Released: Selector Forgiveness". Retrieved March 8, 2023. "jquery v3.6.4". bundlephobia.com. Retrieved March 8, 2023. jquery.org, jQuery Foundation-. "jQuery 3.7.0 Released: Staying in Order | Official jQuery Blog". "jQuery 3.7.1 Released: Reliable Table Row Dimensions". Retrieved September 14, 2023. "jquery v3.7.0". bundlephobia.com. Retrieved May 11, 2023. jquery.org, jQuery Foundation-. "jQuery 4.0.0 BETA!". "History". qunitjs.com. Retrieved April 15, 2019. "jQuery Testing Team Wiki". Krill, Paul (May 8, 2019). "3 JavaScript libraries to replace jQuery". InfoWorld. "You Might Not Need jQuery". youmightnotneedjquery.com. Retrieved April 23, 2022. "Removing jQuery from GitHub.com frontend". The GitHub Blog. September 6, 2018. Retrieved July 21, 2021. John Resig (speaker) (April 13, 2007). John Resig: Advancing JavaScript with Libraries (YouTube video). YUI Theater. Retrieved January 9, 2018. Krill, Paul (August 31, 2006). "JavaScript, .Net developers aided in separate project". InfoWorld. Retrieved April 15, 2019. Taft, Darryl K. (August 30, 2006). "jQuery Eases JavaScript, AJAX Development". eWeek. Retrieved April 15, 2019. Wikimedia Commons has media related to JQuery. Official website
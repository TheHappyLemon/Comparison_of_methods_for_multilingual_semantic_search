The Point-to-Point Protocol over Ethernet (PPPoE) is a network protocol for encapsulating Point-to-Point Protocol (PPP) frames inside Ethernet frames. It appeared in 1999, in the context of the boom of DSL as the solution for tunneling packets over the DSL connection to the ISP's IP network, and from there to the rest of the Internet. A 2005 networking book noted that "Most DSL providers use PPPoE, which provides authentication, encryption, and compression." Typical use of PPPoE involves leveraging the PPP facilities for authenticating the user with a username and password, via the PAP protocol or via CHAP. PAP was dominant in 2007 but service providers have been transitioning to the more secure CHAP, because PAP is a plain-text protocol. Around 2000, PPPoE was also starting to become a replacement method for talking to a modem connected to a computer or router over an Ethernet LAN displacing the older method, which had been USB. This use-case, connecting routers to modems over Ethernet is still extremely common today. On the customer-premises equipment, PPPoE may be implemented either in a unified residential gateway device that handles both DSL modem and IP routing functions or in the case of a simple DSL modem (without routing support), PPPoE may be handled behind it on a separate Ethernet-only router or even directly on a user's computer. (Support for PPPoE is present in most operating systems, ranging from Windows XP, Linux to Mac OS X.) More recently[when?], some GPON-based (instead of DSL-based) residential gateways also use PPPoE, although the status of PPPoE in the GPON standards is marginal though mentioned in ITU-T recommendation G.984.1 "Gigabit-capable passive optical networks (GPON): General characteristics". PPPoE was developed by UUNET, Redback Networks (now Ericsson) and RouterWare (now Wind River Systems) and is available as an informational RFC 2516. In the world of DSL, PPP is commonly understood to be running on top of ATM (as PPPoA) with ATM as the underlying Layer 2 protocol and a version of DSL the Layer 1 protocol, although no such limitation exists in the PPP protocol itself. Other usage scenarios are sometimes distinguished by tacking as a suffix another underlying protocol. For example, PPPoEoE, when the transport is Ethernet itself, as in the case of Metro Ethernet networks. (In this notation, the original use of PPPoE would be labeled PPPoEoA, although it should not be confused with PPPoA, which has a different encapsulation of the PPP protocol.) PPPoE has been described in some books as a "layer 2.5" protocol, in some rudimentary sense similar to MPLS because it can be used to distinguish different IP flows sharing an Ethernet infrastructure, although the lack of PPPoE switches making routing decisions based on PPPoE headers limits applicability in that respect. In late 1998, the DSL service model had yet to reach the large scale that would bring prices down to household levels. ADSL technology had been proposed a decade earlier. Potential equipment vendors and carriers alike recognized that broadband such as cable modem or DSL would eventually replace dialup service, but the hardware (both customer premises and LEC) faced a significant low-quantity cost barrier. Initial estimates for low-quantity deployment of DSL showed costs in the $300–$500 range for a DSL modem and $300/month access fee from the telco,[citation needed] which was well beyond what a home user would pay. Thus the initial focus was on small and home business customers for whom a ~1.5 megabit T1 line (at the time $800–$1500 per month) was not economical, but who needed more than dialup or ISDN could deliver. If enough of these customers paved the way, quantities would drive the prices down to where the home-use dialup user might be interested. The problem was that small business customers had a different usage profile than a home-use dialup user, including: Connecting an entire LAN to the Internet; Providing services on a local LAN accessible from the far side of the connection; Simultaneous access to multiple external data sources, such as a company VPN and a general purpose ISP; Continuous usage throughout the workday, or even around the clock. These requirements didn't lend themselves to the connection establishment lag of a dial-up process nor its one-computer-to-one-ISP model, nor even the many-to-one that NAT plus dial-up provided. A new model was required. PPPoE is used mainly either: with PPPoE-speaking Internet DSL services where a PPPoE-speaking modem-router (residential gateway) connects to the DSL service. Here both ISP and modem-router need to speak PPPoE. (Note that in this case, the PPPoE-over-DSL side of things is occasionally referred to as PPPoEoA, for ‘PPPoE over ATM’.) or when a PPPoE-speaking DSL modem is connected to a PPPoE-speaking Ethernet-only router using an Ethernet cable. One problem with creating a completely new protocol to fill these needs was time. The equipment was available immediately, as was the service, and developing a whole new protocol stack (Microsoft at the time was advocating fiber-based atm-cells-to-the-desktop, and L2TP was brewing as well, but was not near completion) would take so long to implement that the window of opportunity might slip by. Several decisions were made to simplify implementation and standardization in an effort to deliver a complete solution quickly and at a lower cost. PPPoE hoped to merge the widespread Ethernet infrastructure with the ubiquitous PPP, allowing vendors to reuse their existing software and deliver products in the very near term. Essentially all operating systems at the time had a PPP stack, and the design of PPPoE allowed for a simple wrapper/shim to allow the encapsulation of PPP frames inside Ethernet frames.[citation needed] Competing WAN technologies (T1, ISDN) required a router on the customer premises. PPPoE used a different Ethernet frame type, which allowed the DSL hardware to function as simply a bridge, passing some frames to the WAN and ignoring the others. Implementation of such a bridge is multiple orders of magnitude simpler than a router. RFC 2516 was initially released as an informational (rather than standards-track) RFC for the same reason: the adoption period for a standards-track RFC was prohibitively long. PPPoE was initially designed to provide a small LAN with individual independent connections to the Internet at large, but also such that the protocol itself would be lightweight enough that it wouldn't impinge on the hoped-for home usage market when it finally arrived. While success on the second matter may be debated (some complain that 8 bytes per packet is too much) PPPoE clearly succeeded in bringing sufficient volume to drive the price for service down to what a home user would pay. Around 2000, the PPPoE protocol was used either (i) to connect a DSL modem to a computer or router, displacing the earlier method of using USB, or (ii) the PPP+PPPoE trio of protocol headers was used to connect a router to a network node, a protocol converter, somewhat further upstream belonging either to the ISP or to a wholesale long-distance carrier who in turn connects to the ISP’s IP networks and then to the internet. The first use-case, router-to-modem connection, involving so-called ‘PPPoEoE’ (the PPPoE protocol trio over a physical Ethernet LAN), is still very much in use today for connecting modems to routers if PPP is used. The second use-case, where the PPPoE protocol trio is used over one or more internet access links reaching upstream to a greater or lesser depth, is, according to consensus, only still used for historical reasons. However since PPP remains popular with some ISPs either as a tunnelling protocol, needed where an ISP uses a wholesale access carrier/reseller or because the features of PPP re desired, or both. As mentioned earlier, strangely, Ethernet MAC headers are in fact sometimes found in use with PPPoE headers even when the Ethernet protocol is not in use, not physically present on an Ethernet network. This seems to serve no purpose apart from adding further unnecessary header overhead, so-called bloat. For example in the case, discussed below, of PPPoEoA, where there was no physical Ethernet, only ATM, not only an unnecessary Ethernet MAC layer of header overhead was added but also an additional Ethernet adaptation layer too to make Ethernet fit on top of ATM. In the second use-case, these additional protocol headers add a serious amount of bloat and so harm performance by a small amount. In the second use case, the use of PPP+PPPoE+Ethernet MAC extends to a variable distance upstream. It may be confined to the ‘first mile’: a copper twisted pair in ADSL or VDSL2/FTTC involving modems and no further, or it may also be used further upstream extending to a BRAS ‘Broadband Remote Access Server’ or ‘access concentrator’ which may or may not handle login but will certainly be a protocol convertor of some sort. In one example case PPPoE extends upstream to and terminates at such a node operated by a wholesale carrier which converts to the L2TP tunneling protocol which tunnels to the ISP’s IP POPs (‘point of presence’). The PPPoE has two distinct stages: Since traditional PPP connections are established between two end points over a serial link or over an ATM virtual circuit that has already been established during dial-up, all PPP frames sent on the wire are sure to reach the other end. But Ethernet networks are multi-access where each node in the network can access every other node. An Ethernet frame contains the hardware address of the destination node (MAC address). This helps the frame reach the intended destination. Hence before exchanging PPP control packets to establish the connection over Ethernet, the MAC addresses of the two end points should be known to each other so that they can be encoded in these control packets. The PPPoE Discovery stage does exactly this. It also helps establish a Session ID that can be used for further exchange of packets. Once the MAC address of the peer is known and a session has been established, the session stage will start. Although traditional PPP is a peer-to-peer protocol, PPPoE is inherently a client-server relationship since multiple hosts can connect to a service provider over a single physical connection. The discovery process consists of four steps between the host computer which acts as the client and the access concentrator at the Internet service provider's end acts as the server. They are outlined below. The fifth and last step is the way to close an existing session. PADI stands for PPPoE Active Discovery Initiation. If a user wants to "dial up" to the Internet using DSL, then their computer first must find the DSL access concentrator (DSL-AC) at the user's Internet service provider's point of presence (POP). Communication over Ethernet is only possible via MAC addresses. As the computer does not know the MAC address of the DSL-AC, it sends out a PADI packet via an Ethernet broadcast (MAC: ff:ff:ff:ff:ff:ff). This PADI packet contains the MAC address of the computer sending it. Example of a PADI-packet: Frame 1 (44 bytes on wire, 44 bytes captured) Ethernet II, Src: 00:50:da:42:d7:df, Dst: ff:ff:ff:ff:ff:ff PPP-over-Ethernet Discovery Version: 1 Type 1 Code Active Discovery Initiation (PADI) Session ID: 0000 Payload Length: 24 PPPoE Tags Tag: Service-Name Tag: Host-Uniq Binary Data: (16 bytes) Src. (=source) holds the MAC address of the computer sending the PADI. Dst. (=destination) is the Ethernet broadcast address. The PADI packet can be received by more than one DSL-AC. Only DSL-AC equipment that can serve the "Service-Name" tag should reply. PADO stands for PPPoE Active Discovery Offer. Once the user's computer has sent the PADI packet, the DSL-AC replies with a PADO packet, using the MAC address supplied in the PADI. The PADO packet contains the MAC address of the DSL-AC, its name (e.g. LEIX11-erx for the T-Com DSL-AC in Leipzig) and the name of the service. If more than one POP's DSL-AC replies with a PADO packet, the user's computer selects the DSL-AC for a particular POP using the supplied name or service. Here is an example of a PADO packet: Frame 2 (60 bytes on wire, 60 bytes captured) Ethernet II, Src: 00:0e:40:7b:f3:8a, Dst: 00:50:da:42:d7:df PPP-over-Ethernet Discovery Version: 1 Type 1 Code Active Discovery Offer (PADO) Session ID: 0000 Payload Length: 36 PPPoE Tags Tag: AC-Name String Data: lpzbr001 Tag: Host-Uniq Binary Data: (16 bytes) AC-Name -> String data holds the AC name, in this case “lpzbr001” (the Arcor DSL-AC in Leipzig) Src. holds the MAC address of the DSL-AC. The MAC address of the DSL-AC also reveals the manufacturer of the DSL-AC (in this case Nortel Networks). PADR stands for PPPoE active discovery request. A PADR packet is sent by the user's computer to the DSL-AC following receipt of an acceptable PADO packet from the DSL-AC. It confirms acceptance of the offer of a PPPoE connection made by the DSL-AC issuing the PADO packet. PADS stands for PPPoE Active Discovery Session-confirmation. The PADR packet above is confirmed by the DSL-AC with a PADS packet, and a Session ID is given out with it. The connection with the DSL-AC for that POP has now been fully established. PADT stands for PPPoE Active Discovery Termination. This packet terminates the connection to the POP. It may be sent either from the user's computer or from the DSL-AC. PPPoE is used to connect a PC or a router to a modem via an Ethernet link and it can also be used in Internet access over DSL on a telephone line in the PPPoE over ATM (PPPoEoA) over ADSL protocol stack. PPPoE over ATM has the highest overhead of the popular DSL delivery methods, when compared with for example PPPoA (RFC 2364). The amount of overhead added by PPPoEoA on a DSL link depends on the packet size because of (i) the absorbing effect of ATM cell-padding (discussed below), which completely cancels out additional overhead of PPPoEoA in some cases, (ii) PPPoEoA + AAL5 overhead which can cause an entire additional 53-byte ATM cell to be required, and (iii) in the case of IP packets, PPPoE overhead added to packets that are near maximum length (‘MRU’) may cause IP fragmentation, which also involves the first two considerations for both of the resulting IP fragments. However ignoring ATM and IP fragmentation for the moment, the protocol header overheads for ATM payload due to choosing PPP + PPPoEoA can be as high as 44 bytes = 2 bytes (for PPP) + 6 (for PPPoE) + 18 (Ethernet MAC, variable) + 10 (RFC 2684 LLC, variable) + 8 (AAL5 CPCS). This overhead is that obtained when using the LLC header option described in RFC 2684 for PPPoEoA. Compare this with a vastly more header-efficient protocol, PPP + PPPoA RFC 2364 VC-MUX over ATM+DSL, which has a mere 10-byte overhead within the ATM payload. (In fact, just simply 10 bytes = 2 bytes for PPP + zero for RFC 2364 + 8 (AAL5 CPCS).) This figure of 44 bytes AAL5 payload overhead can be reduced in two ways: (i) by choosing the RFC 2684 option of discarding the 4-byte Ethernet MAC FCS, which reduces the figure of 18 bytes above to 14, and (ii) by using the RFC 2684 VC-MUX option, whose overhead contribution is a mere 2 bytes compared with the 10 byte overhead of the LLC alternative. It turns out that this overhead reduction can be a valuable efficiency improvement. Using VC-MUX instead of LLC, the ATM payload overhead is either 32 bytes (without Ethernet FCS) or 36 bytes (with FCS). ATM AAL5 requires that an 8-byte-long ‘CPCS’ trailer must always be present at the very end of the final cell (‘right justified’) of the run of ATM cells that make up the AAL5 payload packet. In the LLC case, the total ATM payload overhead is 2 + 6 + 18 + 10 + 8 = 44 bytes if the Ethernet MAC FCS is present, or 2 + 6 + 14 + 10 + 8 = 40 bytes with no FCS. In the more efficient VC-MUX case the ATM payload overhead is 2 + 6 + 18 + 2 + 8 = 36 bytes (with FCS), or 2 + 6 + 14 + 2 + 8 = 32 bytes (no FCS). However, the true overhead in terms of the total amount of ATM payload data sent is not simply a fixed additional value – it can only be either zero or 48 bytes (leaving aside scenario (iii) mentioned earlier, IP fragmentation). This is because ATM cells are fixed length with a payload capacity of 48 bytes, and adding a greater extra amount of AAL5 payload due to additional headers may require one more whole ATM cell to be sent containing the excess. The last one or two ATM cells contain padding bytes as required to ensure that each cell's payload is 48 bytes long. An example: In the case of a 1500-byte IP packet sent over AAL5/ATM with PPPoEoA and RFC2684-LLC, neglecting final cell padding for the moment, one starts with 1500 + 2 + 6 + 18 + 10 + 8 (AAL5 CPCS trailer) = 1544 bytes if the Ethernet FCS is present, or else + 2 + 6 + 14 + 10 + 8 = 40 bytes with no FCS. To send 1544 bytes over ATM requires 33 48-byte ATM cells, since the available payload capacity of 32 cells × 48 bytes per cell = 1536 bytes is not quite enough. Compare this to the case of PPP + PPPoA which at 1500 + 2 (PPP) + 0 (PPPoA: RFC 2364 VC-MUX) + 8 (CPCS trailer) = 1510 bytes fits in 32 cells. So the real cost of choosing PPPoEoA plus RFC2684-LLC for 1500-byte IP packets is one additional ATM cell per IP packet, a ratio of 33:32. So for 1500 byte packets, PPPoEoA with LLC is ~3.125% slower than PPPoA or optimal choices of PPPoEoA header options. For some packet lengths the true additional effective DSL overhead due to choosing PPPoEoA compared with PPPoA will be zero if the extra header overhead is not enough to need an additional ATM cell at that particular packet length. For example, a 1492 byte long packet sent with PPP + PPPoEoA using RFC2684-LLC plus FCS gives us a total ATM payload of 1492 + 44 = 1536 bytes = 32 cells exactly, and the overhead in this special case is no greater than if we were using the header-efficient PPPoA protocol, which would require 1492 + 2 + 0 + 8 = 1502 bytes ATM payload = 32 cells also. The case where the packet length is 1492 represents the optimum efficiency for PPPoEoA with RFC2684-LLC in ratio terms, unless even longer packets are allowed. Using PPPoEoA with the RFC2684 VC-MUX header option is always much more efficient than the LLC option, since the ATM overhead, as mentioned earlier, is only 32 or 36 bytes (depending on whether this is without or with the Ethernet FCS option in PPPoEoA) so that a 1500 byte long packet including all overheads of PPP + PPPoEoA using VC-MUX equates to a total 1500 + 36 = 1536 bytes ATM payload if the FCS is present = 32 ATM cells exactly, thus saving an entire ATM cell. With short packets, the longer the header overheads the greater the likelihood of generating an additional ATM cell. A worst case might be sending 3 ATM cells instead of two because of a 44 byte header overhead compared with a 10 byte header overhead, so 50% more time taken to transmit the data. For example, a TCP ACK packet over IPv6 is 60 bytes long, and with overhead of 40 or 44 bytes for PPPoEoA + LLC this requires three 48 byte ATM cells’ payloads. As a comparison, PPPoA with overheads of 10 bytes so 70 bytes total fits into two cells. So the extra cost of choosing PPPoE/LLC over PPPoA is 50% extra data sent. PPPoEoA + VC-MUX would be fine though: with 32 or 36 byte overhead, our IP packet still fits in two cells. In all cases the most efficient option for ATM-based ADSL internet access is to choose PPPoA (RFC2364) VC-MUX. However, if PPPoEoA is required, then the best choice is always to use VC-MUX (as opposed to LLC) with no Ethernet FCS, giving an ATM payload overhead of 32 bytes = 2 bytes (for PPP) + 6 (for PPPoE) + 14 (Ethernet MAC, no FCS) + 2 (RFC 2684 VC-MUX) + 8 (AAL5 CPCS trailer). Unfortunately some DSL services require the use of wasteful LLC headers with PPPoE and do not allow the more efficient VC-MUX option. In that case, using a reduced packet length, such as enforcing a maximum MTU of 1492 regains efficiency with long packets even with LLC headers and, as mentioned earlier, in that case no extra wasteful ATM cell is generated. On an Ethernet LAN, the overhead for PPP + PPPoE is a fixed 2 + 6 = 8 bytes, unless IP fragmentation is produced. When a PPPoE-speaking DSL modem sends or receives Ethernet frames containing PPP + PPPoE payload across the Ethernet link to a router (or PPPoE-speaking single PC), PPP + PPPoE contributes an additional overhead of 8 bytes = 2 (PPP) + 6 (PPPoE) included within the payload of each Ethernet frame. This added overhead can mean that a reduced maximum length limit (so-called ‘MTU’ or ‘MRU’) of 1500 − 8 = 1492 bytes is imposed on (for example) IP packets sent or received, as opposed to the usual 1500-byte Ethernet frame payload length limit which applies to standard Ethernet networks. Some devices support RFC 4638, which allows negotiation for the use of non-standard Ethernet frames with a 1508-byte Ethernet payload, sometimes called ‘baby jumbo frames’, so allowing a full 1500-byte PPPoE payload. This capability is advantageous for many users in cases where companies receiving IP packets have (incorrectly) chosen to block all ICMP responses from exiting their network, a bad practice which prevents path MTU discovery from working correctly and which can cause problems for users accessing such networks if they have an MTU of less than 1500 bytes. The following diagram shows a scenario where an Ethernet-connected ADSL modem acts as a PPPoE-to-PPPoA protocol converter and the service provider offers a PPPoA service and does not understand PPPoE. There is no PPPoEoA in this protocol chain. This is an optimally protocol-efficient design for a separate ADSL modem connected to a router by Ethernet. In this alternative technology, PPPoE is merely a means of connecting DSL-modems to an Ethernet-only router (again, or to a single host PC). Here it is not concerned with the mechanism employed by an ISP to offer broadband services. The Draytek Vigor 110, 120 and 130 modems work in this way. When transmitting packets bound for the Internet, the PPPoE-speaking Ethernet router sends Ethernet frames to the (also PPPoE-speaking) DSL modem. The modem extracts PPP frames from within the received PPPoE frames, and sends the PPP frames onwards to the DSLAM by encapsulating them according to RFC 2364 (PPPoA), thus converting PPPoE into PPPoA. On the diagram, the area shown as ‘backbone’ could also be ATM on older networks, however its architecture is service provider-dependent. On a more detailed, more service-provider specific diagram there would be additional table cells in this area. Since the point-to-point connection established has a MTU lower than that of standard Ethernet (typically 1492 vs Ethernet's 1500), it can sometimes cause problems when Path MTU Discovery is defeated by poorly configured firewalls. Although higher MTUs are becoming more common in providers' networks, usually the workaround is to use TCP MSS (Maximum Segment Size) "clamping" or "rewrite", whereby the access concentrator rewrites the MSS to ensure TCP peers send smaller datagrams. Although TCP MSS clamping solves the MTU issue for TCP, other protocols such as ICMP and UDP may still be affected. RFC 4638 allows PPPoE devices to negotiate an MTU of greater than 1492 if the underlying Ethernet layer is capable of jumbo frames. Some vendors (Cisco and Juniper,[citation needed] for example) distinguish PPPoE[oA] from PPPoEoE (PPPoE over Ethernet), which is PPPoE running directly over Ethernet or other IEEE 802 networks or over Ethernet bridged over ATM, in order to distinguish it from PPPoEoA (PPPoE over ATM), which is PPPoE running over an ATM virtual circuit using RFC 2684 and SNAP encapsulation of PPPoE.[citation needed] (PPPoEoA is not the same as Point-to-Point Protocol over ATM (PPPoA), which doesn't use SNAP). According to a Cisco document "PPPoEoE is a variant of PPPoE where the Layer 2 transport protocol is now Ethernet or 802.1q VLAN instead of ATM. This encapsulation method is generally found in Metro Ethernet or Ethernet digital subscriber line access multiplexer (DSLAM) environments. The common deployment model is that this encapsulation method is typically found in multi-tenant buildings or hotels. By delivering Ethernet to the subscriber, the available bandwidth is much more abundant and the ease of further service delivery is increased." It is possible to find DSL modems, such as the Draytek Vigor 120, where PPPoE is confined to the Ethernet link between a DSL modem and a partnering router, and the ISP does not speak PPPoE at all (but rather PPPoA). A certain method of using PPPoE in conjunction with GPON (which involves creating a VLAN via OMCI) has been patented by ZTE. PPPoE over GPON is reportedly used by retail service providers such as Internode of Australia's National Broadband Network, Orange of France, the Philippines' Globe Telecom and Italy's Aruba FTTH on OpenFiber public GPON networks. RFC 6934, "Applicability of Access Node Control Mechanism to PON based Broadband Networks", which argues for the use of Access Node Control Protocol in PONs for—among other things—authenticating subscriber access and managing their IP addresses, and the first author of which is a Verizon employee, excludes PPPoE as an acceptable encapsulation for GPON: "The protocol encapsulation on BPON is based on multi-protocol encapsulation over ATM Adaptation Layer 5 (AAL5), defined in [RFC2684]. This covers PPP over Ethernet (PPPoE, defined in [RFC2516]) or IP over Ethernet (IPoE). The protocol encapsulation on GPON is always IPoE." The 10G-PON (XG-PON) standard (G.987) provides for 802.1X mutual authentication of the ONU and OLT, besides the OMCI method carried forward from G.984. G.987 also adds support for authenticating other customer-premises equipment beyond the ONU (e.g. in a MDU), although this is limited to Ethernet ports, also handled via 802.1X. (The ONU is supposed snoop EAP-encapsulated RADIUS messages in this scenario and determine if the authentication was successful or not.) There is some modicum support for PPPoE specified in the OMCI standards, but only in terms of the ONU being able to filter and add VLAN tags for traffic based on its encapsulation (and other parameters), which includes PPPoE among the protocols that ONU must be able to discern. The Broadband Forum's TR-200 "Using EPON in the Context of TR-101" (2011), which also pertains to 10G-EPON, says "The OLT and the multiple-subscriber ONU MUST be able to perform the PPPoE Intermediate Agent function, as specified in Section 3.9.2/TR-101." A book on Ethernet in the first mile notes that DHCP can obviously be used instead of PPPoE to configure a host for an IP session, although it points out that DHCP is not a complete replacement for PPPoE if some encapsulation is also desired (although VLAN bridges can fulfill this function) and that furthermore, DHCP does not provide (subscriber) authentication, suggesting that IEEE 802.1X is also needed for a "complete solution" without PPPoE. (This book assumes that PPPoE is leveraged for other features of PPP besides encapsulation, including IPCP for host configuration, and PAP or CHAP for authentication.) There are security reasons to use PPPoE in a (non-DSL/ATM) shared-medium environment, such as power line communication networks, in order to create separate tunnels for each customer. PPPoE is widely used on WAN lines, including FTTx. Many FTTx residential gateway provided by ISP has integrated the routing functions. Multiprotocol Encapsulation over ATM Point-to-Point Protocol daemon Point-to-Point Tunneling Protocol Point-to-Point Protocol over ATM (PPPoA) Point-to-Point Protocol over X (PPPoX) James Boney (2005). Cisco IOS in a Nutshell. O'Reilly Media, Inc. p. 88. ISBN 978-0-596-55311-1. Philip Golden; Hervé Dedieu; Krista S. Jacobsen (2007). Implementation and Applications of DSL Technology. Taylor & Francis. p. 479. ISBN 978-1-4200-1307-8. "How to create a PPPoE connection in Windows XP". Archived from the original on 3 December 2013. Retrieved 11 December 2013. "Configuring Linux". www.tldp.org. Retrieved 26 March 2019. "Connecting to the Internet with PPPoE (Mac OS X v10.5 and earlier)". Apple Support. Retrieved 26 March 2019. Wind River Systems Acquires RouterWare, Inc.. Findarticles.com (1999-07-05). Retrieved on 2011-09-27. Archived 2005-05-26 at the Wayback Machine Michael Beck (2005). Ethernet in the First Mile : The IEEE 802.3ah EFM Standard. McGraw Hill Professional. p. 27. ISBN 978-0-07-146991-3. Richard D. Gitlin; Sailesh K. Rao; Jean-Jacques Werner; Nicholas Zervos (8 May 1990). "Method and apparatus for wideband transmission of digital signals between, for example, a telephone central office and customer premises". US Patent 4,924,492. "TouchWave Partners With Telogy Networks For VoIP Embedded Communications Software". Business Wire. 5 October 1998. Retrieved 16 December 2008.[dead link] Mamakos, L.; Simone, D.; Wheeler, R.; Carrel, D.; Evarts, J.; Lidl, K. (February 1999). "A Method for Transmitting PPP Over Ethernet (PPPoE)". tools.ietf.org. doi:10.17487/RFC2516. Retrieved 26 March 2019. Dirk Van Aken, Sascha Peckelbeen Encapsulation Overhead(s) in ADSL Access Networks, June 2003 Kaycee, Manu; Gross, George; Malis, Andrew; Stephens, John; Lin, Arthur (July 1998). "PPP Over AAL5". tools.ietf.org. doi:10.17487/RFC2364. Retrieved 26 March 2019. Grossman, Dan; Heinanen, Juha (September 1999). "Multiprotocol Encapsulation over ATM Adaptation Layer 5". tools.ietf.org. doi:10.17487/RFC2684. Retrieved 26 March 2019. "Simon Farnsworth article". farnz.org.uk. Retrieved 26 March 2019. Encapsulation Overhead(s) in ADSL Access Networks.[permanent dead link] http://www.cisco.com/en/US/docs/ios/bbdsl/configuration/guide/bba_understanding.pdf[bare URL PDF] "Vigor120 - DrayTek Corp". Archived from the original on 23 February 2014. Retrieved 10 February 2014. "Gigabit-capable passive optical network system and point-to-point protocol over ehternet configuration method implemented thereby". google.com. Retrieved 26 March 2019. [1] Archived 2013-09-13 at the Wayback Machine "TP-Link new Community is officially launched！ - TP-Link Community". community.tp-link.com. Archived from the original on 26 March 2019. Retrieved 26 March 2019.[failed verification] "YouTube". www.youtube.com. Archived from the original on 8 June 2014. Retrieved 26 March 2019.[failed verification] "Configurazione dei router e modem ADSL | Guide Aruba". guide.aruba.it. Retrieved 10 March 2022. Bitar, Nabil N.; Wadhwa, Sanjay; Haag, Thomas; Hongyu, Li (June 2013). "RFC 6934 - Applicability of the Access Node Control Mechanism to Broadband Networks Based on Passive Optical Networks (PONs)". datatracker.ietf.org. Retrieved 26 March 2019. Dave Hood & Elmar Trojer (2012). Gigabit-capable Passive Optical Networks. John Wiley & Sons. p. 200. ISBN 978-1-118-15558-5. Dave Hood & Elmar Trojer (2012). Gigabit-capable Passive Optical Networks. John Wiley & Sons. p. 207 and 274–275. ISBN 978-1-118-15558-5. Dave Hood & Elmar Trojer (2012). Gigabit-capable Passive Optical Networks. John Wiley & Sons. p. 261 and 271. ISBN 978-1-118-15558-5. http://www.broadband-forum.org/technical/download/TR-200.pdf[bare URL PDF] Michael Beck (2005). Ethernet in the First Mile : The IEEE 802.3ah EFM Standard. McGraw Hill Professional. p. 241. ISBN 978-0-07-146991-3. Xavier Carcelle (2009). Power Line Communications in Practice. Artech House. p. 235. ISBN 978-1-59693-336-1. RFC 2516 - A Method for Transmitting PPP Over Ethernet (PPPoE) RFC 3817 - Layer 2 Tunneling Protocol (L2TP) Active Discovery Relay for PPP over Ethernet (PPPoE) RFC 4638 - Accommodating a Maximum Transit Unit/Maximum Receive Unit (MTU/MRU) Greater Than 1492 in the Point-to-Point Protocol over Ethernet (PPPoE) RFC 4938 - PPP Over Ethernet (PPPoE) Extensions for Credit Flow and Link Metrics US Patent 6891825 - Method and system of providing multi-user access to a packet switched network TR-043 - Protocols at the U Interface for Accessing Data Networks using ATM/DSL, Issue 1.0, August 2001
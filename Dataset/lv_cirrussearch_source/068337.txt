Programmatūras kvalitātes kontrole ir kvālitātes pasākumu izpildes uzraudzības un rezultātu reģistrēšanas process, lai novērtētu sniegumu un ieteiktu nepieciešamās izmaiņas. Kvalitātes kontroles nav tikai kļūdu un defektu novēršana programmatūras testēšanā. Galvenokārt tas ir saistīts ar ieinteresēto personu funkcionālo prasību izpildi. ISO/IEC 9126 uzskaitītas sešas būtiskas programmatūras kvalitātes kontroles īpašības: funkcionalitāte, uzticamība, pielietojamība, efektivitāte, uzturamība, mobilitāte. Kvalitātes kontrole nodrošina, ka projektā izstrādātie pieejas, tehnika, metodes un procesi tiek ievēroti pareizi. Kontrole aktivitātes uzrauga un pārbauda, vai projekta rezultāti atbilst noteiktajiem kvalitātes standartiem. Kvalitātes kontrole ir reaktīvs pasākums, lai identificētu un labotu defektus pēc tam, kad darbs ir pabeigts, savukārt kvalitātes nodrošināšana ir preventīvs pasākums, lai novērstu defektus un nodrošinātu, ka darbs tiek veikts pareizi. Programmatūras kvalitātes kontroles darbības iedalīts divās vispārīgās kategorijās. Tās ir pārskata darbības un testēšanas darbības: Prasību pārskatīšana — tiek pārbaudīts, vai ir izpildītas visas nepieciešamās sastāvdaļas. Dizaina pārskatīšana — tas ir programmatūras produkta veidošanas posmu analīzes pārbaudes process. Koda pārskatīšana — tas attiecas uz koda novērtēšanu, izmantojot dažādas testēšanas metodes. Izvietošanas plāna pārskatīšana — tā ir izvietošanas testēšanas posma plāna pārskatīšana. Testēšanas plāna pārskatīšana — šajā darbībā tiek ģenerēti testu plāni, lai novērtētu katru programmatūras produkta lauku. Testa gadījumu pārskatīšana — testa gadījums ir darbību kopums, kas tiek veikts ar programmatūru, lai pārbaudītu, vai tā atbilst kvalitātes prasībām. Tos parasti izstrādā testēšanas plānošanas posmā. Ir jāpārskata katrs testa gadījums, lai pārliecinātos par tā piemērotību. Kad testēšanas komanda pabeidz pārskatīšanu, tā veic vairākas testēšanas darbības. Testēšanas metodes var atšķirties. Tās noteiks programmatūras izstrādes projekta specifiskās kvalitātes prasības. Vienībtestēšana — tiek pārbaudīts, vai katra avota koda vienība, komponente vai daļa darbojas pareizi. Integrācijas testēšana — pārbauda, vai visi programmatūras moduļi darbojas labi, īpaši, ja tie ir apvienoti ar citām vienībām. Sistēmas testēšana — notiek pēc vienībtestēšanas un integrācijas testēšanas aktivitātēm. Tā ir atsevišķa testēšanas procesa daļa, kas pārbauda visu integrēto sistēmu. Šajā posmā tiek pārbaudīts, vai integrētā sistēma atbilst projekta prasībām. Pieņemšanas testēšana — pārbauda vajadzības, lietotāju cerības un prasības. Tā arī novērtē, vai programmatūra iekļaujas klienta biznesa procesos. Laidiena testēšana — šis process cenšas atrast kļūdas un nepilnības pirms programmatūra tiek izlaista. Uzturēšanas testēšana — testēšanas darbība tiek veikta pēc programmatūras produkta izlaišanas. Uzturēšanas testēšana tiek veikta, lai pārbaudītu problēmas pēc šādiem scenārijiem: plānotas uzlabojumu un nepārtrauktas uzlabošanas programmatūras produktam; koriģējošas vai ārkārtas izmaiņas; papildu funkciju ieviešana; datu migrācija. Programmatūras kvalitātes kontroles ieviešana var sniegt daudz priekšrocību, tostarp: Augstas kvalitātes programmatūras produktu — stingra prakse ļauj izstrādātāju komandai radīt kvalitatīvu programmatūru. Apmierināti klienti — apmierināti klienti palielina pārdošanas apjomus un stiprina zīmola reputāciju. Lieliska lietotāja pieredze, kas veicina klientu lojalitāti — lietotāja pieredze var veidot pamatu ilgtermiņa attiecībām ar klientiem Racionalizēti uzņēmējdarbības procesi — agri atklājot problēmas, programmatūras izstrādes dzīves cikls kļūst efektīvāks. Tas arī novērš papildu izmaksas. Iepazīsti Tehnoloģijas: #2 Papildsesija ar Initu Miglāni. Atjaunināts: 2023-08-02 «Introduction to Quality Control in Software Testing». «Difference Between Quality Assurance And Quality Control (QA Vs QC)».
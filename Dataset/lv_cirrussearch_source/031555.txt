Objektorientētā programmēšana (OOP) ir programmēšanas paradigma, kurā programma tiek veidota izmantojot objektus un klases. Tā ietver vairākas tehnikas no iepriekšējām paradigmām, tādas kā pārmantojamība, modularitāte, polimorfisms un iekapsulēšana. Lai gan tā radusies 1960. gados, OOP kļuva par galveno programmēšanas metodi tikai 1990. gados. Mūsdienās vairums programmēšanas valodu (piemēram, ActionScript, C++, Java, JavaScript, Perl, PHP, Python, Ruby, Visual Basic, Visual Prolog) ir objektorientētas. Objektorientētajā programmēšanā programma tiek uztverta kā savstarpēji saistītu objektu kopums, kuri savā starpā mijiedarbojas. Tas ir citāds skatījums, salīdzinājumā ar tradicionālo pieeju, kad programmu uztver kā secīgu instrukciju sarakstu, kuras dators izpilda. Tāpat kā reāliem objektiem dabā, OOP objektiem arī ir savas individuālas īpašības, tie var veikt kādas darbības, kā arī nodot un saņemt informāciju no citiem objektiem. OOP ir divas koncepcijas — viena, kas balstīta uz klasēm, otra — uz prototipu programmēšanu. ;objekts Objekts sastāv no datu kopuma un šiem datiem piesaistītajām darbībām. Datus objektā reprezentē iekšējie mainīgie jeb lauki, bet darbības reprezentē iekšējās funkcijas jeb metodes. Objekti tiek izveidoti programmas darbības gaitā un glabājas datora atmiņā. ;klase Klase ir apraksts, pēc kura tiek izveidoti objekti. Šajā aprakstā tiek aprakstīti jeb deklarēti objekta iekšējie mainīgie un funkcijas. Šo aprakstu veido programmētājs un tas ir daļa no programmas koda. Ja objekts ir izveidots pēc dotā apraksta, tad saka ka tas pieder attiecīgajai klasei jeb ir attiecīgās klases instance.
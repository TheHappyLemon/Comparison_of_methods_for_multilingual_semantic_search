OpenSSH (also known as OpenBSD Secure Shell) is a suite of secure networking utilities based on the Secure Shell (SSH) protocol, which provides a secure channel over an unsecured network in a client–server architecture. OpenSSH started as a fork of the free SSH program developed by Tatu Ylönen; later versions of Ylönen's SSH were proprietary software offered by SSH Communications Security. OpenSSH was first released in 1999 and is currently developed as part of the OpenBSD operating system. OpenSSH is not a single computer program, but rather a suite of programs that serve as alternatives to unencrypted protocols like Telnet and FTP. OpenSSH is integrated into several operating systems, namely Microsoft Windows, macOS and most Linux operating systems, while the portable version is available as a package in other systems. OpenBSD Secure Shell was created by OpenBSD developers as an alternative to the original SSH software by Tatu Ylönen, which is now proprietary software. Although source code is available for the original SSH, various restrictions are imposed on its use and distribution. OpenSSH was created as a fork of Björn Grönvall's OSSH that itself was a fork of Tatu Ylönen's original free SSH 1.2.12 release, which was the last one having a license suitable for forking. The OpenSSH developers claim that their application is more secure than the original, due to their policy of producing clean and audited code and because it is released under the BSD license, the open-source license to which the word open in the name refers. OpenSSH first appeared in OpenBSD 2.6. The first portable release was made in October 1999. Developments since then have included the addition of ciphers (e.g., ChaCha20-Poly1305 in 6.5 of January 2014), cutting the dependency on OpenSSL (6.7, October 2014) and an extension to facilitate public-key discovery and rotation for trusted hosts (for transition from DSA to Ed25519 public host keys, version 6.8 of March 2015). On 19 October 2015, Microsoft announced that OpenSSH will be natively supported on Microsoft Windows and accessible through PowerShell, releasing an early implementation and making the code publicly available. OpenSSH-based client and server programs have been included in Windows 10 since version 1803. The SSH client and key agent are enabled and available by default, and the SSH server is an optional Feature-on-Demand. In October 2019 protection for private keys at rest in RAM against speculation and memory side-channel attacks were added in OpenSSH 8.1. OpenSSH is developed as part of the OpenBSD operating system. Rather than including changes for other operating systems directly into OpenSSH, a separate portability infrastructure is maintained by the OpenSSH Portability Team, and "portable releases" are made periodically. This infrastructure is substantial, partly because OpenSSH is required to perform authentication, a capability that has many varying implementations. This model is also used for other OpenBSD projects such as OpenNTPD. The OpenSSH suite includes the following command-line utilities and daemons: scp, a replacement for rcp. sftp, a replacement for ftp to copy files between computers. ssh, a replacement for rlogin, rsh and telnet to allow shell access to a remote machine. ssh-add and ssh-agent, utilities to ease authentication by holding keys ready and avoid the need to enter passphrases every time they are used. ssh-keygen, a tool to inspect and generate the RSA, DSA and elliptic-curve keys that are used for user and host authentication. ssh-keyscan, which scans a list of hosts and collects their public keys. sshd, the SSH server daemon. The OpenSSH server can authenticate users using the standard methods supported by the SSH protocol: with a password; public-key authentication, using per-user keys; host-based authentication, which is a secure version of rlogin's host trust relationships using public keys; keyboard-interactive, a generic challenge–response mechanism, which is often used for simple password authentication, but which can also make use of stronger authenticators such as tokens; and Kerberos/GSSAPI. The server makes use of authentication methods native to the host operating system; this can include using the BSD Authentication system or pluggable authentication modules (PAM) to enable additional authentication through methods such as one-time passwords. However, this occasionally has side effects: when using PAM with OpenSSH, it must be run as root, as root privileges are typically required to operate PAM. OpenSSH versions after 3.7 (16 September 2003) allow PAM to be disabled at run-time, so regular users can run sshd instances. On OpenBSD, OpenSSH uses a dedicated sshd user by default to drop privileges and perform privilege separation in accordance with the principle of least privilege, applied throughout the operating system including the Xenocara X server. OpenSSH includes the ability to set up a secured channel through which data sent to local, client-side Unix domain sockets or local, client-side TCP ports may be "forwarded" (sent across the secured channel) for routing on the server side; when this forwarding is set up, the server is instructed to send that forwarded data to some socket or TCP host/port (the host could be the server itself, "localhost"; or, the host may be some other computer, so that it appears to the other computer that the server is the originator of the data). The forwarding of data is bidirectional, meaning that any return communication is itself forwarded back to the client-side in the same manner; this is known as an "SSH tunnel", and it can be used to multiplex additional TCP connections over a single SSH connection since 2004, to conceal connections, to encrypt protocols that are otherwise unsecured, and to circumvent firewalls by sending/receiving all manner of data through one port that is allowed by the firewall. For example, an X Window System tunnel may be created automatically when using OpenSSH to connect to a remote host, and other protocols, such as HTTP and VNC, may be forwarded easily. Tunneling a TCP-encapsulating payload (such as PPP) over a TCP-based connection (such as SSH's port forwarding) is known as "TCP-over-TCP", and doing so can induce a dramatic loss in transmission performance (a problem known as "TCP meltdown"), which is why virtual private network software may instead use for the tunnel connection a protocol simpler than TCP. However, this is often not a problem when using OpenSSH's port forwarding, because many use cases do not entail TCP-over-TCP tunneling; the meltdown is avoided because the OpenSSH client processes the local, client-side TCP connection in order to get to the actual payload that is being sent, and then sends that payload directly through the tunnel's own TCP connection to the server side, where the OpenSSH server similarly "unwraps" the payload in order to "wrap" it up again for routing to its final destination. In addition, some third-party software includes support for tunnelling over SSH. These include DistCC, CVS, rsync, and Fetchmail. On some operating systems, remote file systems can be mounted over SSH using tools such as sshfs (using FUSE). An ad hoc SOCKS proxy server may be created using OpenSSH. This allows more flexible proxying than is possible with ordinary port forwarding. Beginning with version 4.3, OpenSSH implements an OSI layer 2/3 tun-based VPN. This is the most flexible of OpenSSH's tunnelling capabilities, allowing applications to transparently access remote network resources without modifications to make use of SOCKS. OpenSSH supports the following public key types: ssh-dss (disabled at run-time since OpenSSH 7.0, released in 2015) ssh-rsa (disabled at run-time since OpenSSH 8.8, released in 2021) ecdsa-sha2-nistp256 (since OpenSSH 5.7, released in 2011) ecdsa-sha2-nistp384 (since OpenSSH 5.7) ecdsa-sha2-nistp521 (since OpenSSH 5.7) ssh-ed25519 (since OpenSSH 6.5, released in 2014) rsa-sha2-256 (since OpenSSH 7.2, released in 2016) rsa-sha2-512 (since OpenSSH 7.2) ecdsa-sk (since OpenSSH 8.2, released in 2020) ed25519-sk (since OpenSSH 8.2) NTRU Prime-x25519 (since OpenSSH 9.0, released in 2022) Before version 5.2 of OpenSSH, it was possible for an attacker to recover up to 14 bits of plaintext with a success probability of 2−14. The vulnerability was related to the CBC encryption mode. The AES CTR mode and arcfour ciphers are not vulnerable to this attack. A local privilege escalation vulnerability existed in OpenSSH 6.8 to 6.9 (CVE-2015-6565) due to world-writable (622) TTY devices, which was believed to be a denial of service vulnerability. With the use of the TIOCSTI ioctl, it was possible for authenticated users to inject characters into other users terminals and execute arbitrary commands on Linux. Malicious or compromised OpenSSH servers could read sensitive information on the client such as private login keys for other systems, using a vulnerability that relies on the undocumented connection-resuming feature of the OpenSSH client, which is called roaming, enabled by default on the client, but not supported on the OpenSSH server. This applies to versions 5.4 (released on 8 March 2010) to 7.1 of the OpenSSH client, and was fixed in OpenSSH 7.1p2, released on 14 January 2016. CVE numbers associated to this vulnerability are CVE-2016-0777 (information leak) and CVE-2016-0778 (buffer overflow). On March, 29 2024 a serious supply chain attack on XZ Utils has been reported, targeting indirectly the OpenSSH server (sshd) running on Linux. The OpenSSH code is not directly concerned, the backdoor is caused by the dependencies on liblzma via libsystemd applied by a tierce patch, applied by various Linux distributions. In February 2001, Tatu Ylönen, Chairman and CTO of SSH Communications Security informed the OpenSSH development mailing list that the company intended to assert its ownership of the "SSH" and "Secure Shell" trademarks, and sought to change references to the protocol to "SecSH" or "secsh", in order to maintain control of the "SSH" name. He proposed that OpenSSH change its name in order to avoid a lawsuit, a suggestion that developers resisted. OpenSSH developer Damien Miller replied urging Ylönen to reconsider, arguing that "SSH" had long since been a generic trademark. At the time, "SSH", "Secure Shell" and "ssh" had appeared in documents proposing the protocol as an open standard. Without marking these within the proposal as registered trademarks, Ylönen ran the risk of relinquishing all exclusive rights to the name as a means of describing the protocol. Improper use of a trademark, or allowing others to use a trademark incorrectly, results in the trademark becoming a generic term, like Kleenex or Aspirin, which opens the mark to use by others. After study of the USPTO trademark database, many online pundits opined that the term "ssh" was not trademarked, merely the logo using the lower case letters "ssh". In addition, the six years between the company's creation and the time when it began to defend its trademark, and that only OpenSSH was receiving threats of legal repercussions, weighed against the trademark's validity. Both developers of OpenSSH and Ylönen himself were members of the IETF working group developing the new standard; after several meetings this group denied Ylönen's request to rename the protocol, citing concerns that it would set a bad precedent for other trademark claims against the IETF. The participants argued that both "Secure Shell" and "SSH" were generic terms and could not be trademarks. Free and open-source software portal Comparison of SSH clients Comparison of SSH servers SSH File Transfer Protocol (SFTP) "OpenBSD Secure Shell" name is mainly used in various sshd startup scripts. "release-9.7". "OpenSSH Portable Release". OpenBSD. Retrieved 15 October 2015. "Specifications implemented by OpenSSH". The OpenBSD Project. Retrieved 14 October 2015. Venkatachalam, Girish (April 2007). "The OpenSSH Protocol under the Hood". Linux Journal (156): 74–77 – via the Discovery Database at LSU. Network Working Group of the IETF, January 2006, RFC 4252, The Secure Shell (SSH) Authentication Protocol. Duffy Marsan, Carolyn (22 March 2001). "Secure Shell inventor denied trademark request". ITworld.com. Retrieved 14 December 2021. "dragonfly.git/blob - crypto/openssh/README". gitweb.dragonflybsd.org. Retrieved 19 May 2016. This is the port of OpenBSD's excellent OpenSSH to Linux and other Unices. "src/crypto/external/bsd/openssh/dist/README - view - 1.4". NetBSD CVS Repositories. Retrieved 19 May 2016. "openssh". OpenSUSE. Retrieved 17 May 2016. "Debian -- Details of package openssh-client in jessie". Debian. Retrieved 17 May 2016. "Arch Linux - openssh 7.2p2-1 (x86_64)". Arch Linux. Retrieved 17 May 2016. "Project History and Credits". OpenBSD. Retrieved 8 April 2008. OSSH sources ssh-1.2.13 now available: copying policy changed (permission now required to sell ssh commercially, use is still permitted for any purpose) "OpenSSH: Project History and Credits". openssh.com. 22 December 2004. Retrieved 27 February 2014. "Portable OpenSSH – Freecode". Freshmeat.net. Retrieved 11 February 2014. Murenin, Constantine A. (11 December 2013). Unknown Lamer (ed.). "OpenSSH Has a New Cipher — Chacha20-poly1305 — from D.J. Bernstein". Slashdot. Retrieved 26 December 2014. Murenin, Constantine A. (30 April 2014). Soulskill (ed.). "OpenSSH No Longer Has To Depend On OpenSSL". Slashdot. Retrieved 26 December 2014. Murenin, Constantine A. (1 February 2015). Soulskill (ed.). "OpenSSH Will Feature Key Discovery and Rotation For Easier Switching To Ed25519". Slashdot. Retrieved 1 February 2015. "OpenSSH for Windows Update". 19 October 2015. Retrieved 23 October 2015. Durr, Yosef (7 March 2018). "What's new for the Command Line in Windows 10 version 1803". Windows Command Line Tools For Developers. "Protection for private keys at rest in RAM". "OpenBSD manual pages: SSH". openbsd.org. 3 July 2014. Retrieved 14 July 2014. "OpenSSH Release Notes". "Features". OpenSSH. Retrieved 26 June 2016. Titz, Olaf (23 April 2001). "Why TCP Over TCP Is A Bad Idea". Retrieved 17 October 2015. Honda, Osamu; Ohsaki, Hiroyuki; Imase, Makoto; Ishizuka, Mika; Murayama, Junichi (October 2005). "Understanding TCP over TCP: effects of TCP tunneling on end-to-end throughput and latency". In Atiquzzaman, Mohammed; Balandin, Sergey I (eds.). Performance, Quality of Service, and Control of Next-Generation Communication and Sensor Networks III. Vol. 6011. Bibcode:2005SPIE.6011..138H. CiteSeerX 10.1.1.78.5815. doi:10.1117/12.630496. S2CID 8945952. Kaminsky, Dan (13 June 2003). "Re: Extensions for long fat networks?". openssh-unix-dev@mindrot.org (Mailing list). the TCP forwarding code is pretty speedy as well. Just to pre-answer a question, ssh decapsulates and re-encapsulates TCP, so you don't have classic TCP-over-TCP issues. "OpenSSH 4.3 Release Notes". openssh.com. 1 February 2006. Retrieved 14 July 2014. "SSHD(8) - Linux manual page". "Sshd_config(5) - OpenBSD manual pages". "OpenSSH 7.0 release notes". OpenSSH. 11 August 2015. Retrieved 13 November 2022. "OpenSSH 8.8 release notes". OpenSSH. 26 September 2021. Retrieved 13 November 2022. "OpenSSH 5.7 release notes". OpenSSH. 24 January 2011. Retrieved 13 November 2022. "OpenSSH 6.5 release notes". OpenSSH. 29 January 2014. Retrieved 13 November 2022. "OpenSSH 7.2 release notes". OpenSSH. 29 February 2016. Retrieved 13 November 2022. "OpenSSH 8.2 release notes". OpenSSH. 14 February 2020. Retrieved 13 November 2022. "Changes since OpenSSH 8.9 (OpenSSH 9.0 release notes)". OpenSSH developers. 8 April 2022. OpenSSH Security Advisory CBC Attack CVE-2015-6565 OpenSSH PTY vulnerability OpenSSH 5.4 released Thomson, Iain (14 January 2016). "Evil OpenSSH servers can steal your private login keys to other systems – patch now". The Register. OpenSSH 7.1p2 has just been released. Ylonen, Tatu (14 February 2001). "SSH trademarks and the OpenSSH product name". openssh-unix-dev (Mailing list). MARC. Retrieved 11 February 2014. Miller, Damien (14 February 2001). "Re: SSH trademarks and the OpenSSH product name". openssh-unix-dev (Mailing list). MARC. Retrieved 11 February 2014. Lemos, Robert (2 January 2002). "Ssh! Don't use that trademark". CNET. Retrieved 19 May 2016. Ylonen, Tatu (1 March 2002). "Ylönen: We own ssh trademark, but here's a proposal". NewsForge. Archived from the original on 1 March 2002. Retrieved 20 May 2016. Wikibooks has more on the topic of: OpenSSH Wikimedia Commons has media related to OpenSSH. Official website ssh(1) – OpenBSD General Commands Manual sshd(8) – OpenBSD System Manager's Manual OpenSSH at the Super User's BSD Cross Reference (BXR.SU) OpenGrok SSH OpenSSH - Windows CMD - SS64.com
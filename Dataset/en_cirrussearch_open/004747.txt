A patch is a set of changes to a computer program or its supporting data designed to update or repair it. This includes bugfixes or bug fixes to remove security vulnerabilities and correct bugs (errors).[better source needed] Patches are often written to improve the functionality, usability, or performance of a program. The majority of patches are provided by software vendors for operating system and application updates. Patches may be installed either under programmed control or by a human programmer using an editing tool or a debugger. They may be applied to program files on a storage device, or in computer memory. Patches may be permanent (until patched again) or temporary. Similarly, patches may be prepared by hand, or created by an automatic difference-finding tool that compares two similar files and determines what changes are needed to transform one into another. Most patches must be applied to exactly the version of the file they are intended to modify, although if the change is small and similar in a number of versions, this requirement may not apply. Many automated patching tools can support patches for multiple versions of files by detecting the version of the existing file and applying an appropriate patch. As more and more versions are released, the cumulative size of such patches may become larger than the updated file, at which point the number of supported previous versions may be reduced, or a complete copy of the updated file may be provided instead. Patching makes possible the modification of compiled and machine language object programs when the source code is unavailable. This demands a thorough understanding of the inner workings of the object code by the person creating the patch, which is difficult without close study of the source code. Someone unfamiliar with the program being patched may install a patch using a patch utility created by another person. Even when the source code is available, patching makes possible the installation of small changes to the object program without the need to recompile or reassemble. For minor changes to software, it is often easier and more economical to distribute patches to users rather than redistributing a newly recompiled or reassembled program. Although meant to fix problems, poorly designed patches can sometimes introduce new problems (see software regressions). In some special cases updates may knowingly break the functionality or disable a device, for instance, by removing components for which the update provider is no longer licensed. Patch management is a part of lifecycle management, and is the process of using a strategy and plan of what patches should be applied to which systems at a specified time.